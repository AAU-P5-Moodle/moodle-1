{"version":3,"file":"edit_question_helper.min.js","sources":["../src/edit_question_helper.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\n\nlet IDs = 0;\nlet isEditing = false;\nlet editingIndex = 0;\n\n/**\n * Adds an event listener to the \"Add Answer\" button.\n * When the button is clicked, it appends a new answer input field.\n */\nexport const add_answer_button_event_listener = () => {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n};\n\n/**\n * Appends a new answer input container to the container holding all answers\n * \n * This function creates a new answer container with an incremented ID and appends it to the \n * element with the class \"all_answers_for_question_div\".\n */\nexport function append_answer_input() {\n  let answer_container = create_answer_container(IDs + 1);\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  IDs++;\n}\n\n/**\n * Creates a new answer container element.\n * THIS SHOULD PROBABLY BE MADE INTO MUSTACHE TEMPLATE INSTEAD OF A FUNCTION\n *\n * @param {string} id - The unique identifier for the answer container.\n * @returns {HTMLDivElement} The created answer container element.\n */\nexport function create_answer_container(id) {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer\";\n  answer_input.id = \"answer_input_\" + id;\n  answer_input.setAttribute(\"required\", true);\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n  answer_checkbox.id = \"answer_checkbox_\" + id;\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"X\"\n  );\n  delete_answer_button.id = \"delete_answer_button_\" + id;\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n  });\n  return answer_container;\n}\n\n/**\n * Adds an event listener to the discard question button.\n * When the button is clicked, it triggers the render_question_confirmation function.\n */\nexport const add_discard_question_button_listener = () => {\n  let discard_question_button = document.querySelector(\n    \".discard_question_button\"\n  );\n  discard_question_button.addEventListener(\"click\", () => {\n    render_question_confirmation();\n  });\n};\n\n/**\n * Renders the question confirmation modal.\n *\n * Renders \"mod_livequiz/question_confirmation\" template.\n * Appends the HTML and JavaScript to the \".Modal_div\" element\n * Calls the `question_confirmation` function\n *\n * @function\n * @returns {void}\n */\nfunction render_question_confirmation() {\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\".Modal_div\", html, js);\n      question_confirmation();\n    })\n    .catch((error) => displayException(error));\n}\n\n/**\n * Handles the confirmation process for deleting a question.\n * \n * This function sets up event listeners for the yes and no buttons when discarding a question.\n * When yes is clicked, the editing menu is removed\n * When no is clicked, the confirmation pop-up is removed\n * \n * @function question_confirmation\n */\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\n    \".toast_promise_deletion_div\"\n  );\n  let cancel_question_deletion_button = document.querySelector(\n    \".cancel_question_deletion_button\"\n  );\n  let continue_question_deletion_button = document.querySelector(\n    \".continue_question_deletion_button\"\n  );\n\n  let modal_div = document.querySelector(\".Modal_div\");\n\n  continue_question_deletion_button.addEventListener(\"click\", () => {\n    isEditing = false;\n    editingIndex = null;\n    modal_div.remove();\n  });\n\n  cancel_question_deletion_button.addEventListener(\"click\", () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\n/**\n * Creates a new HTML element with the specified type, class, and content.\n *\n * @param {HTMLElement} element_name - The variable to hold the created element.\n * @param {string} type - The type of the HTML element to create (e.g., 'div', 'span').\n * @param {string} class_name - The class name to assign to the created element.\n * @param {string} content - The text content to set for the created element.\n * @returns {HTMLElement} The newly created HTML element.\n */\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n\n/**\n * Rerenders the saved questions list.\n *\n * This function removes the existing saved questions list from the DOM,\n * Renders the \"mod_livequiz/saved_questions_list\" template with the provided questions\n * After re-rendering, it calls the provided callback function, if any.\n *\n * @param {Array} questions - An array of question objects to be rendered.\n * @param {Function} [callback] - An optional callback function to be executed after the list is re-rendered.\n */\nexport function rerender_saved_questions_list(questions, callback) {\n  // The template needs to know the questions to render.\n  const contextsavedquestions = {\n    questions: questions,\n  };\n\n  // Remove the saved questions list.\n  let questions_list = document.querySelector(\"#saved_questions_list\");\n  questions_list.remove();\n\n  // Re-render saved questions list.\n  Templates.renderForPromise(\n    \"mod_livequiz/saved_questions_list\",\n    contextsavedquestions\n  )\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\"#saved-questions-container\", html, js);\n\n      // Call the functions in callback, this allows for custom functions to be called after the rerendering.\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n    .catch((error) => console.log(error));\n}\n\n/**\n * Renders the \"mod_livequiz/take_quiz_button\" template based on whether there are questions in the quiz.\n *\n * @param {string} url - The URL for the \"Take Quiz\" button to redirect to.\n * @param {boolean} hasquestions - Indicates if the quiz has questions.\n * @param {function} [callback] - Optional callback function to execute after re-rendering.\n */\n\nexport function rerender_take_quiz_button(url, hasquestions, callback) {\n  //The template needs to know if there are questions in the quiz.\n  //If there are questions -> Create a button to redirect to the quiz.\n  //If there are no questions -> Display a paragraph that says there are no questions.\n\n  const contexttakequiz = {\n    url: url,\n    hasquestions: hasquestions,\n  };\n\n  if (hasquestions) {\n    //Remove no question paragraph if there are questions.\n    let no_question_paragraph = document.querySelector(\".no-question-text\");\n    if (no_question_paragraph) {\n      no_question_paragraph.remove(); //We have just added a question so remove the no question text\n    } else {\n      let take_quiz_button = document.querySelector(\"#takeQuizBtn\");\n      take_quiz_button.remove();\n    }\n  } else {\n    //Remove take quiz link if there are no questions\n    let take_quiz_button = document.querySelector(\"#takeQuizBtn\");\n    take_quiz_button.remove();\n  }\n\n  Templates.renderForPromise(\"mod_livequiz/take_quiz_button\", contexttakequiz)\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here we have compiled template.\n      Templates.appendNodeContents(\"#page-mod-livequiz-quizcreator\", html, js);\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\n/**\n * This validates that all inputs to create/edit question, if not all inputs are satisfied, it will return false.\n * @param answers The answers of the question.\n * @returns {boolean} True if input fields are satisfied, false otherwise.\n */\nexport function validate_submission(answers) {\n  let isValid = true; // Is the question valid.\n  let answersValid = true; // Are all the answers valid.\n  let questionTitle = document.getElementById(\"question_title_id\").value.trim();\n  let questionTitleTextarea = document.getElementById(\"question_title_id\");\n  let questionTitleAlert = document.getElementById(\"title_textarea_alert\");\n  let questionDesription = document.getElementById(\"question_description_id\").value.trim();\n  let questionDesriptionTextarea = document.getElementById(\"question_description_id\");\n  let questionDescriptionAlert = document.getElementById(\"question_textarea_alert\");\n  let atLeastOneCorrectAnswerAlert = document.getElementById(\"question_alert_one_correct\");\n  let answerDescriptionAlert = document.getElementById(\"question_alert_description\");\n  let atLeastTwoAnswersAlert = document.getElementById(\"question_alert_two_answers\");\n  let maxOneCorrectAnswerAlert = document.getElementById(\"question_alert_max_one_correct\");\n  let questionType = document.getElementById(\"question_type_checkbox_id\").checked;\n  let answersBox = document.getElementById(\"all_answers\");\n  let isValidText = document.getElementById(\"validText\");\n\n  // Function to set the border style of an element.\n  const setBorderStyle = (element, isValid) => {\n    element.style.border = isValid ? \"1px solid #ccc\" : \"1px solid red\";\n  };\n\n  // Checks if the question title is empty.\n  if (!questionTitle) {\n    setBorderStyle(questionTitleTextarea, !!questionTitle);\n    questionTitleAlert.style.display = \"block\";\n    isValid = false;\n  } else {\n    questionTitleAlert.style.display = \"none\";\n    setBorderStyle(questionTitleTextarea, true);\n  }\n\n    // Checks if the question description is empty.\n  if (!questionDesription) {\n    setBorderStyle(questionDesriptionTextarea, !!questionDesription);\n    questionDescriptionAlert.style.display = \"block\";\n    isValid = false;\n  } else {\n    questionDescriptionAlert.style.display = \"none\";\n    setBorderStyle(questionDesriptionTextarea, true);\n  }\n\n  // Checks if there are at least two answers.\n  if (answers.length < 2) {\n    isValid = false;\n    answersValid = false;\n    atLeastTwoAnswersAlert.style.display = \"block\";\n  }\n  else {\n    atLeastTwoAnswersAlert.style.display = \"none\";\n  }\n\n  // Checks if at least one answer is correct.\n  if (!answers.some(answer => answer.correct === 1)) {\n    isValid = false;\n    answersValid = false;\n    atLeastOneCorrectAnswerAlert.style.display = \"block\";\n  }\n  else {\n    atLeastOneCorrectAnswerAlert.style.display = \"none\";\n  }\n\n  // Checks if all answers have a description.\n  if (answers.some(answer => !answer.description.trim())) {\n    isValid = false;\n    answersValid = false;\n    answerDescriptionAlert.style.display = \"block\";\n  } else {\n    answerDescriptionAlert.style.display = \"none\";\n  }\n\n  // Checks if multiple correct answers have been set, when not allowed to. \n  if (questionType) {\n    let checkedAnswers = 0;\n    answers.forEach(answer => {\n      checkedAnswers += answer.correct;\n    });\n    if (checkedAnswers > 1){\n      isValid = false;\n      answersValid = false;\n      maxOneCorrectAnswerAlert.style.display = \"block\";\n    } else {\n      maxOneCorrectAnswerAlert.style.display = \"none\";\n    } \n  } else {\n    maxOneCorrectAnswerAlert.style.display = \"none\";\n  }\n\n  if (!answersValid) { // If not all answers are valid show the box with warnings.\n    answersBox.style.display = \"block\";\n  } else {\n    answersBox.style.display = \"none\";\n  }\n\n  if (!isValid) { // If the question is not valid show warning.\n    isValidText.style.display = \"block\";\n    return false;\n  }\n  return true;\n}\n"],"names":["questions","callback","contextsavedquestions","document","querySelector","remove","renderForPromise","then","_ref2","html","js","appendNodeContents","catch","error","console","log","url","hasquestions","contexttakequiz","no_question_paragraph","_ref3","answers","isValid","answersValid","questionTitle","getElementById","value","trim","questionTitleTextarea","questionTitleAlert","questionDesription","questionDesriptionTextarea","questionDescriptionAlert","atLeastOneCorrectAnswerAlert","answerDescriptionAlert","atLeastTwoAnswersAlert","maxOneCorrectAnswerAlert","questionType","checked","answersBox","isValidText","setBorderStyle","element","style","border","display","length","some","answer","correct","description","checkedAnswers","forEach","IDs","isEditing","editingIndex","append_answer_input","answer_container","create_answer_container","appendChild","id","createElement","className","answer_input","placeholder","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","addEventListener","_ref","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","modal_div","question_confirmation"],"mappings":"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"}