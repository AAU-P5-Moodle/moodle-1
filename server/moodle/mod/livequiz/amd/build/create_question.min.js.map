{"version":3,"file":"create_question.min.js","sources":["../src/create_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport { exception as displayException } from \"core/notification\";\r\nimport { save_question } from \"./repository\";\r\nimport { add_delete_question_listeners } from \"./delete_question\";\r\nimport { add_edit_question_listeners } from \"./edit_question\";\r\nimport {\r\n  rerender_take_quiz_button,\r\n  rerender_saved_questions_list,\r\n  add_answer_button_event_listener,\r\n  add_cancel_edit_button_listener,\r\n  validate_submission,\r\n} from \"./edit_question_helper\";\r\n\r\nlet isEditing = false;\r\nlet editingIndex = 0;\r\nlet answer_count = 0;\r\nlet IDs = 0;\r\nlet take_quiz_url = \"\";\r\n\r\n/**\r\n * Adds an event listener to the \"Add Question\" button.\r\n * When the button is clicked, it renders the create question menu popup.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async (quizid, lecturerid, url) => {\r\n  take_quiz_url = url; //Set url to quiz attempt page to global variable\r\n  let add_question_button = document.getElementById(\"id_buttonaddquestion\");\r\n  add_question_button.addEventListener(\"click\", () => {\r\n    render_create_question_menu_popup(quizid, lecturerid);\r\n  });\r\n};\r\n\r\n/**\r\n * Renders the create question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the question menu popup template, appends it to the main container,\r\n * Sets up event listeners for adding answers, saving the question, and discarding the question.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {void}\r\n */\r\nfunction render_create_question_menu_popup(quizid, lecturerid) {\r\n  // This will call the function to load and render our template.\r\n  if(!document.querySelector('.Modal_div')){\r\n    Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\r\n\r\n      // It returns a promise that needs to be resoved.\r\n      .then(({ html, js }) => {\r\n        // Here we have compiled template.\r\n        Templates.appendNodeContents(\".main-container\", html, js);\r\n        add_answer_button_event_listener();\r\n        add_save_question_button_listener(quizid, lecturerid);\r\n        add_cancel_edit_button_listener(\"create\");\r\n      })\r\n\r\n      // Deal with this exception (Using core/notify exception function is recommended).\r\n      .catch((error) => displayException(error));\r\n  }\r\n}\r\n\r\n/**\r\n * Adds an event listener to the save question button\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n */\r\nfunction add_save_question_button_listener(quizid, lecturerid) {\r\n  let save_question_button = document.querySelector(\".save_button\");\r\n  save_question_button.addEventListener(\"click\", () => {\r\n    handle_question_submission(quizid, lecturerid);\r\n  });\r\n}\r\n\r\nfunction handle_question_submission(quizid, lecturerid) {\r\n  let savedQuestion = prepare_question(); //Prepare the question object to be sent to DB\r\n\r\n  if(!validate_submission(savedQuestion.answers)) {\r\n    return;\r\n  }\r\n\r\n  let update_event_listeners = () => {\r\n    add_edit_question_listeners(quizid, lecturerid);\r\n    add_delete_question_listeners(quizid, lecturerid);\r\n  }\r\n\r\n  save_question(savedQuestion, lecturerid, quizid).then((questions) => {\r\n    rerender_saved_questions_list(questions, update_event_listeners); //Re-render saved questions list\r\n    rerender_take_quiz_button(take_quiz_url, true); //Re-render take quiz button\r\n  });\r\n\r\n  let modal_div = document.querySelector(\".backdrop\");\r\n  modal_div.remove();\r\n}\r\n\r\nfunction prepare_question() {\r\n  let question_input_title = document.getElementById(\"question_title_id\");\r\n  let question_indput_description = document.getElementById(\r\n    \"question_description_id\"\r\n  );\r\n  let question_indput_explanation = document.getElementById(\r\n    \"question_explanation_id\"\r\n  );\r\n  let questionTitle = question_input_title.value.trim();\r\n  let questionDesription = question_indput_description.value.trim();\r\n  let questionExplanation = question_indput_explanation.value.trim();\r\n\r\n  let questionType = document.getElementById(\"question_type_checkbox_id\").checked ? 1 : 0;\r\n\r\n  let answers = prepare_answers();\r\n\r\n  // CHECK HERE IF THE QUESTION IS VALID\r\n  let savedQuestion = {\r\n    id: 0,\r\n    title: questionTitle,\r\n    answers: answers,\r\n    description: questionDesription,\r\n    explanation: questionExplanation,\r\n    type: questionType,\r\n  };\r\n\r\n  return savedQuestion;\r\n}\r\n\r\nfunction prepare_answers() {\r\n  let answers = [];\r\n  let answers_div = document.querySelector(\".all_answers_for_question_div\");\r\n\r\n  for (let i = 0; i < answers_div.children.length; i++) {\r\n    let answertext = answers_div.children[i]\r\n        .querySelector(\".answer_input\")\r\n        .value.trim();\r\n\r\n    let iscorrect =\r\n        answers_div.children[i].querySelector(\".answer_checkbox\").checked;\r\n    iscorrect = iscorrect ? 1 : 0;\r\n\r\n      answers.push({\r\n        description: answertext,\r\n        correct: iscorrect,\r\n        explanation: \"\",\r\n      });\r\n  }\r\n  return answers;\r\n}\r\n\r\n"],"names":["take_quiz_url","async","quizid","lecturerid","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","savedQuestion","question_input_title","question_indput_description","question_indput_explanation","questionTitle","value","trim","questionDesription","questionExplanation","questionType","checked","answers","answers_div","i","children","length","answertext","iscorrect","push","description","correct","explanation","prepare_answers","id","title","type","prepare_question","update_event_listeners","questions","remove","handle_question_submission","add_save_question_button_listener","catch","error","render_create_question_menu_popup"],"mappings":"2aAiBIA,cAAgB,iBAWAC,MAAOC,OAAQC,WAAYC,OAC7CJ,cAAgBI,IACUC,SAASC,eAAe,wBAC9BC,iBAAiB,SAAS,eAeLL,OAAQC,YAE7CE,SAASG,cAAc,kCACfC,iBAAiB,oCAGxBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEHC,mBAAmB,kBAAmBF,KAAMC,0EAiBnBX,OAAQC,YACtBE,SAASG,cAAc,gBAC7BD,iBAAiB,SAAS,eAKbL,OAAQC,gBACtCY,6BAqBAC,qBAAuBX,SAASC,eAAe,qBAC/CW,4BAA8BZ,SAASC,eACzC,2BAEEY,4BAA8Bb,SAASC,eACzC,2BAEEa,cAAgBH,qBAAqBI,MAAMC,OAC3CC,mBAAqBL,4BAA4BG,MAAMC,OACvDE,oBAAsBL,4BAA4BE,MAAMC,OAExDG,aAAenB,SAASC,eAAe,6BAA6BmB,QAAU,EAAI,EAElFC,uBAgBAA,QAAU,GACVC,YAActB,SAASG,cAAc,qCAEpC,IAAIoB,EAAI,EAAGA,EAAID,YAAYE,SAASC,OAAQF,IAAK,KAChDG,WAAaJ,YAAYE,SAASD,GACjCpB,cAAc,iBACdY,MAAMC,OAEPW,UACAL,YAAYE,SAASD,GAAGpB,cAAc,oBAAoBiB,QAC9DO,UAAYA,UAAY,EAAI,EAE1BN,QAAQO,KAAK,CACXC,YAAaH,WACbI,QAASH,UACTI,YAAa,YAGZV,QAlCOW,SAGM,CAClBC,GAAI,EACJC,MAAOpB,cACPO,QAASA,QACTQ,YAAaZ,mBACbc,YAAab,oBACbiB,KAAMhB,cA3CYiB,QAEhB,6CAAoB1B,cAAcW,oBAIlCgB,uBAAyB,oDACCxC,OAAQC,+DACND,OAAQC,2CAG1BY,cAAeZ,WAAYD,QAAQQ,MAAMiC,oEACvBA,UAAWD,4EACf1C,eAAe,MAG3BK,SAASG,cAAc,aAC7BoC,SAtBRC,CAA2B3C,OAAQC,eAlB/B2C,CAAkC5C,OAAQC,sEACV,aAIjC4C,OAAOC,QAAU,2BAAiBA,SA7BrCC,CAAkC/C,OAAQC"}