{"version":3,"file":"create_question.min.js","sources":["../src/create_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { save_question } from \"./repository\";\nimport { add_delete_question_listeners } from \"./delete_question\";\nimport { add_edit_question_listeners } from \"./edit_question\";\nimport {\n  rerender_take_quiz_button,\n  add_answer_button_event_listener,\n  add_discard_question_button_listener,\n} from \"./helper\";\n\nlet isEditing = false;\nlet editingIndex = 0;\nlet answer_count = 0;\nlet IDs = 0;\nlet take_quiz_url = \"\";\n\n/**\n * Adds an event listener to the \"Add Question\" button.\n * When the button is clicked, it renders the create question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async (quizid, lecturerid, url) => {\n  take_quiz_url = url; //Set url to quiz attempt page to global variable\n  let add_question_button = document.getElementById(\"id_buttonaddquestion\");\n  add_question_button.addEventListener(\"click\", () => {\n    render_create_question_menu_popup(quizid, lecturerid);\n  });\n};\n\n/**\n * Renders the create question menu popup for a live quiz.\n *\n * This function loads and renders the question menu popup template, appends it to the main container,\n * Sets up event listeners for adding answers, saving the question, and discarding the question.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {void}\n */\nfunction render_create_question_menu_popup(quizid, lecturerid) {\n  // This will call the function to load and render our template.\n  Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here we have compiled template.\n      Templates.appendNodeContents(\".main-container\", html, js);\n      add_answer_button_event_listener();\n      add_save_question_button_listener(quizid, lecturerid);\n      add_discard_question_button_listener();\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\n/**\n * Adds an event listener to the save question button\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_save_question_button_listener(quizid, lecturerid) {\n  let save_question_button = document.querySelector(\".save_button\");\n  save_question_button.addEventListener(\"click\", () => {\n    handle_question_submission(quizid, lecturerid);\n  });\n}\n\nfunction handle_question_submission(quizid, lecturerid) {\n  let savedQuestion = prepare_question(); //Prepare the question object to be sent to DB\n\n  save_question(savedQuestion, lecturerid, quizid).then((questions) => {\n    const contextsavedquestions = {\n      questions: questions,\n    };\n    \n    //Remove the saved questions list and take quiz button\n    let questions_list = document.querySelector(\"#saved_questions_list\");\n    questions_list.remove();\n\n    Templates.renderForPromise(\n      \"mod_livequiz/saved_questions_list\",\n      contextsavedquestions\n    )\n      // It returns a promise that needs to be resoved.\n      .then(({ html, js }) => {\n        // Here we have compiled template.\n        Templates.appendNodeContents(\"#saved-questions-container\", html, js);\n        add_delete_question_listeners(quizid, lecturerid);\n        add_edit_question_listeners(quizid, lecturerid);\n      })\n\n      // Deal with this exception (Using core/notify exception function is recommended).\n      .catch((error) => displayException(error));\n    rerender_take_quiz_button(take_quiz_url, true);\n  });\n\n  let modal_div = document.querySelector(\".Modal_div\");\n  modal_div.remove();\n}\n\nfunction prepare_question() {\n  let question_input_title = document.getElementById(\"question_title_id\");\n  let question_indput_description = document.getElementById(\n    \"question_description_id\"\n  );\n  let question_indput_explanation = document.getElementById(\n    \"question_explanation_id\"\n  );\n  let questionTitle = question_input_title.value.trim();\n  let questionDesription = question_indput_description.value.trim();\n  let questionExplanation = question_indput_explanation.value.trim();\n\n  if (!questionDesription) {\n    alert(\"Please enter a question description.\");\n    return;\n  }\n  if (!questionTitle) {\n    questionTitle = \"Question\";\n  }\n\n  let answers = prepare_answers();\n\n  let savedQuestion = {\n    id: 0,\n    title: questionTitle,\n    answers: answers,\n    description: questionDesription,\n    explanation: questionExplanation,\n  };\n\n  return savedQuestion;\n}\n\nfunction prepare_answers() {\n  let answers = [];\n  let answers_div = document.querySelector(\".all_answers_for_question_div\");\n\n  for (let i = 0; i < answers_div.children.length; i++) {\n    let answertext = answers_div.children[i]\n      .querySelector(\".answer_input\")\n      .value.trim();\n\n    let iscorrect =\n      answers_div.children[i].querySelector(\".answer_checkbox\").checked;\n    iscorrect ? (iscorrect = 1) : (iscorrect = 0);\n\n    answers.push({\n      description: answertext,\n      correct: iscorrect,\n      explanation: \"\",\n    });\n  }\n  return answers;\n}\n"],"names":["take_quiz_url","async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","querySelector","savedQuestion","question_input_title","question_indput_description","question_indput_explanation","questionTitle","value","trim","questionDesription","questionExplanation","alert","answers","answers_div","i","children","length","answertext","iscorrect","checked","push","description","correct","explanation","prepare_answers","id","title","prepare_question","questions","contextsavedquestions","remove","_ref2","catch","error","handle_question_submission","add_save_question_button_listener","render_create_question_menu_popup"],"mappings":"+YAeIA,cAAgB,iBAWAC,MAAOC,OAAQC,WAAYC,OAC7CJ,cAAgBI,IACUC,SAASC,eAAe,wBAC9BC,iBAAiB,SAAS,eAeLL,OAAQC,+BAEvCK,iBAAiB,oCAGxBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEHC,mBAAmB,kBAAmBF,KAAMC,4DAgBjBV,OAAQC,YACtBE,SAASS,cAAc,gBAC7BP,iBAAiB,SAAS,eAKbL,OAAQC,gBACtCY,6BAiCAC,qBAAuBX,SAASC,eAAe,qBAC/CW,4BAA8BZ,SAASC,eACzC,2BAEEY,4BAA8Bb,SAASC,eACzC,2BAEEa,cAAgBH,qBAAqBI,MAAMC,OAC3CC,mBAAqBL,4BAA4BG,MAAMC,OACvDE,oBAAsBL,4BAA4BE,MAAMC,WAEvDC,+BACHE,MAAM,wCAGHL,gBACHA,cAAgB,gBAGdM,uBAcAA,QAAU,GACVC,YAAcrB,SAASS,cAAc,qCAEpC,IAAIa,EAAI,EAAGA,EAAID,YAAYE,SAASC,OAAQF,IAAK,KAChDG,WAAaJ,YAAYE,SAASD,GACnCb,cAAc,iBACdM,MAAMC,OAELU,UACFL,YAAYE,SAASD,GAAGb,cAAc,oBAAoBkB,QAC/CD,UAAbA,UAAyB,EAAkB,EAE3CN,QAAQQ,KAAK,CACXC,YAAaJ,WACbK,QAASJ,UACTK,YAAa,YAGVX,QAhCOY,SAEM,CAClBC,GAAI,EACJC,MAAOpB,cACPM,QAASA,QACTS,YAAaZ,mBACbc,YAAab,qBA3DKiB,iCAENzB,cAAeZ,WAAYD,QAAQO,MAAMgC,kBAC/CC,sBAAwB,CAC5BD,UAAWA,WAIQpC,SAASS,cAAc,yBAC7B6B,4BAELnC,iBACR,oCACAkC,uBAGCjC,MAAKmC,YAACjC,KAAEA,KAAFC,GAAQA,6BAEHC,mBAAmB,6BAA8BF,KAAMC,uDACnCV,OAAQC,2DACVD,OAAQC,eAIrC0C,OAAOC,QAAU,2BAAiBA,+CACX9C,eAAe,MAG3BK,SAASS,cAAc,cAC7B6B,SAlCRI,CAA2B7C,OAAQC,eAjBjC6C,CAAkC9C,OAAQC,kEAK3C0C,OAAOC,QAAU,2BAAiBA,SA5BnCG,CAAkC/C,OAAQC"}