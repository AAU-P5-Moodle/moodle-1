{"version":3,"file":"create_question.min.js","sources":["../src/create_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { save_question } from \"./repository\";\nimport {add_delete_question_listeners} from \"./delete_question\";\nimport {add_edit_question_listeners} from \"./edit_question\";\n\nlet isEditing = false;\nlet editingIndex = 0;\nlet answer_count = 0;\nlet IDs = 0;\nlet take_quiz_url = \"\";\n\nexport const init = async (quizid, lecturerid, url) => {\n  take_quiz_url = url; //Set url to quiz attempt page to global variable\n  let add_question_button = document.getElementById(\"id_buttonaddquestion\");\n  add_question_button.addEventListener(\"click\", () => {\n    render_create_question_menu_popup(quizid, lecturerid);\n  });\n};\n\nfunction render_create_question_menu_popup(quizid, lecturerid) {\n  // This will call the function to load and render our template.\n  Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here we have compiled template.\n      Templates.appendNodeContents(\".main-container\", html, js);\n      add_answer_button_event_listerner();\n      add_save_question_button_listener(quizid, lecturerid);\n      add_discard_question_button_listener();\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\nfunction add_answer_button_event_listerner() {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n}\n\nfunction append_answer_input() {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer\";\n  answer_input.id = \"answer_input_\" + (IDs + 1);\n  answer_input.setAttribute(\"required\", true);\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n  answer_checkbox.id = \"answer_checkbox_\" + (IDs + 1);\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"X\"\n  );\n  delete_answer_button.id = \"delete_answer_button_\" + (IDs + 1);\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n    answer_count--;\n  });\n\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  answer_count++;\n  IDs++;\n}\n\nfunction add_save_question_button_listener(quizid, lecturerid) {\n  let save_question_button = document.querySelector(\".save_button\");\n  save_question_button.addEventListener(\"click\", () => {\n    question_button(quizid, lecturerid);\n  });\n}\n\nfunction question_button(quizid, lecturerid) {\n  let question_input_title = document.getElementById(\"question_title_id\");\n  let question_indput_description = document.getElementById(\"question_description_id\");\n  let question_indput_explanation = document.getElementById(\"question_explanation_id\");\n  let questionTitle = question_input_title.value.trim();\n  let questionDesription = question_indput_description.value.trim();\n  let questionExplanation = question_indput_explanation.value.trim();\n\n  if (!questionDesription) {\n    alert(\"Please enter a question description.\");\n    return;\n  }\n  if(!questionTitle){\n    questionTitle = \"Question\";\n  }\n  let answers = [];\n  let answers_div = document.querySelector(\".all_answers_for_question_div\");\n  for (let i = 0; i < answers_div.children.length; i++) {\n    let answertext = answers_div.children[i]\n      .querySelector(\".answer_input\")\n      .value.trim();\n\n    let iscorrect =\n      answers_div.children[i].querySelector(\".answer_checkbox\").checked;\n    iscorrect ? (iscorrect = 1) : (iscorrect = 0);\n\n    answers.push({\n        description: answertext,\n        correct: iscorrect,\n        explanation: \"\",\n      });\n  }\n\n  let savedQuestion = {\n    id: 0,\n    title: questionTitle,\n    answers: answers,\n    description: questionDesription,\n    explanation: questionExplanation,\n  };\n\n  save_question(savedQuestion, lecturerid, quizid).then((questions) => {\n    const contextsavedquestions = {\n      questions: questions,\n    };\n\n    const contexttakequiz = {\n      url: take_quiz_url,\n      hasquestions: true,\n    };\n\n    //Remove the saved questions list and take quiz button\n    let questions_list = document.querySelector(\"#saved_questions_list\");\n    questions_list.remove();\n\n    Templates.renderForPromise(\n      \"mod_livequiz/saved_questions_list\",\n      contextsavedquestions\n    )\n      // It returns a promise that needs to be resoved.\n      .then(({ html, js }) => {\n        // Here we have compiled template.\n        Templates.appendNodeContents(\"#saved-questions-container\", html, js);\n        add_delete_question_listeners(quizid, lecturerid);\n        add_edit_question_listeners(quizid, lecturerid);\n      })\n\n      // Deal with this exception (Using core/notify exception function is recommended).\n      .catch((error) => displayException(error));\n  });\n  let modal_div = document.querySelector(\".Modal_div\");\n  modal_div.remove();\n}\n\nfunction add_discard_question_button_listener() {\n  let discard_question_button = document.querySelector(\n    \".discard_question_button\"\n  );\n  discard_question_button.addEventListener(\"click\", () => {\n    render_question_confirmation();\n  });\n}\n\nfunction render_question_confirmation() {\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\".Modal_div\", html, js);\n      question_confirmation();\n    })\n    .catch((error) => displayException(error));\n}\n\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\n    \".toast_promise_deletion_div\"\n  );\n  let cancel_question_deletion_button = document.querySelector(\n    \".cancel_question_deletion_button\"\n  );\n  let continue_question_deletion_button = document.querySelector(\n    \".continue_question_deletion_button\"\n  );\n\n  let modal_div = document.querySelector(\".Modal_div\");\n\n  continue_question_deletion_button.addEventListener(\"click\", () => {\n    isEditing = false;\n    editingIndex = null;\n    modal_div.remove();\n  });\n\n  cancel_question_deletion_button.addEventListener(\"click\", () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n"],"names":["isEditing","editingIndex","IDs","take_quiz_url","async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","querySelector","answer_container","createElement","className","answer_input","placeholder","id","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","appendChild","remove","append_answer_input","question_input_title","question_indput_description","question_indput_explanation","questionTitle","value","trim","questionDesription","questionExplanation","alert","answers","answers_div","i","children","length","answertext","iscorrect","checked","push","description","correct","explanation","savedQuestion","title","questions","contextsavedquestions","_ref2","catch","error","question_button","add_save_question_button_listener","_ref3","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","modal_div","question_confirmation","render_create_question_menu_popup"],"mappings":"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"}