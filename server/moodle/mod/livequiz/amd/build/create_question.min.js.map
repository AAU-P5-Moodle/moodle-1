{"version":3,"file":"create_question.min.js","sources":["../src/create_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {exception as displayException} from \"core/notification\";\nimport {saveQuestion} from \"./repository\";\nimport {addDeleteQuestionListeners} from \"./delete_question\";\nimport {addEditQuestionListeners} from \"./edit_question\";\nimport {\n  rerenderTakeQuizButton,\n  rerenderSavedQuestionsList,\n  addAnswerButtonEventListener,\n  addDiscardQuestionButtonListener,\n} from \"./edit_question_helper\";\n\nlet isEditing = false;\nlet editingIndex = 0;\nlet answerCount = 0;\nlet IDs = 0;\nlet takeQuizUrl = \"\";\n\n/**\n * Adds an event listener to the \"Add Question\" button.\n * When the button is clicked, it renders the create question menu popup.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizId, lecturerId, url) => {\n  takeQuizUrl = url; // Set url to quiz attempt page to global variable\n  let addQuestionButton = document.getElementById(\"id_buttonaddquestion\");\n  addQuestionButton.addEventListener(\"click\", () => {\n    renderCreateQuestionMenuPopup(quizId, lecturerId);\n  });\n};\n\n/**\n * Renders the create question menu popup for a live quiz.\n *\n * This function loads and renders the question menu popup template, appends it to the main container,\n * Sets up event listeners for adding answers, saving the question, and discarding the question.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @returns {void}\n */\nfunction renderCreateQuestionMenuPopup(quizId, lecturerId) {\n  // This will call the function to load and render our template.\n  if (!document.querySelector('.Modal_div')) {\n    Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n      // It returns a promise that needs to be resolved.\n      .then(({html, js}) => {\n        // Here we have compiled template.\n        Templates.appendNodeContents(\".main-container\", html, js);\n        addAnswerButtonEventListener();\n        addSaveQuestionButtonListener(quizId, lecturerId);\n        addDiscardQuestionButtonListener();\n      })\n\n      // Deal with this exception (Using core/notify exception function is recommended).\n      .catch((error) => displayException(error));\n  }\n}\n\n/**\n * Adds an event listener to the save question button\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n */\nfunction addSaveQuestionButtonListener(quizId, lecturerId) {\n  let saveQuestionButton = document.querySelector(\".save_button\");\n  saveQuestionButton.addEventListener(\"click\", () => {\n    handleQuestionSubmission(quizId, lecturerId);\n  });\n}\n\n/**\n *\n * @param quizId\n * @param lecturerId\n */\nfunction handleQuestionSubmission(quizId, lecturerId) {\n  let savedQuestion = prepareQuestion(); // Prepare the question object to be sent to DB\n\n  let updateEventListeners = () => {\n    addEditQuestionListeners(quizId, lecturerId);\n    addDeleteQuestionListeners(quizId, lecturerId);\n  };\n\n  saveQuestion(savedQuestion, lecturerId, quizId).then((questions) => {\n    rerenderSavedQuestionsList(questions, updateEventListeners); // Re-render saved questions list\n    rerenderTakeQuizButton(takeQuizUrl, true); // Re-render take quiz button\n  });\n\n  let modalDiv = document.querySelector(\".Modal_div\");\n  modalDiv.remove();\n}\n\n/**\n *\n */\nfunction prepareQuestion() {\n  let questionInputTitle = document.getElementById(\"question_title_id\");\n  let questionInputDescription = document.getElementById(\n    \"question_description_id\"\n  );\n  let questionInputExplanation = document.getElementById(\n    \"question_explanation_id\"\n  );\n  let questionTitle = questionInputTitle.value.trim();\n  let questionDescription = questionInputDescription.value.trim();\n  let questionExplanation = questionInputExplanation.value.trim();\n\n  if (!questionDescription) {\n    alert(\"Please enter a question description.\");\n    return;\n  }\n  if (!questionTitle) {\n    questionTitle = \"Question\";\n  }\n\n  let answers = prepareAnswers();\n\n  let savedQuestion = {\n    id: 0,\n    title: questionTitle,\n    answers: answers,\n    description: questionDescription,\n    explanation: questionExplanation,\n  };\n\n  return savedQuestion;\n}\n\n/**\n *\n */\nfunction prepareAnswers() {\n  let answers = [];\n  let answersDiv = document.querySelector(\".all_answers_for_question_div\");\n\n  for (let i = 0; i < answersDiv.children.length; i++) {\n    let answerText = answersDiv.children[i]\n      .querySelector(\".answer_input\")\n      .value.trim();\n\n    let isCorrect =\n      answersDiv.children[i].querySelector(\".answer_checkbox\").checked;\n    isCorrect = isCorrect ? 1 : 0;\n\n    answers.push({\n      description: answerText,\n      correct: isCorrect,\n      explanation: \"\",\n    });\n  }\n  return answers;\n}\n"],"names":["takeQuizUrl","async","quizId","lecturerId","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","savedQuestion","questionInputTitle","questionInputDescription","questionInputExplanation","questionTitle","value","trim","questionDescription","questionExplanation","alert","answers","answersDiv","i","children","length","answerText","isCorrect","checked","push","description","correct","explanation","prepareAnswers","id","title","prepareQuestion","updateEventListeners","questions","remove","handleQuestionSubmission","addSaveQuestionButtonListener","catch","error","renderCreateQuestionMenuPopup"],"mappings":"2aAgBIA,YAAc,iBAWEC,MAAMC,OAAQC,WAAYC,OAC5CJ,YAAcI,IACUC,SAASC,eAAe,wBAC9BC,iBAAiB,SAAS,eAePL,OAAQC,YAExCE,SAASG,cAAc,kCAChBC,iBAAiB,oCAGxBC,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BAEFC,mBAAmB,kBAAmBF,KAAMC,sEAiBvBX,OAAQC,YACpBE,SAASG,cAAc,gBAC7BD,iBAAiB,SAAS,eAUbL,OAAQC,gBACpCY,6BAoBAC,mBAAqBX,SAASC,eAAe,qBAC7CW,yBAA2BZ,SAASC,eACtC,2BAEEY,yBAA2Bb,SAASC,eACtC,2BAEEa,cAAgBH,mBAAmBI,MAAMC,OACzCC,oBAAsBL,yBAAyBG,MAAMC,OACrDE,oBAAsBL,yBAAyBE,MAAMC,WAEpDC,gCACHE,MAAM,wCAGHL,gBACHA,cAAgB,gBAGdM,uBAiBAA,QAAU,GACVC,WAAarB,SAASG,cAAc,qCAEnC,IAAImB,EAAI,EAAGA,EAAID,WAAWE,SAASC,OAAQF,IAAK,KAC/CG,WAAaJ,WAAWE,SAASD,GAClCnB,cAAc,iBACdY,MAAMC,OAELU,UACFL,WAAWE,SAASD,GAAGnB,cAAc,oBAAoBwB,QAC3DD,UAAYA,UAAY,EAAI,EAE5BN,QAAQQ,KAAK,CACXC,YAAaJ,WACbK,QAASJ,UACTK,YAAa,YAGVX,QAnCOY,SAEM,CAClBC,GAAI,EACJC,MAAOpB,cACPM,QAASA,QACTS,YAAaZ,oBACbc,YAAab,qBA9CKiB,GAEhBC,qBAAuB,iDACAvC,OAAQC,4DACND,OAAQC,0CAGxBY,cAAeZ,WAAYD,QAAQQ,MAAMgC,iEACzBA,UAAWD,uEACfzC,aAAa,MAGvBK,SAASG,cAAc,cAC7BmC,SAvBPC,CAAyB1C,OAAQC,eAlB7B0C,CAA8B3C,OAAQC,4EAKvC2C,OAAOC,QAAU,2BAAiBA,SA7BrCC,CAA8B9C,OAAQC"}