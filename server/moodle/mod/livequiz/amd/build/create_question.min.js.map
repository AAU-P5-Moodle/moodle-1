{"version":3,"file":"create_question.min.js","sources":["../src/create_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {saveQuestion} from \"./repository\";\nimport {addDeleteQuestionListeners} from \"./delete_question\";\nimport {addEditQuestionListeners} from \"./edit_question\";\nimport {\n    addAnswerButtonEventListener,\n    addCancelEditButtonListener,\n    rerenderSavedQuestionsList,\n    rerenderTakeQuizButton,\n    validateSubmission,\n    getQuestionData,\n    prepareAnswers,\n} from \"./helper\";\n\nlet takeQuizUrl = \"\";\n\n/**\n * Adds an event listener to the \"Add Question\" button.\n * When the button is clicked, it renders the create question menu popup.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizId, lecturerId, url) => {\n    takeQuizUrl = url; // Set url to quiz attempt page to global variable.\n    let addQuestionButton = document.getElementById(\"add_question_button\");\n    addQuestionButton.addEventListener(\"click\", () => {\n        renderCreateQuestionMenuPopup(quizId, lecturerId);\n    });\n};\n\n/**\n * Renders the create question menu popup for a live quiz.\n *\n * This function loads and renders the question menu popup template, appends it to the main container,\n * Sets up event listeners for adding answers, saving the question, and discarding the question.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @returns {void}\n */\nfunction renderCreateQuestionMenuPopup(quizId, lecturerId) {\n    // This will call the function to load and render our template.\n    if (!document.querySelector('.Modal_div')) {\n        Templates.renderForPromise(\"mod_livequiz/question_menu_popup\", {}, \"boost\")\n\n      // It returns a promise that needs to be resolved.\n        .then(({html, js}) => {\n          // Here we have compiled template.\n            Templates.appendNodeContents(\".main_container\", html, js);\n            addAnswerButtonEventListener();\n            addSaveQuestionButtonListener(quizId, lecturerId);\n            addCancelEditButtonListener(\"create\");\n        })\n        .catch((error) => alert(error));\n    }\n}\n\n/**\n * Adds an event listener to the save question button\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @return {void}\n */\nfunction addSaveQuestionButtonListener(quizId, lecturerId) {\n    let saveQuestionButton = document.querySelector(\".save_button\");\n    saveQuestionButton.addEventListener(\"click\", () => {\n        handleQuestionSubmission(quizId, lecturerId);\n    });\n}\n\n/**\n * Event handler for when a question is saved.\n * @param {int} quizId\n * @param {int} lecturerId\n * @returns {void}\n */\nfunction handleQuestionSubmission(quizId, lecturerId) {\n    let savedQuestion = prepareQuestion(); // Prepare the question object to be sent to DB.\n\n    if (!validateSubmission(savedQuestion.answers)) {\n        return;\n    }\n\n    let updateEventListeners = () => {\n        addEditQuestionListeners(quizId, lecturerId);\n        addDeleteQuestionListeners(quizId, lecturerId);\n    };\n\n    saveQuestion(savedQuestion, lecturerId, quizId).then((questions) => {\n        rerenderSavedQuestionsList(questions, updateEventListeners); // Re-render saved questions list.\n        rerenderTakeQuizButton(takeQuizUrl, true); // Re-render take quiz button.\n    })\n    .catch((error) => window.console.log(error));\n\n    let modalDiv = document.querySelector(\".backdrop\");\n    modalDiv.remove();\n}\n\n/**\n * Gets the data for a question inputted in the UI. Used when creating or editing a question.\n *\n * @returns {{answers: Array, description: *, id: number, title: *, explanation: *, type: number}}\n */\nfunction prepareQuestion() {\n    let questionData = getQuestionData();\n\n    return {\n        id: 0,\n        title: questionData.title,\n        answers: prepareAnswers(),\n        description: questionData.description,\n        explanation: questionData.explanation,\n        type: questionData.type,\n    };\n}\n"],"names":["takeQuizUrl","async","quizId","lecturerId","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","savedQuestion","questionData","id","title","answers","description","explanation","type","prepareQuestion","updateEventListeners","questions","catch","error","window","console","log","remove","handleQuestionSubmission","addSaveQuestionButtonListener","alert","renderCreateQuestionMenuPopup"],"mappings":"6WAcIA,YAAc,iBAWEC,MAAMC,OAAQC,WAAYC,OAC1CJ,YAAcI,IACUC,SAASC,eAAe,uBAC9BC,iBAAiB,SAAS,eAeTL,OAAQC,YAEtCE,SAASG,cAAc,kCACdC,iBAAiB,mCAAoC,GAAI,SAGlEC,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BAEAC,mBAAmB,kBAAmBF,KAAMC,wDAgB3BX,OAAQC,YAClBE,SAASG,cAAc,gBAC7BD,iBAAiB,SAAS,eAWfL,OAAQC,gBAClCY,6BA2BAC,cAAe,mCAEZ,CACHC,GAAI,EACJC,MAAOF,aAAaE,MACpBC,SAAS,4BACTC,YAAaJ,aAAaI,YAC1BC,YAAaL,aAAaK,YAC1BC,KAAMN,aAAaM,MAnCHC,QAEf,8BAAmBR,cAAcI,oBAIlCK,qBAAuB,iDACEtB,OAAQC,4DACND,OAAQC,0CAG1BY,cAAeZ,WAAYD,QAAQQ,MAAMe,mDACvBA,UAAWD,yDACfxB,aAAa,MAEvC0B,OAAOC,OAAUC,OAAOC,QAAQC,IAAIH,SAEtBtB,SAASG,cAAc,aAC7BuB,SA7BLC,CAAyB9B,OAAQC,eAjB7B8B,CAA8B/B,OAAQC,oDACV,aAE/BuB,OAAOC,OAAUO,MAAMP,SA3BxBQ,CAA8BjC,OAAQC"}