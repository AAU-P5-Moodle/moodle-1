{"version":3,"file":"helper.min.js","sources":["../src/helper.js"],"sourcesContent":["import Templates from \"core/templates\";\r\n\r\nlet IDs = 0;\r\n\r\n/**\r\n * Adds an event listener to the \"Add Answer\" button.\r\n * When the button is clicked, it appends a new answer input field.\r\n *\r\n * @returns {void}\r\n */\r\nexport const addAnswerButtonEventListener = () => {\r\n  // Adding event listener to add answer button.\r\n    let answerButton = document.querySelector(\".add_new_answer_to_question\");\r\n    answerButton.addEventListener(\"click\", () => {\r\n        appendAnswerInput();\r\n    });\r\n};\r\n\r\n/**\r\n * This function creates a new answer container with an incremented ID and appends it to the\r\n * element with the class \"all_answers_for_question_div\".\r\n *\r\n * @returns {void}\r\n */\r\nexport function appendAnswerInput() {\r\n    let answerContainer = createAnswerContainer(IDs + 1);\r\n    let parentElement = document.querySelector(\".all_answers_for_question_div\");\r\n    parentElement.appendChild(answerContainer);\r\n    IDs++;\r\n}\r\n\r\n/**\r\n * Creates a new answer container element.\r\n *\r\n * @param {int} id - The unique identifier for the answer container.\r\n * @returns {HTMLDivElement} The created answer container element.\r\n */\r\nexport function createAnswerContainer(id) {\r\n    let answerContainer = document.createElement(\"div\");\r\n    answerContainer.className = \"container_for_new_answer\";\r\n\r\n    let answerInput = document.createElement(\"input\");\r\n    answerInput.className = \"answer_input\";\r\n    answerInput.placeholder = \"Enter answer\";\r\n    answerInput.id = \"answer_input_\" + id;\r\n    answerInput.setAttribute(\"required\", true);\r\n\r\n    let answerCheckbox = document.createElement(\"input\");\r\n    answerCheckbox.setAttribute(\"type\", \"checkbox\");\r\n    answerCheckbox.className = \"answer_checkbox\";\r\n    answerCheckbox.id = \"answer_checkbox_\" + id;\r\n\r\n    let deleteAnswerButton = createElement(\r\n        \"button\",\r\n        \"delete_answer_button\",\r\n        \"X\"\r\n    );\r\n    deleteAnswerButton.id = \"delete_answer_button_\" + id;\r\n\r\n    answerContainer.appendChild(answerCheckbox);\r\n    answerContainer.appendChild(answerInput);\r\n    answerContainer.appendChild(deleteAnswerButton);\r\n\r\n    deleteAnswerButton.addEventListener(\"click\", () => {\r\n        answerContainer.remove();\r\n    });\r\n    return answerContainer;\r\n}\r\n\r\n/**\r\n * Creates a new HTML element with the specified type, class, and content.\r\n *\r\n * @param {string} type - The type of the HTML element to create (e.g., 'div', 'span').\r\n * @param {string} className - The class name to assign to the created element.\r\n * @param {string} content - The text content to set for the created element.\r\n * @returns {HTMLElement} The newly created HTML element.\r\n */\r\nfunction createElement(type, className, content) {\r\n    let elementName = document.createElement(type);\r\n    elementName.className = className;\r\n    elementName.textContent = content;\r\n    return elementName;\r\n}\r\n\r\n/**\r\n * Rerenders the saved questions list.\r\n *\r\n * This function removes the existing saved questions list from the DOM,\r\n * Renders the \"mod_livequiz/saved_questions_list\" template with the provided questions\r\n * After re-rendering, it calls the provided callback function, if any.\r\n *\r\n * @param {Array} questions - An array of question objects to be rendered.\r\n * @param {Function} [callback] - An optional callback function to be executed after the list is re-rendered.\r\n * @returns {void}\r\n */\r\nexport function rerenderSavedQuestionsList(questions, callback) {\r\n    // The template needs to know the questions to render.\r\n    const contextSavedQuestions = {\r\n        questions: questions,\r\n    };\r\n\r\n    // Remove the saved questions list.\r\n    let questionsList = document.querySelector(\"#saved_questions_list\");\r\n    questionsList.remove();\r\n\r\n    // Re-render saved questions list.\r\n    Templates.renderForPromise(\r\n        \"mod_livequiz/saved_questions_list\",\r\n        contextSavedQuestions,\r\n        \"boost\"\r\n    )\r\n      .then(({html, js}) => {\r\n            Templates.appendNodeContents(\"#saved_questions_container\", html, js);\r\n\r\n            // Call the functions in callback, this allows for custom functions to be called after the rerendering.\r\n            if (typeof callback === \"function\") {\r\n                callback();\r\n            }\r\n        })\r\n        .catch((error) => window.console.log(error));\r\n}\r\n\r\n/**\r\n * Renders the \"mod_livequiz/take_quiz_button\" template based on whether there are questions in the quiz.\r\n *\r\n * @param {string} url - The URL for the \"Take Quiz\" button to redirect to.\r\n * @param {boolean} hasQuestions - Indicates if the quiz has questions.\r\n * @param {function} [callback] - Optional callback function to execute after re-rendering.\r\n * @returns {void}\r\n */\r\nexport function rerenderTakeQuizButton(url, hasQuestions, callback) {\r\n  // The template needs to know if there are questions in the quiz.\r\n  // If there are questions -> Create a button to redirect to the quiz.\r\n  // If there are no questions -> Display a paragraph that says there are no questions.\r\n\r\n    const contextTakeQuiz = {\r\n        url: url,\r\n        hasquestions: hasQuestions,\r\n    };\r\n\r\n    if (hasQuestions) {\r\n        // Remove no question paragraph if there are questions.\r\n        let noQuestionParagraph = document.querySelector(\".no_question_text\");\r\n        if (noQuestionParagraph) {\r\n            noQuestionParagraph.remove(); // We have just added a question so remove the no question text.\r\n        } else {\r\n            let takeQuizButton = document.querySelector(\"#take_quiz_button\");\r\n            takeQuizButton.remove();\r\n        }\r\n    } else {\r\n        // Remove take quiz link if there are no questions.\r\n        let takeQuizButton = document.querySelector(\"#take_quiz_button\");\r\n        takeQuizButton.remove();\r\n    }\r\n\r\n    Templates.renderForPromise(\"mod_livequiz/take_quiz_button\", contextTakeQuiz, \"boost\")\r\n        // It returns a promise that needs to be resolved.\r\n        .then(({html, js}) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\"#page_mod_livequiz_quizcreator\", html, js);\r\n            if (typeof callback === \"function\") {\r\n                callback();\r\n            }\r\n        })\r\n        .catch((error) => window.console.log(error));\r\n}\r\n\r\n/**\r\n * Sets up the event listener for the cancel button.\r\n *\r\n * @param {string} context - The context in which the cancel button is being used.\r\n * @returns {void}\r\n */\r\nexport function addCancelEditButtonListener(context) {\r\n    let discardQuestionButton = document.querySelector(\r\n        \".cancel_question_button\"\r\n    );\r\n    let modalDiv = document.querySelector(\".backdrop\");\r\n    let stringForConfirm = \"\";\r\n\r\n    // Set the string for the confirmation box based on the context.\r\n    switch (context) {\r\n        case \"create\":\r\n            stringForConfirm = \"Are you sure you want to cancel creating the question?\";\r\n            break;\r\n        case \"edit\":\r\n            stringForConfirm = \"Are you sure you want to cancel editing the question?\";\r\n            break;\r\n        case \"import\":\r\n            stringForConfirm = \"Are you sure you want to cancel importing the question?\";\r\n            break;\r\n        default:\r\n            stringForConfirm = \"Are you sure you want to cancel the changes made?\";\r\n    }\r\n    discardQuestionButton.addEventListener(\"click\", () => {\r\n        if (confirm(stringForConfirm)) {\r\n            modalDiv.remove();\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * This validates that all inputs to create/edit question, if not all inputs are satisfied, it will return false.\r\n *\r\n * @param {Object} answers The answers of the question.\r\n * @returns {boolean} True if input fields are satisfied, false otherwise.\r\n */\r\nexport function validateSubmission(answers) {\r\n    let isValid = true; // Is the question valid.\r\n    let answersValid = true; // Are all the answers valid.\r\n    let questionTitle = document.getElementById(\"question_title_id\").value.trim();\r\n    let questionTitleTextarea = document.getElementById(\"question_title_id\");\r\n    let questionTitleAlert = document.getElementById(\"title_textarea_alert\");\r\n    let questionDescription = document.getElementById(\"question_description_id\").value.trim();\r\n    let questionDescriptionTextarea = document.getElementById(\"question_description_id\");\r\n    let questionDescriptionAlert = document.getElementById(\"question_textarea_alert\");\r\n    let atLeastOneCorrectAnswerAlert = document.getElementById(\"question_alert_one_correct\");\r\n    let answerDescriptionAlert = document.getElementById(\"question_alert_description\");\r\n    let atLeastTwoAnswersAlert = document.getElementById(\"question_alert_two_answers\");\r\n    let maxOneCorrectAnswerAlert = document.getElementById(\"question_alert_max_one_correct\");\r\n    let questionType = document.getElementById(\"question_type_checkbox_id\").checked;\r\n    let answersBox = document.getElementById(\"all_answers\");\r\n    let isValidText = document.getElementById(\"validText\");\r\n\r\n  // Function to set the border style of an element.\r\n    const setBorderStyle = (element, isValid) => {\r\n        element.style.border = isValid ? \"1px solid #ccc\" : \"1px solid red\";\r\n    };\r\n\r\n    // Checks if the question title is empty.\r\n    if (!questionTitle) {\r\n        setBorderStyle(questionTitleTextarea, !!questionTitle);\r\n        questionTitleAlert.style.display = \"block\";\r\n        isValid = false;\r\n    } else {\r\n        questionTitleAlert.style.display = \"none\";\r\n        setBorderStyle(questionTitleTextarea, true);\r\n    }\r\n\r\n    // Checks if the question description is empty.\r\n    if (!questionDescription) {\r\n        setBorderStyle(questionDescriptionTextarea, !!questionDescription);\r\n        questionDescriptionAlert.style.display = \"block\";\r\n        isValid = false;\r\n    } else {\r\n        questionDescriptionAlert.style.display = \"none\";\r\n        setBorderStyle(questionDescriptionTextarea, true);\r\n    }\r\n\r\n    // Checks if there are at least two answers.\r\n    if (answers.length < 2) {\r\n        isValid = false;\r\n        answersValid = false;\r\n        atLeastTwoAnswersAlert.style.display = \"block\";\r\n    } else {\r\n        atLeastTwoAnswersAlert.style.display = \"none\";\r\n    }\r\n\r\n  // Checks if at least one answer is correct.\r\n    if (!answers.some(answer => answer.correct === 1)) {\r\n        isValid = false;\r\n        answersValid = false;\r\n        atLeastOneCorrectAnswerAlert.style.display = \"block\";\r\n    } else {\r\n        atLeastOneCorrectAnswerAlert.style.display = \"none\";\r\n    }\r\n\r\n    // Checks if all answers have a description.\r\n    if (answers.some(answer => !answer.description.trim())) {\r\n        isValid = false;\r\n        answersValid = false;\r\n        answerDescriptionAlert.style.display = \"block\";\r\n    } else {\r\n        answerDescriptionAlert.style.display = \"none\";\r\n    }\r\n\r\n  // Checks if multiple correct answers have been set, when not allowed to.\r\n    if (questionType) {\r\n        let checkedAnswers = 0;\r\n        answers.forEach(answer => {\r\n            checkedAnswers += answer.correct;\r\n        });\r\n        if (checkedAnswers > 1) {\r\n            isValid = false;\r\n            answersValid = false;\r\n            maxOneCorrectAnswerAlert.style.display = \"block\";\r\n        } else {\r\n            maxOneCorrectAnswerAlert.style.display = \"none\";\r\n        }\r\n    } else {\r\n          maxOneCorrectAnswerAlert.style.display = \"none\";\r\n    }\r\n\r\n    if (!answersValid) { // If not all answers are valid show the box with warnings.\r\n        answersBox.style.display = \"block\";\r\n    } else {\r\n        answersBox.style.display = \"none\";\r\n    }\r\n\r\n    if (!isValid) { // If the question is not valid show warning.\r\n        isValidText.style.display = \"block\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Gets question data inputted in the UI. Used when creating or editing a question.\r\n *\r\n * @returns {{description: *, title: *, explanation: *, type: (number)}}\r\n */\r\nexport function getQuestionData() {\r\n    let questionTitle = document.getElementById(\"question_title_id\").value.trim();\r\n    let questionDescription = document.getElementById(\"question_description_id\").value.trim();\r\n    let questionExplanation = document.getElementById(\"question_explanation_id\").value.trim();\r\n    let questionType = document.getElementById(\"question_type_checkbox_id\").checked ? 1 : 0;\r\n\r\n    return {\r\n        title: questionTitle,\r\n        description: questionDescription,\r\n        explanation: questionExplanation,\r\n        type: questionType\r\n    };\r\n}\r\n\r\n/**\r\n * Gets the data for each answer inputted in the UI. Used when creating or editing a question.\r\n *\r\n * @returns {array}\r\n */\r\nexport function prepareAnswers() {\r\n    let answers = [];\r\n    let answersDiv = document.querySelector(\".all_answers_for_question_div\");\r\n\r\n    for (let i = 0; i < answersDiv.children.length; i++) {\r\n        let answerText = answersDiv.children[i]\r\n        .querySelector(\".answer_input\")\r\n        .value.trim();\r\n\r\n        let isCorrect =\r\n        answersDiv.children[i].querySelector(\".answer_checkbox\").checked;\r\n        isCorrect = isCorrect ? 1 : 0;\r\n\r\n        answers.push({\r\n            description: answerText,\r\n            correct: isCorrect,\r\n            explanation: \"\",\r\n        });\r\n    }\r\n    return answers;\r\n}\r\n"],"names":["context","discardQuestionButton","document","querySelector","modalDiv","stringForConfirm","addEventListener","confirm","remove","questionTitle","getElementById","value","trim","questionDescription","questionExplanation","questionType","checked","title","description","explanation","type","answers","answersDiv","i","children","length","answerText","isCorrect","push","correct","questions","callback","contextSavedQuestions","renderForPromise","then","_ref","html","js","appendNodeContents","catch","error","window","console","log","url","hasQuestions","contextTakeQuiz","hasquestions","noQuestionParagraph","_ref2","isValid","answersValid","questionTitleTextarea","questionTitleAlert","questionDescriptionTextarea","questionDescriptionAlert","atLeastOneCorrectAnswerAlert","answerDescriptionAlert","atLeastTwoAnswersAlert","maxOneCorrectAnswerAlert","answersBox","isValidText","setBorderStyle","element","style","border","display","some","answer","checkedAnswers","forEach","IDs","appendAnswerInput","answerContainer","createAnswerContainer","appendChild","id","createElement","className","answerInput","placeholder","setAttribute","answerCheckbox","deleteAnswerButton","content","elementName","textContent"],"mappings":"oPA6K4CA,aACpCC,sBAAwBC,SAASC,cACjC,2BAEAC,SAAWF,SAASC,cAAc,aAClCE,iBAAmB,UAGfL,aACC,SACDK,iBAAmB,mEAElB,OACDA,iBAAmB,kEAElB,SACDA,iBAAmB,wEAGnBA,iBAAmB,oDAE3BJ,sBAAsBK,iBAAiB,SAAS,KACxCC,QAAQF,mBACRD,SAASI,uJAqHbC,cAAgBP,SAASQ,eAAe,qBAAqBC,MAAMC,OACnEC,oBAAsBX,SAASQ,eAAe,2BAA2BC,MAAMC,OAC/EE,oBAAsBZ,SAASQ,eAAe,2BAA2BC,MAAMC,OAC/EG,aAAeb,SAASQ,eAAe,6BAA6BM,QAAU,EAAI,QAE/E,CACHC,MAAOR,cACPS,YAAaL,oBACbM,YAAaL,oBACbM,KAAML,sDAUNM,QAAU,GACVC,WAAapB,SAASC,cAAc,qCAEnC,IAAIoB,EAAI,EAAGA,EAAID,WAAWE,SAASC,OAAQF,IAAK,KAC7CG,WAAaJ,WAAWE,SAASD,GACpCpB,cAAc,iBACdQ,MAAMC,OAEHe,UACJL,WAAWE,SAASD,GAAGpB,cAAc,oBAAoBa,QACzDW,UAAYA,UAAY,EAAI,EAE5BN,QAAQO,KAAK,CACTV,YAAaQ,WACbG,QAASF,UACTR,YAAa,YAGdE,sDA/PgCS,UAAWC,gBAE5CC,sBAAwB,CAC1BF,UAAWA,WAIK5B,SAASC,cAAc,yBAC7BK,4BAGJyB,iBACN,oCACAD,sBACA,SAEDE,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BACEC,mBAAmB,6BAA8BF,KAAMC,IAGzC,mBAAbN,UACPA,cAGPQ,OAAOC,OAAUC,OAAOC,QAAQC,IAAIH,mDAWNI,IAAKC,aAAcd,gBAKhDe,gBAAkB,CACpBF,IAAKA,IACLG,aAAcF,iBAGdA,aAAc,KAEVG,oBAAsB9C,SAASC,cAAc,wBAC7C6C,oBACAA,oBAAoBxC,aACjB,CACkBN,SAASC,cAAc,qBAC7BK,cAEhB,CAEkBN,SAASC,cAAc,qBAC7BK,4BAGTyB,iBAAiB,gCAAiCa,gBAAiB,SAExEZ,MAAKe,YAACb,KAACA,KAADC,GAAOA,6BAEAC,mBAAmB,iCAAkCF,KAAMC,IAC7C,mBAAbN,UACPA,cAGPQ,OAAOC,OAAUC,OAAOC,QAAQC,IAAIH,+CA4CVnB,aAC3B6B,SAAU,EACVC,cAAe,EACf1C,cAAgBP,SAASQ,eAAe,qBAAqBC,MAAMC,OACnEwC,sBAAwBlD,SAASQ,eAAe,qBAChD2C,mBAAqBnD,SAASQ,eAAe,wBAC7CG,oBAAsBX,SAASQ,eAAe,2BAA2BC,MAAMC,OAC/E0C,4BAA8BpD,SAASQ,eAAe,2BACtD6C,yBAA2BrD,SAASQ,eAAe,2BACnD8C,6BAA+BtD,SAASQ,eAAe,8BACvD+C,uBAAyBvD,SAASQ,eAAe,8BACjDgD,uBAAyBxD,SAASQ,eAAe,8BACjDiD,yBAA2BzD,SAASQ,eAAe,kCACnDK,aAAeb,SAASQ,eAAe,6BAA6BM,QACpE4C,WAAa1D,SAASQ,eAAe,eACrCmD,YAAc3D,SAASQ,eAAe,mBAGpCoD,eAAiB,CAACC,QAASb,WAC7Ba,QAAQC,MAAMC,OAASf,QAAU,iBAAmB,iBAInDzC,eAKD4C,mBAAmBW,MAAME,QAAU,OACnCJ,eAAeV,uBAAuB,KALtCU,eAAeV,wBAAyB3C,eACxC4C,mBAAmBW,MAAME,QAAU,QACnChB,SAAU,GAOTrC,qBAKD0C,yBAAyBS,MAAME,QAAU,OACzCJ,eAAeR,6BAA6B,KAL5CQ,eAAeR,8BAA+BzC,qBAC9C0C,yBAAyBS,MAAME,QAAU,QACzChB,SAAU,GAOV7B,QAAQI,OAAS,GACjByB,SAAU,EACVC,cAAe,EACfO,uBAAuBM,MAAME,QAAU,SAEvCR,uBAAuBM,MAAME,QAAU,OAItC7C,QAAQ8C,MAAKC,QAA6B,IAAnBA,OAAOvC,UAK/B2B,6BAA6BQ,MAAME,QAAU,QAJ7ChB,SAAU,EACVC,cAAe,EACfK,6BAA6BQ,MAAME,QAAU,SAM7C7C,QAAQ8C,MAAKC,SAAWA,OAAOlD,YAAYN,UAC3CsC,SAAU,EACVC,cAAe,EACfM,uBAAuBO,MAAME,QAAU,SAEvCT,uBAAuBO,MAAME,QAAU,UAIvCnD,aAAc,KACVsD,eAAiB,EACrBhD,QAAQiD,SAAQF,SACZC,gBAAkBD,OAAOvC,WAEzBwC,eAAiB,GACjBnB,SAAU,EACVC,cAAe,EACfQ,yBAAyBK,MAAME,QAAU,SAEzCP,yBAAyBK,MAAME,QAAU,YAG3CP,yBAAyBK,MAAME,QAAU,OAM3CN,WAAWI,MAAME,QAHhBf,aAG0B,OAFA,YAK1BD,eACDW,YAAYG,MAAME,QAAU,SACrB,SAEJ,qEA9SPK,IAAM,WAsBMC,wBACRC,gBAAkBC,sBAAsBH,IAAM,GAC9BrE,SAASC,cAAc,iCAC7BwE,YAAYF,iBAC1BF,eASYG,sBAAsBE,QAC9BH,gBAAkBvE,SAAS2E,cAAc,OAC7CJ,gBAAgBK,UAAY,+BAExBC,YAAc7E,SAAS2E,cAAc,SACzCE,YAAYD,UAAY,eACxBC,YAAYC,YAAc,eAC1BD,YAAYH,GAAK,gBAAkBA,GACnCG,YAAYE,aAAa,YAAY,OAEjCC,eAAiBhF,SAAS2E,cAAc,SAC5CK,eAAeD,aAAa,OAAQ,YACpCC,eAAeJ,UAAY,kBAC3BI,eAAeN,GAAK,mBAAqBA,OAErCO,4BAyBe/D,KAAM0D,UAAWM,aAChCC,YAAcnF,SAAS2E,cAAczD,aACzCiE,YAAYP,UAAYA,UACxBO,YAAYC,YAAcF,QACnBC,YA7BkBR,CACrB,SACA,uBACA,YAEJM,mBAAmBP,GAAK,wBAA0BA,GAElDH,gBAAgBE,YAAYO,gBAC5BT,gBAAgBE,YAAYI,aAC5BN,gBAAgBE,YAAYQ,oBAE5BA,mBAAmB7E,iBAAiB,SAAS,KACzCmE,gBAAgBjE,YAEbiE,sDAxDiC,KAErBvE,SAASC,cAAc,+BAC7BG,iBAAiB,SAAS,KACnCkE"}