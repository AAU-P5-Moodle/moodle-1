{"version":3,"file":"helper.min.js","sources":["../src/helper.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\n\nlet IDs = 0;\nlet isEditing = false;\nlet editingIndex = 0;\n\n/**\n * Adds an event listener to the \"Add Answer\" button.\n * When the button is clicked, it appends a new answer input field.\n */\nexport const add_answer_button_event_listener = () => {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n};\n\n/**\n * Appends a new answer input container to the container holding all answers\n * \n * This function creates a new answer container with an incremented ID and appends it to the \n * element with the class \"all_answers_for_question_div\".\n */\nexport function append_answer_input() {\n  let answer_container = create_answer_container(IDs + 1);\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  IDs++;\n}\n\n/**\n * Creates a new answer container element.\n * THIS SHOULD PROBABLY BE MADE INTO MUSTACHE TEMPLATE INSTEAD OF A FUNCTION\n *\n * @param {string} id - The unique identifier for the answer container.\n * @returns {HTMLDivElement} The created answer container element.\n */\nexport function create_answer_container(id) {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer\";\n  answer_input.id = \"answer_input_\" + id;\n  answer_input.setAttribute(\"required\", true);\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n  answer_checkbox.id = \"answer_checkbox_\" + id;\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"X\"\n  );\n  delete_answer_button.id = \"delete_answer_button_\" + id;\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n  });\n  return answer_container;\n}\n\n/**\n * Adds an event listener to the discard question button.\n * When the button is clicked, it triggers the render_question_confirmation function.\n */\nexport const add_discard_question_button_listener = () => {\n  let discard_question_button = document.querySelector(\n    \".discard_question_button\"\n  );\n  discard_question_button.addEventListener(\"click\", () => {\n    render_question_confirmation();\n  });\n};\n\n/**\n * Renders the question confirmation modal.\n *\n * Renders \"mod_livequiz/question_confirmation\" template.\n * Appends the HTML and JavaScript to the \".Modal_div\" element\n * Calls the `question_confirmation` function\n *\n * @function\n * @returns {void}\n */\nfunction render_question_confirmation() {\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\".Modal_div\", html, js);\n      question_confirmation();\n    })\n    .catch((error) => displayException(error));\n}\n\n/**\n * Handles the confirmation process for deleting a question.\n * \n * This function sets up event listeners for the yes and no buttons when discarding a question.\n * When yes is clicked, the editing menu is removed\n * When no is clicked, the confirmation pop-up is removed\n * \n * @function question_confirmation\n */\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\n    \".toast_promise_deletion_div\"\n  );\n  let cancel_question_deletion_button = document.querySelector(\n    \".cancel_question_deletion_button\"\n  );\n  let continue_question_deletion_button = document.querySelector(\n    \".continue_question_deletion_button\"\n  );\n\n  let modal_div = document.querySelector(\".Modal_div\");\n\n  continue_question_deletion_button.addEventListener(\"click\", () => {\n    isEditing = false;\n    editingIndex = null;\n    modal_div.remove();\n  });\n\n  cancel_question_deletion_button.addEventListener(\"click\", () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\n/**\n * Creates a new HTML element with the specified type, class, and content.\n *\n * @param {HTMLElement} element_name - The variable to hold the created element.\n * @param {string} type - The type of the HTML element to create (e.g., 'div', 'span').\n * @param {string} class_name - The class name to assign to the created element.\n * @param {string} content - The text content to set for the created element.\n * @returns {HTMLElement} The newly created HTML element.\n */\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n\n/**\n * Rerenders the saved questions list.\n *\n * This function removes the existing saved questions list from the DOM,\n * Renders the \"mod_livequiz/saved_questions_list\" template with the provided questions\n * After re-rendering, it calls the provided callback function, if any.\n *\n * @param {Array} questions - An array of question objects to be rendered.\n * @param {Function} [callback] - An optional callback function to be executed after the list is re-rendered.\n */\nexport function rerender_saved_questions_list(questions, callback) {\n  //The template needs to know the questions to render.\n  const contextsavedquestions = {\n    questions: questions,\n  };\n\n  //Remove the saved questions list.\n  let questions_list = document.querySelector(\"#saved_questions_list\");\n  questions_list.remove();\n\n  //Re-render saved questions list.\n  Templates.renderForPromise(\n    \"mod_livequiz/saved_questions_list\",\n    contextsavedquestions\n  )\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\"#saved-questions-container\", html, js);\n\n      //Call the functions in callback, this allows for custom functions to be called after the rerendering.\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n    .catch((error) => displayException(error));\n}\n\n/**\n * Renders the \"mod_livequiz/take_quiz_button\" template based on whether there are questions in the quiz.\n *\n * @param {string} url - The URL for the \"Take Quiz\" button to redirect to.\n * @param {boolean} hasquestions - Indicates if the quiz has questions.\n * @param {function} [callback] - Optional callback function to execute after re-rendering.\n */\n\nexport function rerender_take_quiz_button(url, hasquestions, callback) {\n  //The template needs to know if there are questions in the quiz.\n  //If there are questions -> Create a button to redirect to the quiz.\n  //If there are no questions -> Display a paragraph that says there are no questions.\n\n  const contexttakequiz = {\n    url: url,\n    hasquestions: hasquestions,\n  };\n\n  if (hasquestions) {\n    //Remove no question paragraph if there are questions.\n    let no_question_paragraph = document.querySelector(\".no-question-text\");\n    no_question_paragraph.remove(); //We have just added a question so remove the no question text\n  } else {\n    //Remove take quiz link if there are no questions\n    let take_quiz_button = document.querySelector(\"#takeQuizBtn\");\n    console.log(take_quiz_button);\n    take_quiz_button.remove();\n  }\n\n  Templates.renderForPromise(\"mod_livequiz/take_quiz_button\", contexttakequiz)\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here we have compiled template.\n      Templates.appendNodeContents(\"#page-mod-livequiz-quizcreator\", html, js);\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n"],"names":["questions","callback","contextsavedquestions","document","querySelector","remove","renderForPromise","then","_ref2","html","js","appendNodeContents","catch","error","url","hasquestions","contexttakequiz","take_quiz_button","console","log","_ref3","IDs","isEditing","editingIndex","append_answer_input","answer_container","create_answer_container","appendChild","id","createElement","className","answer_input","placeholder","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","addEventListener","_ref","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","modal_div","question_confirmation"],"mappings":"obAoK8CA,UAAWC,gBAEjDC,sBAAwB,CAC5BF,UAAWA,WAIQG,SAASC,cAAc,yBAC7BC,4BAGLC,iBACR,oCACAJ,uBAECK,MAAKC,YAACC,KAAEA,KAAFC,GAAQA,6BACHC,mBAAmB,6BAA8BF,KAAMC,IAGzC,mBAAbT,UACTA,cAGHW,OAAOC,QAAU,2BAAiBA,sDAWGC,IAAKC,aAAcd,gBAKrDe,gBAAkB,CACtBF,IAAKA,IACLC,aAAcA,iBAGZA,aAAc,CAEYZ,SAASC,cAAc,qBAC7BC,aACjB,KAEDY,iBAAmBd,SAASC,cAAc,gBAC9Cc,QAAQC,IAAIF,kBACZA,iBAAiBZ,4BAGTC,iBAAiB,gCAAiCU,iBAEzDT,MAAKa,YAACX,KAAEA,KAAFC,GAAQA,6BAEHC,mBAAmB,iCAAkCF,KAAMC,IAC7C,mBAAbT,UACTA,cAKHW,OAAOC,QAAU,2BAAiBA,4EAnOnCQ,IAAM,EACNC,WAAY,EACZC,aAAe,WAoBHC,0BACVC,iBAAmBC,wBAAwBL,IAAM,GAChClB,SAASC,cAAc,iCAC7BuB,YAAYF,kBAC3BJ,eAUcK,wBAAwBE,QAClCH,iBAAmBtB,SAAS0B,cAAc,OAC9CJ,iBAAiBK,UAAY,+BAEzBC,aAAe5B,SAAS0B,cAAc,SAC1CE,aAAaD,UAAY,eACzBC,aAAaC,YAAc,eAC3BD,aAAaH,GAAK,gBAAkBA,GACpCG,aAAaE,aAAa,YAAY,OAElCC,gBAAkB/B,SAAS0B,cAAc,SAC7CK,gBAAgBD,aAAa,OAAQ,YACrCC,gBAAgBJ,UAAY,kBAC5BI,gBAAgBN,GAAK,mBAAqBA,OAEtCO,sBA6FkBC,aA5FpB,uBA4FkCC,KA3FlC,SA2FwCC,WA1FxC,uBA0FoDC,QAzFpD,KA0FFH,aAAejC,SAAS0B,cAAcQ,OACzBP,UAAYQ,WACzBF,aAAaI,YAAcD,QACpBH,kBAJeA,aAAcC,KAAMC,WAAYC,eAvFtDJ,qBAAqBP,GAAK,wBAA0BA,GAEpDH,iBAAiBE,YAAYO,iBAC7BT,iBAAiBE,YAAYI,cAC7BN,iBAAiBE,YAAYQ,sBAE7BA,qBAAqBM,iBAAiB,SAAS,KAC7ChB,iBAAiBpB,YAEZoB,2DA1DuC,KAE1BtB,SAASC,cAAc,+BAC7BqC,iBAAiB,SAAS,KACtCjB,wEA6DgD,KACpBrB,SAASC,cACrC,4BAEsBqC,iBAAiB,SAAS,wBAgBxCnC,iBAAiB,sCAExBC,MAAKmC,WAACjC,KAAEA,KAAFC,GAAQA,4BACHC,mBAAmB,aAAcF,KAAMC,mBAgBjDiC,2BAA6BxC,SAASC,cACxC,+BAEEwC,gCAAkCzC,SAASC,cAC7C,oCAEEyC,kCAAoC1C,SAASC,cAC/C,sCAGE0C,UAAY3C,SAASC,cAAc,cAEvCyC,kCAAkCJ,iBAAiB,SAAS,KAC1DnB,WAAY,EACZC,aAAe,KACfuB,UAAUzC,YAGZuC,gCAAgCH,iBAAiB,SAAS,KACxDE,2BAA2BtC,YAlCzB0C,MAEDnC,OAAOC,QAAU,2BAAiBA"}