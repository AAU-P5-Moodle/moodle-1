{"version":3,"file":"helper.min.js","sources":["../src/helper.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { add_delete_question_listeners } from \"./delete_question\";\n\nlet IDs = 0;\nlet isEditing = false;\nlet editingIndex = 0;\n\nexport const add_answer_button_event_listener = () => {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n};\n\nfunction append_answer_input() {\n  let answer_container = create_answer_container(IDs + 1);\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  IDs++;\n}\n\nexport function create_answer_container(id) {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer\";\n  answer_input.id = \"answer_input_\" + id;\n  answer_input.setAttribute(\"required\", true);\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n  answer_checkbox.id = \"answer_checkbox_\" + id;\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"X\"\n  );\n  delete_answer_button.id = \"delete_answer_button_\" + id;\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n  });\n  return answer_container;\n}\n\nexport const add_discard_question_button_listener = () => {\n  let discard_question_button = document.querySelector(\n    \".discard_question_button\"\n  );\n  discard_question_button.addEventListener(\"click\", () => {\n    render_question_confirmation();\n  });\n};\n\nfunction render_question_confirmation() {\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\".Modal_div\", html, js);\n      question_confirmation();\n    })\n    .catch((error) => displayException(error));\n}\n\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\n    \".toast_promise_deletion_div\"\n  );\n  let cancel_question_deletion_button = document.querySelector(\n    \".cancel_question_deletion_button\"\n  );\n  let continue_question_deletion_button = document.querySelector(\n    \".continue_question_deletion_button\"\n  );\n\n  let modal_div = document.querySelector(\".Modal_div\");\n\n  continue_question_deletion_button.addEventListener(\"click\", () => {\n    isEditing = false;\n    editingIndex = null;\n    modal_div.remove();\n  });\n\n  cancel_question_deletion_button.addEventListener(\"click\", () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n\nexport function rerender_saved_questions_list(questions, callback) {\n  const contextsavedquestions = {\n    questions: questions,\n  };\n\n  //Remove the saved questions list.\n  let questions_list = document.querySelector(\"#saved_questions_list\");\n  questions_list.remove();\n\n  //Re-render saved questions list.\n  Templates.renderForPromise(\n    \"mod_livequiz/saved_questions_list\",\n    contextsavedquestions\n  )\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\"#saved-questions-container\", html, js);\n\n      //Call the functions in callback, this allows for custom functions to be called after the rerendering.\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n    .catch((error) => displayException(error));\n}\n\nexport function rerender_take_quiz_button(url, hasquestions, callback) {\n  //The template needs to know if there are questions in the quiz.\n  //If there are questions -> Create a button to redirect to the quiz.\n  //If there are no questions -> Display a paragraph that says there are no questions.\n\n  const contexttakequiz = {\n    url: url,\n    hasquestions: hasquestions,\n  };\n\n  if (hasquestions) {\n    //Remove no question paragraph if there are questions.\n    let no_question_paragraph = document.querySelector(\".no-question-text\");\n    no_question_paragraph.remove(); //We have just added a question so remove the no question text\n  } else {\n    //Remove take quiz link if there are no questions\n    let take_quiz_button = document.querySelector(\"#takeQuizBtn\");\n    console.log(take_quiz_button);\n    take_quiz_button.remove();\n  }\n\n  Templates.renderForPromise(\"mod_livequiz/take_quiz_button\", contexttakequiz)\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here we have compiled template.\n      Templates.appendNodeContents(\"#page-mod-livequiz-quizcreator\", html, js);\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n"],"names":["questions","callback","contextsavedquestions","document","querySelector","remove","renderForPromise","then","_ref2","html","js","appendNodeContents","catch","error","url","hasquestions","contexttakequiz","take_quiz_button","console","log","_ref3","IDs","isEditing","editingIndex","create_answer_container","id","answer_container","createElement","className","answer_input","placeholder","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","appendChild","addEventListener","append_answer_input","_ref","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","modal_div","question_confirmation"],"mappings":"waA0G8CA,UAAWC,gBACjDC,sBAAwB,CAC5BF,UAAWA,WAIQG,SAASC,cAAc,yBAC7BC,4BAGLC,iBACR,oCACAJ,uBAECK,MAAKC,YAACC,KAAEA,KAAFC,GAAQA,6BACHC,mBAAmB,6BAA8BF,KAAMC,IAGzC,mBAAbT,UACTA,cAGHW,OAAOC,QAAU,2BAAiBA,sDAGGC,IAAKC,aAAcd,gBAKrDe,gBAAkB,CACtBF,IAAKA,IACLC,aAAcA,iBAGZA,aAAc,CAEYZ,SAASC,cAAc,qBAC7BC,aACjB,KAEDY,iBAAmBd,SAASC,cAAc,gBAC9Cc,QAAQC,IAAIF,kBACZA,iBAAiBZ,4BAGTC,iBAAiB,gCAAiCU,iBAEzDT,MAAKa,YAACX,KAAEA,KAAFC,GAAQA,6BAEHC,mBAAmB,iCAAkCF,KAAMC,IAC7C,mBAAbT,UACTA,cAKHW,OAAOC,QAAU,2BAAiBA,4EA/JnCQ,IAAM,EACNC,WAAY,EACZC,aAAe,WAiBHC,wBAAwBC,QAClCC,iBAAmBvB,SAASwB,cAAc,OAC9CD,iBAAiBE,UAAY,+BAEzBC,aAAe1B,SAASwB,cAAc,SAC1CE,aAAaD,UAAY,eACzBC,aAAaC,YAAc,eAC3BD,aAAaJ,GAAK,gBAAkBA,GACpCI,aAAaE,aAAa,YAAY,OAElCC,gBAAkB7B,SAASwB,cAAc,SAC7CK,gBAAgBD,aAAa,OAAQ,YACrCC,gBAAgBJ,UAAY,kBAC5BI,gBAAgBP,GAAK,mBAAqBA,OAEtCQ,sBA6DkBC,aA5DpB,uBA4DkCC,KA3DlC,SA2DwCC,WA1DxC,uBA0DoDC,QAzDpD,KA0DFH,aAAe/B,SAASwB,cAAcQ,OACzBP,UAAYQ,WACzBF,aAAaI,YAAcD,QACpBH,kBAJeA,aAAcC,KAAMC,WAAYC,eAvDtDJ,qBAAqBR,GAAK,wBAA0BA,GAEpDC,iBAAiBa,YAAYP,iBAC7BN,iBAAiBa,YAAYV,cAC7BH,iBAAiBa,YAAYN,sBAE7BA,qBAAqBO,iBAAiB,SAAS,KAC7Cd,iBAAiBrB,YAEZqB,2DA7CuC,KAE1BvB,SAASC,cAAc,+BAC7BoC,iBAAiB,SAAS,qBAMpCd,iBAAmBF,wBAAwBH,IAAM,GAChClB,SAASC,cAAc,iCAC7BmC,YAAYb,kBAC3BL,MAREoB,qDA4CgD,KACpBtC,SAASC,cACrC,4BAEsBoC,iBAAiB,SAAS,wBAMxClC,iBAAiB,sCAExBC,MAAKmC,WAACjC,KAAEA,KAAFC,GAAQA,4BACHC,mBAAmB,aAAcF,KAAMC,mBAOjDiC,2BAA6BxC,SAASC,cACxC,+BAEEwC,gCAAkCzC,SAASC,cAC7C,oCAEEyC,kCAAoC1C,SAASC,cAC/C,sCAGE0C,UAAY3C,SAASC,cAAc,cAEvCyC,kCAAkCL,iBAAiB,SAAS,KAC1DlB,WAAY,EACZC,aAAe,KACfuB,UAAUzC,YAGZuC,gCAAgCJ,iBAAiB,SAAS,KACxDG,2BAA2BtC,YAzBzB0C,MAEDnC,OAAOC,QAAU,2BAAiBA"}