{"version":3,"file":"helper.min.js","sources":["../src/helper.js"],"sourcesContent":["import Templates from \"core/templates\";\n\nlet IDs = 0;\n\n/**\n * Adds an event listener to the \"Add Answer\" button.\n * When the button is clicked, it appends a new answer input field.\n *\n * @returns {void}\n */\nexport const addAnswerButtonEventListener = () => {\n  // Adding event listener to add answer button.\n    let answerButton = document.querySelector(\".add_new_answer_to_question\");\n    answerButton.addEventListener(\"click\", () => {\n        appendAnswerInput();\n    });\n};\n\n/**\n * This function creates a new answer container with an incremented ID and appends it to the\n * element with the class \"all_answers_for_question_div\".\n *\n * @returns {void}\n */\nexport function appendAnswerInput() {\n    let answerContainer = createAnswerContainer(IDs + 1);\n    let parentElement = document.querySelector(\".all_answers_for_question_div\");\n    parentElement.appendChild(answerContainer);\n    IDs++;\n}\n\n/**\n * Creates a new answer container element.\n *\n * @param {int} id - The unique identifier for the answer container.\n * @returns {HTMLDivElement} The created answer container element.\n */\nexport function createAnswerContainer(id) {\n    let answerContainer = document.createElement(\"div\");\n    answerContainer.className = \"container_for_new_answer\";\n\n    let answerInput = document.createElement(\"input\");\n    answerInput.className = \"answer_input\";\n    answerInput.placeholder = \"Enter answer\";\n    answerInput.id = \"answer_input_\" + id;\n    answerInput.setAttribute(\"required\", true);\n\n    let answerCheckbox = document.createElement(\"input\");\n    answerCheckbox.setAttribute(\"type\", \"checkbox\");\n    answerCheckbox.className = \"answer_checkbox\";\n    answerCheckbox.id = \"answer_checkbox_\" + id;\n\n    let deleteAnswerButton = createElement(\n        \"button\",\n        \"delete_answer_button\",\n        \"X\"\n    );\n    deleteAnswerButton.id = \"delete_answer_button_\" + id;\n\n    answerContainer.appendChild(answerCheckbox);\n    answerContainer.appendChild(answerInput);\n    answerContainer.appendChild(deleteAnswerButton);\n\n    deleteAnswerButton.addEventListener(\"click\", () => {\n        answerContainer.remove();\n    });\n    return answerContainer;\n}\n\n/**\n * Creates a new HTML element with the specified type, class, and content.\n *\n * @param {string} type - The type of the HTML element to create (e.g., 'div', 'span').\n * @param {string} className - The class name to assign to the created element.\n * @param {string} content - The text content to set for the created element.\n * @returns {HTMLElement} The newly created HTML element.\n */\nfunction createElement(type, className, content) {\n    let elementName = document.createElement(type);\n    elementName.className = className;\n    elementName.textContent = content;\n    return elementName;\n}\n\n/**\n * Rerenders the saved questions list.\n *\n * This function removes the existing saved questions list from the DOM,\n * Renders the \"mod_livequiz/saved_questions_list\" template with the provided questions\n * After re-rendering, it calls the provided callback function, if any.\n *\n * @param {Array} questions - An array of question objects to be rendered.\n * @param {Function} [callback] - An optional callback function to be executed after the list is re-rendered.\n * @returns {void}\n */\nexport function rerenderSavedQuestionsList(questions, callback) {\n    // The template needs to know the questions to render.\n    const contextSavedQuestions = {\n        questions: questions,\n    };\n\n    // Remove the saved questions list.\n    let questionsList = document.querySelector(\"#saved_questions_list\");\n    questionsList.remove();\n\n    // Re-render saved questions list.\n    Templates.renderForPromise(\n        \"mod_livequiz/saved_questions_list\",\n        contextSavedQuestions,\n        \"boost\"\n    )\n      .then(({html, js}) => {\n            Templates.appendNodeContents(\"#saved_questions_container\", html, js);\n\n            // Call the functions in callback, this allows for custom functions to be called after the rerendering.\n            if (typeof callback === \"function\") {\n                callback();\n            }\n        })\n        .catch((error) => window.console.log(error));\n}\n\n/**\n * Renders the \"mod_livequiz/take_quiz_button\" template based on whether there are questions in the quiz.\n *\n * @param {string} url - The URL for the \"Take Quiz\" button to redirect to.\n * @param {boolean} hasQuestions - Indicates if the quiz has questions.\n * @param {function} [callback] - Optional callback function to execute after re-rendering.\n * @returns {void}\n */\nexport function rerenderTakeQuizButton(url, hasQuestions, callback) {\n  // The template needs to know if there are questions in the quiz.\n  // If there are questions -> Create a button to redirect to the quiz.\n  // If there are no questions -> Display a paragraph that says there are no questions.\n\n    const contextTakeQuiz = {\n        url: url,\n        hasquestions: hasQuestions,\n    };\n\n    if (hasQuestions) {\n        // Remove no question paragraph if there are questions.\n        let noQuestionParagraph = document.querySelector(\".no_question_text\");\n        if (noQuestionParagraph) {\n            noQuestionParagraph.remove(); // We have just added a question so remove the no question text.\n        } else {\n            let takeQuizButton = document.querySelector(\"#take_quiz_button\");\n            takeQuizButton.remove();\n        }\n    } else {\n        // Remove take quiz link if there are no questions.\n        let takeQuizButton = document.querySelector(\"#take_quiz_button\");\n        takeQuizButton.remove();\n    }\n\n    Templates.renderForPromise(\"mod_livequiz/take_quiz_button\", contextTakeQuiz, \"boost\")\n        // It returns a promise that needs to be resolved.\n        .then(({html, js}) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\"#page_mod_livequiz_quizcreator\", html, js);\n            if (typeof callback === \"function\") {\n                callback();\n            }\n        })\n        .catch((error) => window.console.log(error));\n}\n\n/**\n * Sets up the event listener for the cancel button.\n *\n * @param {string} context - The context in which the cancel button is being used.\n * @returns {void}\n */\nexport function addCancelEditButtonListener(context) {\n    let discardQuestionButton = document.querySelector(\n        \".cancel_question_button\"\n    );\n    let modalDiv = document.querySelector(\".backdrop\");\n    let stringForConfirm = \"\";\n\n    // Set the string for the confirmation box based on the context.\n    switch (context) {\n        case \"create\":\n            stringForConfirm = \"Are you sure you want to cancel creating the question?\";\n            break;\n        case \"edit\":\n            stringForConfirm = \"Are you sure you want to cancel editing the question?\";\n            break;\n        case \"import\":\n            stringForConfirm = \"Are you sure you want to cancel importing the question?\";\n            break;\n        default:\n            stringForConfirm = \"Are you sure you want to cancel the changes made?\";\n    }\n    discardQuestionButton.addEventListener(\"click\", () => {\n        if (confirm(stringForConfirm)) {\n            modalDiv.remove();\n        }\n    });\n}\n\n\n/**\n * This validates that all inputs to create/edit question, if not all inputs are satisfied, it will return false.\n *\n * @param {Object} answers The answers of the question.\n * @returns {boolean} True if input fields are satisfied, false otherwise.\n */\nexport function validateSubmission(answers) {\n    let isValid = true; // Is the question valid.\n    let answersValid = true; // Are all the answers valid.\n    let questionTitle = document.getElementById(\"question_title_id\").value.trim();\n    let questionTitleTextarea = document.getElementById(\"question_title_id\");\n    let questionTitleAlert = document.getElementById(\"title_textarea_alert\");\n    let questionDescription = document.getElementById(\"question_description_id\").value.trim();\n    let questionDescriptionTextarea = document.getElementById(\"question_description_id\");\n    let questionDescriptionAlert = document.getElementById(\"question_textarea_alert\");\n    let atLeastOneCorrectAnswerAlert = document.getElementById(\"question_alert_one_correct\");\n    let answerDescriptionAlert = document.getElementById(\"question_alert_description\");\n    let atLeastTwoAnswersAlert = document.getElementById(\"question_alert_two_answers\");\n    let maxOneCorrectAnswerAlert = document.getElementById(\"question_alert_max_one_correct\");\n    let questionType = document.getElementById(\"question_type_checkbox_id\").checked;\n    let answersBox = document.getElementById(\"all_answers\");\n    let isValidText = document.getElementById(\"validText\");\n\n  // Function to set the border style of an element.\n    const setBorderStyle = (element, isValid) => {\n        element.style.border = isValid ? \"1px solid #ccc\" : \"1px solid red\";\n    };\n\n    // Checks if the question title is empty.\n    if (!questionTitle) {\n        setBorderStyle(questionTitleTextarea, !!questionTitle);\n        questionTitleAlert.style.display = \"block\";\n        isValid = false;\n    } else {\n        questionTitleAlert.style.display = \"none\";\n        setBorderStyle(questionTitleTextarea, true);\n    }\n\n    // Checks if the question description is empty.\n    if (!questionDescription) {\n        setBorderStyle(questionDescriptionTextarea, !!questionDescription);\n        questionDescriptionAlert.style.display = \"block\";\n        isValid = false;\n    } else {\n        questionDescriptionAlert.style.display = \"none\";\n        setBorderStyle(questionDescriptionTextarea, true);\n    }\n\n    // Checks if there are at least two answers.\n    if (answers.length < 2) {\n        isValid = false;\n        answersValid = false;\n        atLeastTwoAnswersAlert.style.display = \"block\";\n    } else {\n        atLeastTwoAnswersAlert.style.display = \"none\";\n    }\n\n  // Checks if at least one answer is correct.\n    if (!answers.some(answer => answer.correct === 1)) {\n        isValid = false;\n        answersValid = false;\n        atLeastOneCorrectAnswerAlert.style.display = \"block\";\n    } else {\n        atLeastOneCorrectAnswerAlert.style.display = \"none\";\n    }\n\n    // Checks if all answers have a description.\n    if (answers.some(answer => !answer.description.trim())) {\n        isValid = false;\n        answersValid = false;\n        answerDescriptionAlert.style.display = \"block\";\n    } else {\n        answerDescriptionAlert.style.display = \"none\";\n    }\n\n  // Checks if multiple correct answers have been set, when not allowed to.\n    if (questionType) {\n        let checkedAnswers = 0;\n        answers.forEach(answer => {\n            checkedAnswers += answer.correct;\n        });\n        if (checkedAnswers > 1) {\n            isValid = false;\n            answersValid = false;\n            maxOneCorrectAnswerAlert.style.display = \"block\";\n        } else {\n            maxOneCorrectAnswerAlert.style.display = \"none\";\n        }\n    } else {\n          maxOneCorrectAnswerAlert.style.display = \"none\";\n    }\n\n    if (!answersValid) { // If not all answers are valid show the box with warnings.\n        answersBox.style.display = \"block\";\n    } else {\n        answersBox.style.display = \"none\";\n    }\n\n    if (!isValid) { // If the question is not valid show warning.\n        isValidText.style.display = \"block\";\n        return false;\n    }\n    return true;\n}\n\n/**\n * Gets question data inputted in the UI. Used when creating or editing a question.\n *\n * @returns {{description: *, title: *, explanation: *, type: (number)}}\n */\nexport function getQuestionData() {\n    let questionTitle = document.getElementById(\"question_title_id\").value.trim();\n    let questionDescription = document.getElementById(\"question_description_id\").value.trim();\n    let questionExplanation = document.getElementById(\"question_explanation_id\").value.trim();\n    let questionType = document.getElementById(\"question_type_checkbox_id\").checked ? 1 : 0;\n\n    return {\n        title: questionTitle,\n        description: questionDescription,\n        explanation: questionExplanation,\n        type: questionType\n    };\n}\n\n/**\n * Gets the data for each answer inputted in the UI. Used when creating or editing a question.\n *\n * @returns {array}\n */\nexport function prepareAnswers() {\n    let answers = [];\n    let answersDiv = document.querySelector(\".all_answers_for_question_div\");\n\n    for (let i = 0; i < answersDiv.children.length; i++) {\n        let answerText = answersDiv.children[i]\n        .querySelector(\".answer_input\")\n        .value.trim();\n\n        let isCorrect =\n        answersDiv.children[i].querySelector(\".answer_checkbox\").checked;\n        isCorrect = isCorrect ? 1 : 0;\n\n        answers.push({\n            description: answerText,\n            correct: isCorrect,\n            explanation: \"\",\n        });\n    }\n    return answers;\n}\n"],"names":["context","discardQuestionButton","document","querySelector","modalDiv","stringForConfirm","addEventListener","confirm","remove","questionTitle","getElementById","value","trim","questionDescription","questionExplanation","questionType","checked","title","description","explanation","type","answers","answersDiv","i","children","length","answerText","isCorrect","push","correct","questions","callback","contextSavedQuestions","renderForPromise","then","_ref","html","js","appendNodeContents","catch","error","window","console","log","url","hasQuestions","contextTakeQuiz","hasquestions","noQuestionParagraph","_ref2","isValid","answersValid","questionTitleTextarea","questionTitleAlert","questionDescriptionTextarea","questionDescriptionAlert","atLeastOneCorrectAnswerAlert","answerDescriptionAlert","atLeastTwoAnswersAlert","maxOneCorrectAnswerAlert","answersBox","isValidText","setBorderStyle","element","style","border","display","some","answer","checkedAnswers","forEach","IDs","appendAnswerInput","answerContainer","createAnswerContainer","appendChild","id","createElement","className","answerInput","placeholder","setAttribute","answerCheckbox","deleteAnswerButton","content","elementName","textContent"],"mappings":"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"}