{"version":3,"file":"teacher_start_quiz.min.js","sources":["../src/teacher_start_quiz.js"],"sourcesContent":["/* eslint-disable no-console */\n// Define and export the init function\nexport const init = (url, teacherid) => {\n    console.log(\"Teacher Script is loaded and attempting to attach event listener.\");\n\n    const roomConnectionBtn = document.getElementById(\"room_connection_button\");\n    if (!roomConnectionBtn) {\n        console.error(\"Button with id 'room_connection_button' not found!\");\n        return;\n    }\n    // Sends message to socket when roomConnectionBtn button is pressed\n    roomConnectionBtn.addEventListener(\"click\", async () => {\n        try {\n            console.log(\"sending message\"); // eslint-disable-line no-console\n            const socket = await connect_to_socket(`${url}?requesttype=createroom&userid=${teacherid}`);\n            socket.send(`\"Testing some stuff for teachers\" ${teacherid}`);\n        } catch (e) {\n            console.error(`Teacher failed to create room, ${e}`);\n        }\n    });\n};\n\n\n/**\n * Connects a websocket given url\n *\n * @param {string} url\n * @returns websocket reference\n */\nasync function connect_to_socket(url) {\n    console.log(url);\n    let socket;\n    socket = new WebSocket(url);\n\n    let myPromise = new Promise(function(myResolve, myReject) {\n        // Handle successful connection\n        socket.onopen = () => {\n            console.log(\"WebSocket connection established successfully!\");\n            myResolve(socket);\n        };\n        // Handle errors\n        socket.onerror = (error) => {\n            console.error(\"WebSocket encountered an error:\", error);\n            myReject();\n        };\n    });\n\n    console.log(\"WebSocket object created, awaiting connection.\"); // eslint-disable-line no-console\n    // Handle incoming messages\n    socket.onmessage = (event) => {\n        console.log(\"WebSocket message received:\", event.data); // eslint-disable-line no-console\n        const roomCodeElem = document.getElementById(\"roomCode\");\n        if (!roomCodeElem) {\n            console.error(\"Button with id 'roomCode' not found!\");\n            return;\n        }\n\n        roomCodeElem.innerHTML = event.data;\n    };\n\n    // Handle connection close\n    socket.onclose = () => {\n        console.log(\"WebSocket connection closed.\");\n    };\n    return myPromise;\n}"],"names":["url","teacherid","console","log","roomConnectionBtn","document","getElementById","addEventListener","async","socket","WebSocket","myPromise","Promise","myResolve","myReject","onopen","onerror","error","onmessage","event","data","roomCodeElem","innerHTML","onclose","connect_to_socket","send","e"],"mappings":"oKAEoB,CAACA,IAAKC,aACtBC,QAAQC,IAAI,2EAENC,kBAAoBC,SAASC,eAAe,0BAC7CF,kBAKLA,kBAAkBG,iBAAiB,SAASC,cAEpCN,QAAQC,IAAI,yBACNM,4BAeeT,SAEzBS,OADJP,QAAQC,IAAIH,KAEZS,OAAS,IAAIC,UAAUV,SAEnBW,UAAY,IAAIC,SAAQ,SAASC,UAAWC,UAE5CL,OAAOM,OAAS,KACZb,QAAQC,IAAI,kDACZU,UAAUJ,SAGdA,OAAOO,QAAWC,QACdf,QAAQe,MAAM,kCAAmCA,OACjDH,sBAIRZ,QAAQC,IAAI,kDAEZM,OAAOS,UAAaC,QAChBjB,QAAQC,IAAI,8BAA+BgB,MAAMC,YAC3CC,aAAehB,SAASC,eAAe,YACxCe,aAKLA,aAAaC,UAAYH,MAAMC,KAJ3BlB,QAAQe,MAAM,yCAQtBR,OAAOc,QAAU,KACbrB,QAAQC,IAAI,iCAETQ,UAlDsBa,WAAqBxB,8CAAqCC,YAC/EQ,OAAOgB,iDAA0CxB,YACnD,MAAOyB,GACLxB,QAAQe,+CAAwCS,QAVpDxB,QAAQe,MAAM"}