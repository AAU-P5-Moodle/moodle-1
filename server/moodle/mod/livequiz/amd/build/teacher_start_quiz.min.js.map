{"version":3,"file":"teacher_start_quiz.min.js","sources":["../src/teacher_start_quiz.js"],"sourcesContent":["/* eslint-disable no-console */\n// Define and export the init function\nexport const init = (url, studentid) => {\n    console.log(\"Teacher Script is loaded and attempting to attach event listener.\");\n    const startQuizBtn = document.getElementById(\"room_connection_button\");\n    if (!startQuizBtn) {\n        console.error(\"Button with id 'startQuiz' not found!\");\n        return;\n    }\n    // Sends message to socket when startQuiz button is pressed\n    startQuizBtn.addEventListener(\"click\", () => {\n        console.log(\"sending message\");\n        connect_to_socket(url).then((socket) => {\n            socket.send(`\"Testing some stuff for teachers\" ${studentid}`);\n        });\n    });\n};\n\n\n/**\n * Connects a websocket given url\n *\n * @param {string} url\n * @returns websocket reference\n */\nasync function connect_to_socket(url) {\n    console.log(url);\n    let socket;\n    socket = new WebSocket(url);\n    let myPromise = new Promise(function (myResolve, myReject) {\n        socket.onopen = () => {\n            console.log(\"WebSocket connection established successfully!\");\n            myResolve(socket);\n        };\n        // Handle errors\n        socket.onerror = (error) => {\n            console.error(\"WebSocket encountered an error:\", error);\n            myReject();\n        };\n        console.log(\"WebSocket object created, awaiting connection.\");\n        // Handle incoming messages\n        socket.onmessage = (event) => {\n            console.log(\"WebSocket message received:\", event.data);\n        };\n        // Handle connection close\n        socket.onclose = () => {\n            console.log(\"WebSocket connection closed.\");\n        };\n    });\n    return myPromise;\n}"],"names":["url","studentid","console","log","startQuizBtn","document","getElementById","addEventListener","socket","WebSocket","Promise","myResolve","myReject","onopen","onerror","error","onmessage","event","data","onclose","connect_to_socket","then","send"],"mappings":"oKAEoB,CAACA,IAAKC,aACtBC,QAAQC,IAAI,2EACNC,aAAeC,SAASC,eAAe,0BACxCF,aAKLA,aAAaG,iBAAiB,SAAS,KACnCL,QAAQC,IAAI,kCAcaH,SAEzBQ,cADJN,QAAQC,IAAIH,KAEZQ,OAAS,IAAIC,UAAUT,KACP,IAAIU,SAAQ,SAAUC,UAAWC,UAC7CJ,OAAOK,OAAS,KACZX,QAAQC,IAAI,kDACZQ,UAAUH,SAGdA,OAAOM,QAAWC,QACdb,QAAQa,MAAM,kCAAmCA,OACjDH,YAEJV,QAAQC,IAAI,kDAEZK,OAAOQ,UAAaC,QAChBf,QAAQC,IAAI,8BAA+Bc,MAAMC,OAGrDV,OAAOW,QAAU,KACbjB,QAAQC,IAAI,oCAlChBiB,CAAkBpB,KAAKqB,MAAMb,SACzBA,OAAOc,iDAA0CrB,kBAPrDC,QAAQa,MAAM"}
