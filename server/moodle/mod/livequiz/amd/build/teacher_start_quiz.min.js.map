{"version":3,"file":"teacher_start_quiz.min.js","sources":["../src/teacher_start_quiz.js"],"sourcesContent":["/* eslint-disable no-console */\n// Define and export the init function\nexport const init = (url, teacherid) => {\n    console.log(\"Teacher Script is loaded and attempting to attach event listener.\");\n\n    const startQuizBtn = document.getElementById(\"room_connection_button\");\n    if (!startQuizBtn) {\n        console.error(\"Button with id 'startQuiz' not found!\");\n        return;\n    }\n    // Sends message to socket when startQuiz button is pressed\n    startQuizBtn.addEventListener(\"click\", () => {\n        console.log(\"sending message\"); // eslint-disable-line no-console\n        connect_to_socket(`${url}?requesttype=createroom&userid=${teacherid}`).then((socket) => {\n            socket.send(`\"Testing some stuff for teachers\" ${teacherid}`);\n        });\n    });\n};\n\n\n/**\n * Connects a websocket given url\n *\n * @param {string} url\n * @returns websocket reference\n */\nasync function connect_to_socket(url) {\n    console.log(url);\n    let socket;\n    socket = new WebSocket(url);\n\n    let myPromise = new Promise(function(myResolve, myReject) {\n        // Handle successful connection\n        socket.onopen = () => {\n            console.log(\"WebSocket connection established successfully!\");\n            myResolve(socket);\n        };\n        // Handle errors\n        socket.onerror = (error) => {\n            console.error(\"WebSocket encountered an error:\", error);\n            myReject();\n        };\n    });\n\n    console.log(\"WebSocket object created, awaiting connection.\"); // eslint-disable-line no-console\n    // Handle incoming messages\n    socket.onmessage = (event) => {\n        console.log(\"WebSocket message received:\", event.data); // eslint-disable-line no-console\n        const roomCodeElem = document.getElementById(\"roomCode\");\n        if (!roomCodeElem) {\n            console.error(\"Button with id 'roomCode' not found!\");\n            return;\n        }\n\n        roomCodeElem.innerHTML = event.data;\n    };\n\n    // Handle connection close\n    socket.onclose = () => {\n        console.log(\"WebSocket connection closed.\");\n    };\n    return myPromise;\n}"],"names":["url","teacherid","console","log","startQuizBtn","document","getElementById","addEventListener","socket","WebSocket","myPromise","Promise","myResolve","myReject","onopen","onerror","error","onmessage","event","data","roomCodeElem","innerHTML","onclose","connect_to_socket","then","send"],"mappings":"oKAEoB,CAACA,IAAKC,aACtBC,QAAQC,IAAI,2EAENC,aAAeC,SAASC,eAAe,0BACxCF,aAKLA,aAAaG,iBAAiB,SAAS,KACnCL,QAAQC,IAAI,kCAcaH,SAEzBQ,OADJN,QAAQC,IAAIH,KAEZQ,OAAS,IAAIC,UAAUT,SAEnBU,UAAY,IAAIC,SAAQ,SAASC,UAAWC,UAE5CL,OAAOM,OAAS,KACZZ,QAAQC,IAAI,kDACZS,UAAUJ,SAGdA,OAAOO,QAAWC,QACdd,QAAQc,MAAM,kCAAmCA,OACjDH,sBAIRX,QAAQC,IAAI,kDAEZK,OAAOS,UAAaC,QAChBhB,QAAQC,IAAI,8BAA+Be,MAAMC,YAC3CC,aAAef,SAASC,eAAe,YACxCc,aAKLA,aAAaC,UAAYH,MAAMC,KAJ3BjB,QAAQc,MAAM,yCAQtBR,OAAOc,QAAU,KACbpB,QAAQC,IAAI,iCAETO,UAhDHa,WAAqBvB,8CAAqCC,YAAauB,MAAMhB,SACzEA,OAAOiB,iDAA0CxB,kBAPrDC,QAAQc,MAAM"}