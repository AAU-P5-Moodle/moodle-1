{"version":3,"file":"reuse_question.min.js","sources":["../src/reuse_question.js"],"sourcesContent":["import {external_reuse_questions} from \".repository.js\";\r\nimport {rerender_saved_questions_list, rerender_take_quiz_button} from \"./edit_question_helper\";\r\nimport {add_delete_question_listeners} from \"./delete_question\";\r\nimport {add_edit_question_listeners} from \"./edit_question\";\r\n\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nexport const importQuestions = async(quizid, url, lecturerid) => {\r\n    let quiz_url = url; // Set url to quiz attempt page to global variable.\r\n    const importQuestionBtn = document.getElementById(\"importQuestionBtn\");\r\n    let questionids = get_checked_questions();\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            await external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\r\n                let update_event_listeners = () => {\r\n                    add_edit_question_listeners(quizid, lecturerid);\r\n                    add_delete_question_listeners(quizid, lecturerid);\r\n                };\r\n                rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\r\n                rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\r\n            });\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the values of the checked questions.\r\n */\r\nfunction get_checked_questions() {\r\n    let checkedquestions = [];\r\n    let questions_div = document.querySelector(\".all_questions_for_lecturer_div\");\r\n\r\n    // Loop through all questions and add the value of the checked questions to the array.\r\n    for (let question of questions_div.children) {\r\n        let checkbox = question.querySelector('input[type=\"checkbox\"]');\r\n        if (checkbox.checked) {\r\n            checkedquestions.push(parseInt(checkbox.value));\r\n        }\r\n    }\r\n    return checkedquestions; // Returns the checked questions.\r\n}"],"names":["async","quizid","url","lecturerid","quiz_url","importQuestionBtn","document","getElementById","questionids","checkedquestions","questions_div","querySelector","question","children","checkbox","checked","push","parseInt","value","get_checked_questions","addEventListener","then","questions","error","window","console"],"mappings":"wUAc+BA,MAAMC,OAAQC,IAAKC,kBAC1CC,SAAWF,UACTG,kBAAoBC,SAASC,eAAe,yBAC9CC,2BAwBAC,iBAAmB,GACnBC,cAAgBJ,SAASK,cAAc,uCAGtC,IAAIC,YAAYF,cAAcG,SAAU,KACrCC,SAAWF,SAASD,cAAc,0BAClCG,SAASC,SACTN,iBAAiBO,KAAKC,SAASH,SAASI,eAGzCT,iBAlCWU,GAElBd,kBAAkBe,iBAAiB,SAASpB,oBAE9B,wCAAyBC,OAAQO,YAAaL,YAAYkB,MAAMC,oEAKpCA,WAJD,oDACGrB,OAAQE,+DACNF,OAAQE,mEAGhBC,UAAU,MAE1C,MAAOmB,OACLC,OAAOC,QAAQF,MAAM"}