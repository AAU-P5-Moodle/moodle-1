{"version":3,"file":"question_editor.min.js","sources":["../src/question_editor.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { save_question } from \"./repository\";\n\nlet isEditing = false;\nlet editingIndex = 0;\nlet answer_count = 0;\n\nexport const init = async (quizid, lecturerid) => {\n  let add_question_button = document.getElementById(\"id_buttonaddquestion\");\n  add_question_button.addEventListener(\"click\", () => {\n    render_question_menu_popup(quizid, lecturerid);\n  });\n};\n\nfunction render_question_menu_popup(quizid, lecturerid) {\n  // This will call the function to load and render our template.\n  Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.appendNodeContents(\".main-container\", html, js);\n      add_answer_button_event_listerner();\n      add_save_question_button_listener(quizid, lecturerid);\n      add_discard_question_button_listener();\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\nfunction add_answer_button_event_listerner() {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n}\n\nfunction append_answer_input() {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer\";\n  answer_input.setAttribute(\"required\", true);\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"\"\n  );\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n    answer_count--;\n  });\n\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  answer_count++;\n}\n\nfunction add_save_question_button_listener(quizid, lecturerid) {\n  let save_question_button = document.querySelector(\".save_button\");\n  save_question_button.addEventListener(\"click\", () => {\n    question_button(quizid, lecturerid);\n  });\n}\n\nfunction question_button(quizid, lecturerid) {\n  let question_input = document.querySelector(\".question_input_large\");\n  let questionText = question_input.value.trim();\n\n  if (!questionText) {\n    alert(\"Please enter a question.\");\n    return;\n  }\n\n  let answers = [];\n  let answers_div = document.querySelector(\".all_answers_for_question_div\");\n  for (let i = 0; i < answers_div.children.length; i++) {\n    let answertext = answers_div.children[i]\n      .querySelector(\".answer_input\")\n      .value.trim();\n\n    let iscorrect =\n      answers_div.children[i].querySelector(\".answer_checkbox\").checked;\n    iscorrect ? (iscorrect = 1) : (iscorrect = 0);\n\n    answers.push({\n      description: answertext,\n      correct: iscorrect,\n      explanation: \"\",\n    });\n  }\n\n  let savedQuestion = {\n    title: questionText,\n    answers: answers,\n    description: \"\",\n    explanation: \"\",\n  };\n\n  save_question(savedQuestion, lecturerid, quizid).then((questions) => {\n    const context = {\n      questions: questions,\n    };\n\n    Templates.renderForPromise(\"mod_livequiz/quiz_editor_page\", context)\n\n      // It returns a promise that needs to be resoved.\n      .then(({ html, js }) => {\n        // Here eventually I have my compiled template, and any javascript that it generated.\n        // The templates object has append, prepend and replace functions.\n        question_editor_wrapper = document.querySelector(\".page-mod-livequiz-quizcreator\");\n        console.log(question_editor_wrapper);\n        while (question_editor_wrapper.firstChild) {\n          myNode.removeChild(question_editor_wrapper.lastChild);\n        }\n\n        Templates.appendNodeContents(\".page-mod-livequiz-quizcreator\", html, js);\n        add_answer_button_event_listerner();\n        //add_save_question_button_listener(quizid, lecturerid);\n        add_discard_question_button_listener();\n      })\n\n      // Deal with this exception (Using core/notify exception function is recommended).\n      .catch((error) => displayException(error));\n\n  });\n  let modal_div = document.querySelector(\".Modal_div\");\n  modal_div.remove();\n}\n\nfunction add_discard_question_button_listener() {\n  let discard_question_button = document.querySelector(\n    \".discard_question_button\"\n  );\n  console.log(discard_question_button);\n  discard_question_button.addEventListener(\"click\", () => {\n    render_question_confirmation();\n  });\n}\n\nfunction render_question_confirmation() {\n  console.log(\"GOT INTO LISTENER\");\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n    .then(({ html, js }) => {\n      Templates.appendNodeContents(\".Modal_div\", html, js);\n      question_confirmation();\n    })\n    .catch((error) => displayException(error));\n}\n\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\n    \".toast_promise_deletion_div\"\n  );\n  let cancel_question_deletion_button = document.querySelector(\n    \".cancel_question_deletion_button\"\n  );\n  let continue_question_deletion_button = document.querySelector(\n    \".continue_question_deletion_button\"\n  );\n\n  let modal_div = document.querySelector(\".Modal_div\");\n\n  continue_question_deletion_button.addEventListener(\"click\", () => {\n    isEditing = false;\n    editingIndex = null;\n    modal_div.remove();\n  });\n\n  cancel_question_deletion_button.addEventListener(\"click\", () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n"],"names":["isEditing","editingIndex","add_answer_button_event_listerner","document","querySelector","addEventListener","answer_container","createElement","className","answer_input","placeholder","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","appendChild","remove","append_answer_input","add_discard_question_button_listener","discard_question_button","console","log","renderForPromise","then","_ref3","html","js","appendNodeContents","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","modal_div","question_confirmation","catch","error","async","quizid","lecturerid","getElementById","_ref","questionText","value","trim","alert","answers","answers_div","i","children","length","answertext","iscorrect","checked","push","description","correct","explanation","savedQuestion","title","questions","context","_ref2","question_editor_wrapper","firstChild","myNode","removeChild","lastChild","question_button","add_save_question_button_listener","render_question_menu_popup"],"mappings":"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"}