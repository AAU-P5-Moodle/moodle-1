{"version":3,"file":"question_editor.min.js","sources":["../src/question_editor.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {exception as displayException} from 'core/notification';\nimport {save_question} from \"./repository\";\n\nlet isEditing = false;\nlet editingIndex = 0;\nlet answer_count = 0;\n\nexport const init = async (quizid, lecturerid) => {\n  let add_question_button = document.getElementById(\"id_buttonaddquestion\");\n  add_question_button.addEventListener(\"click\", () => {\n    render_question_menu_popup(quizid, lecturerid);\n  });\n};\n\nfunction render_question_menu_popup(quizid, lecturerid) {\n  // This will call the function to load and render our template.\n  Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n    // It returns a promise that needs to be resoved.\n    .then(({ html, js }) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.appendNodeContents(\".main-container\", html, js);\n      add_answer_button_event_listerner();\n      add_save_question_button_listener(quizid, lecturerid);\n      add_discard_question_button_listener();\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\nfunction add_answer_button_event_listerner() {\n  //Adding event listerner to add answer button\n  let answer_button = document.querySelector(\".add_new_answer_to_question\");\n  answer_button.addEventListener(\"click\", () => {\n    append_answer_input();\n  });\n}\n\nfunction append_answer_input() {\n  let answer_container = document.createElement(\"div\");\n  answer_container.className = \"container_for_new_answer\";\n\n  let answer_input = document.createElement(\"input\");\n  answer_input.className = \"answer_input\";\n  answer_input.placeholder = \"Enter answer \" + (answer_count + 1);\n  answer_input.id = \"answer_input_\" + (answer_count + 1);\n  answer_input.setAttribute(\"required\", true);\n\n\n  let answer_checkbox = document.createElement(\"input\");\n  answer_checkbox.setAttribute(\"type\", \"checkbox\");\n  answer_checkbox.className = \"answer_checkbox\";\n  answer_checkbox.id = \"answer_checkbox_\" + (answer_count + 1);\n\n  let delete_answer_button = create_element(\n    \"delete_answer_button\",\n    \"button\",\n    \"delete_answer_button\",\n    \"\"\n  );\n\n  answer_container.appendChild(answer_checkbox);\n  answer_container.appendChild(answer_input);\n  answer_container.appendChild(delete_answer_button);\n\n  delete_answer_button.addEventListener(\"click\", () => {\n    answer_container.remove();\n    answer_count--;\n  });\n\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n  answer_count++;\n}\n\nfunction add_save_question_button_listener(quizid, lecturerid) {\n  let save_question_button = document.querySelector(\".save_button\");\n  save_question_button.addEventListener(\"click\", () => {question_button(quizid, lecturerid);});\n}\n\nfunction question_button(quizid, lecturerid){\n    let question_input = document.querySelector(\".question_input_large\");\n    let questionText = question_input.value.trim();\n\n  if (!questionText) {\n      alert(\"Please enter a question.\");\n      return;\n  }\n\n    let answers = [];\n    let answers_div = document.querySelector(\".all_answers_for_question_div\");\n    for (let i = 0; i < answers_div.children.length; i++) {\n      let answertext = answers_div.children[i]\n        .querySelector(\".answer_input\")\n        .value.trim();\n\n      let iscorrect = answers_div.children[i].querySelector(\".answer_checkbox\").checked;\n      iscorrect ? iscorrect = 1 : iscorrect = 0;\n\n\n      answers.push({\n        description: answertext,\n        correct: iscorrect,\n        explanation: \"\",\n      });\n    }\n\n    let savedQuestion = {\n      title: questionText,\n      answers: answers,\n      description: \"\",\n      explanation: \"\",\n    };\n\n    save_question(savedQuestion, lecturerid, quizid);\n    let modal_div = document.querySelector(\".Modal_div\");\n    console.log(savedQuestion);\n    modal_div.remove();\n}\n\nfunction add_discard_question_button_listener() {\n  let discard_question_button = document.querySelector(\".discard_question_button\");\n  console.log(discard_question_button);\n  discard_question_button.addEventListener('click', () => {\n    render_question_confirmation();\n  });\n}\n\nfunction render_question_confirmation() {\n  console.log(\"GOT INTO LISTENER\");\n  Templates.renderForPromise(\"mod_livequiz/question_confirmation\")\n\n  .then(({ html, js }) => {\n    Templates.appendNodeContents(\".Modal_div\", html, js);\n    question_confirmation();\n  })\n  .catch((error) => displayException(error));\n}\n\nfunction question_confirmation() {\n  let toast_promise_deletion_div = document.querySelector(\".toast_promise_deletion_div\");\n  let cancel_question_deletion_button = document.querySelector(\".cancel_question_deletion_button\");\n  let continue_question_deletion_button = document.querySelector(\".continue_question_deletion_button\");\n    \n  let modal_div = document.querySelector('.Modal_div');\n    \n  continue_question_deletion_button.addEventListener('click', () => {\n    isEditing = false;\n    editingIndex = null\n    modal_div.remove();\n  });\n    \n  cancel_question_deletion_button.addEventListener('click', () => {\n    toast_promise_deletion_div.remove();\n  });\n}\n\nfunction create_element(element_name, type, class_name, content) {\n  element_name = document.createElement(type);\n  element_name.className = class_name;\n  element_name.textContent = content;\n  return element_name;\n}\n\n//listener for edit buttons\ndocument.addEventListener(\"click\", (event) => {\n  if (event.target.classList.contains(\"edit-question\")) {\n      console.log(\"Edit button clicked!\");\n      const questionId = event.target.dataset.id;\n      loadQuestionForEditing(questionId, quizid); // Pass quizid here\n  }\n});\n\nasync function loadQuestionForEditing(questionId, quizid) {\n  try {\n      const response = await fetch(`/mod/livequiz/get_question.php?id=${questionId}&quizid=${quizid}`);\n      const questionData = await response.json();\n      console.log(\"Fetched question data:\", questionData);\n\n      // Populate answers here\n      const answersContainer = document.querySelector(\".all_answers_for_question_div\");\n      const existingAnswerInputs = answersContainer.querySelectorAll(\".container_for_new_answer\");\n\n      questionData.answers.forEach((answer, index) => {\n          let answerInputContainer;\n\n          if (index < existingAnswerInputs.length) {\n              answerInputContainer = existingAnswerInputs[index];\n          } else {\n              appendAnswerInput();\n              answerInputContainer = answersContainer.lastElementChild;\n          }\n\n          answerInputContainer.querySelector(\".answer_input\").value = answer.description;\n          answerInputContainer.querySelector(\".answer_checkbox\").checked = answer.correct;\n      });\n\n      while (existingAnswerInputs.length > questionData.answers.length) {\n          existingAnswerInputs[existingAnswerInputs.length - 1].remove();\n      }\n\n      isEditing = true;\n      editingIndex = questionId;\n  } catch (error) {\n      console.error(\"Failed to load question:\", error);\n  }\n}\n"],"names":["isEditing","editingIndex","answer_count","async","quizid","lecturerid","document","getElementById","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","querySelector","answer_container","createElement","className","answer_input","placeholder","id","setAttribute","answer_checkbox","delete_answer_button","element_name","type","class_name","content","textContent","appendChild","remove","append_answer_input","questionText","value","trim","alert","answers","answers_div","i","children","length","answertext","iscorrect","checked","push","description","correct","explanation","savedQuestion","title","modal_div","console","log","question_button","add_save_question_button_listener","discard_question_button","_ref2","toast_promise_deletion_div","cancel_question_deletion_button","continue_question_deletion_button","question_confirmation","catch","error","add_discard_question_button_listener","render_question_menu_popup","event","target","classList","contains","questionId","response","fetch","questionData","json","answersContainer","existingAnswerInputs","querySelectorAll","forEach","answer","index","answerInputContainer","appendAnswerInput","lastElementChild","loadQuestionForEditing","dataset"],"mappings":"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"}