{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\nimport {add_edit_question_listeners} from \"./edit_question\";\nimport {add_delete_question_listeners} from \"./delete_question\";\nimport {displayException} from \"core/notification\";\nimport {external_reuse_questions, get_lecturer_questions} from \"./repository\";\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid, url);\n    });\n};\n\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n        // It returns a promise that needs to be resolved.\n        .then(async({html, js}) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\".main-container\", html, js);\n            await importQuestions(quizid, url, lecturerid);\n            add_discard_question_button_listener();\n            add_old_questions_to_popup(lecturerid);\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => displayException(error));\n}\n\n/**\n * Adds old questions to the import question popup.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_old_questions_to_popup(lecturerid) {\n    console.log(\"is in add old questions\");\n    get_lecturer_questions(lecturerid).then((oldquizzes) => {\n        console.log(\"got after then\");\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\n        console.log(\"Old quizzes: \", oldquizzes);\n        //oldQuizzesContainer.innerHTML = \"\"; // Clear content.\n        \n        oldquizzes.forEach((quiz) => {\n            let quiz_div = document.createElement('div');\n            //Create quiz checkbox\n            let quiz_checkbox = document.createElement('input');\n            quiz_checkbox.type = \"checkbox\";\n            quiz_checkbox.value = quiz.quizid;\n            quiz_checkbox.id = quiz.quizid;\n            quiz_checkbox.name = quiz.quizname;\n            // Create quiz Label\n            let quiz_label = document.createElement('label');\n            quiz_label.htmlFor = `quiz_${quiz.quizid}`;\n            quiz_label.textContent = quiz.quizname;\n            quiz_div.class = \"oldquiz\"; // Might be used for styling.\n            // Append the checkbox and label to the div.\n            quiz_div.appendChild(quiz_checkbox);\n            quiz_div.appendChild(quiz_label);\n            \n            // Create container for questions.\n            let questions_div = document.createElement(\"div\");\n            // Loop through each question and add it to the container.\n            quiz.questions.forEach((question) => {\n                //Create question checkbox\n                let question_div = document.createElement('div');\n                let question_checkbox = document.createElement('input');\n                question_checkbox.type = \"checkbox\";\n                question_checkbox.value = `question_${question.questionid}`;\n                question_checkbox.id = question.questionid;\n                question_checkbox.name = question.questiontitle;\n                // Create question Label\n                let question_label = document.createElement('label');\n                question_label.htmlFor = `question_${question.questionid}`;\n                question_label.textContent = question.questiontitle;\n                question_div.appendChild(question_checkbox);\n                question_div.appendChild(question_label);\n                questions_div.appendChild(question_div);\n            });\n            quiz_div.appendChild(questions_div);\n            oldQuizzesContainer.appendChild(quiz_div);\n        });\n    }).catch((error) => console.log(error));\n}\n\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nasync function importQuestions(quizid, url, lecturerid) {\n    let quiz_url = url;\n    const importQuestionBtn = document.querySelector(\".import_btn\");\n\n    importQuestionBtn.addEventListener(\"click\", async() => {\n        try {\n            let questionids = get_checked_questions();\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\n        } catch (error) {\n            window.console.error(\"Error in import of questions\");\n            console.log(error);\n        }\n    });\n}\n\n/**\n * Calls the external function to reuse questions.\n * @param {number} quizid - The ID of the quiz.\n * @param {number} questionids - The IDs of the questions to reuse.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} quiz_url - The URL of the quiz page.\n */\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\n        let update_event_listeners = () => {\n            add_edit_question_listeners(quizid, lecturerid);\n            add_delete_question_listeners(quizid, lecturerid);\n        };\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\n    }). catch((error) => displayException(error));\n    let modal_div = document.querySelector(\".Modal_div\");\n    modal_div.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the values of the checked questions.\n */\nfunction get_checked_questions() {\n    let checkedquestions = [];\n    let questions_div = document.querySelector(\".oldQuestions\");\n\n    // Loop through all questions and add the value of the checked questions to the array.\n    for (let question of questions_div.children) {\n        let checkbox = question.querySelector('input[type=\"checkbox\"]');\n        if (checkbox.checked) {\n            checkedquestions.push(parseInt(checkbox.value));\n        }\n    }\n    return checkedquestions; // Returns the checked questions.\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quiz_url","querySelector","questionids","checkedquestions","questions_div","question","children","checkbox","checked","push","parseInt","value","get_checked_questions","questions","update_event_listeners","catch","error","remove","call_reuse_questions","window","console","log","importQuestions","oldquizzes","oldQuizzesContainer","forEach","quiz","quiz_div","createElement","quiz_checkbox","type","id","name","quizname","quiz_label","htmlFor","textContent","class","appendChild","question_div","question_checkbox","questionid","questiontitle","question_label","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"qbAiBoBA,MAAMC,OAAQC,WAAYC,OACbC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,qBAiBJL,OAAQC,WAAYC,wBAEvDI,iBAAiB,sCAEtBC,MAAKR,MAAAA,WAAMS,KAACA,KAADC,GAAOA,4BAELC,mBAAmB,kBAAmBF,KAAMC,yBAwEnCT,OAAQE,IAAKD,gBACpCU,SAAWT,IACWC,SAASS,cAAc,eAE/BP,iBAAiB,SAASN,kBAEhCc,2BAmCRC,iBAAmB,GACnBC,cAAgBZ,SAASS,cAAc,qBAGtC,IAAII,YAAYD,cAAcE,SAAU,KACrCC,SAAWF,SAASJ,cAAc,0BAClCM,SAASC,SACTL,iBAAiBM,KAAKC,SAASH,SAASI,eAGzCR,iBA7CmBS,aAgBAvB,OAAQa,YAAaZ,WAAYU,mDAClCX,OAAQa,YAAaZ,YAAYM,MAAMiB,gBACxDC,uBAAyB,oDACGzB,OAAQC,+DACND,OAAQC,qEAEZuB,UAAWC,4EACfd,UAAU,MACpCe,OAAOC,QAAU,kCAAiBA,SACtBxB,SAASS,cAAc,cAC7BgB,SAzBFC,CAAqB7B,OAAQa,YAAaZ,WAAYU,UACxD,MAAOgB,OACLG,OAAOC,QAAQJ,MAAM,gCACrBI,QAAQC,IAAIL,WAjFNM,CAAgBjC,OAAQE,IAAKD,sFAaXA,YAChC8B,QAAQC,IAAI,kEACW/B,YAAYM,MAAM2B,aACrCH,QAAQC,IAAI,sBACRG,oBAAsBhC,SAASS,cAAc,eACjDmB,QAAQC,IAAI,gBAAiBE,YAG7BA,WAAWE,SAASC,WACZC,SAAWnC,SAASoC,cAAc,OAElCC,cAAgBrC,SAASoC,cAAc,SAC3CC,cAAcC,KAAO,WACrBD,cAAclB,MAAQe,KAAKrC,OAC3BwC,cAAcE,GAAKL,KAAKrC,OACxBwC,cAAcG,KAAON,KAAKO,aAEtBC,WAAa1C,SAASoC,cAAc,SACxCM,WAAWC,uBAAkBT,KAAKrC,QAClC6C,WAAWE,YAAcV,KAAKO,SAC9BN,SAASU,MAAQ,UAEjBV,SAASW,YAAYT,eACrBF,SAASW,YAAYJ,gBAGjB9B,cAAgBZ,SAASoC,cAAc,OAE3CF,KAAKb,UAAUY,SAASpB,eAEhBkC,aAAe/C,SAASoC,cAAc,OACtCY,kBAAoBhD,SAASoC,cAAc,SAC/CY,kBAAkBV,KAAO,WACzBU,kBAAkB7B,yBAAoBN,SAASoC,YAC/CD,kBAAkBT,GAAK1B,SAASoC,WAChCD,kBAAkBR,KAAO3B,SAASqC,kBAE9BC,eAAiBnD,SAASoC,cAAc,SAC5Ce,eAAeR,2BAAsB9B,SAASoC,YAC9CE,eAAeP,YAAc/B,SAASqC,cACtCH,aAAaD,YAAYE,mBACzBD,aAAaD,YAAYK,gBACzBvC,cAAckC,YAAYC,iBAE9BZ,SAASW,YAAYlC,eACrBoB,oBAAoBc,YAAYX,gBAErCZ,OAAOC,OAAUI,QAAQC,IAAIL,SA1DxB4B,CAA2BtD,eAI9ByB,OAAOC,QAAU,kCAAiBA,SA7BnC6B,CAAkCxD,OAAQC,WAAYC"}