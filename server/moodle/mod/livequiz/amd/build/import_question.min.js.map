{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport {addCancelEditButtonListener, rerenderSavedQuestionsList, rerenderTakeQuizButton} from \"./helper\";\r\nimport {addEditQuestionListeners} from \"./edit_question\";\r\nimport {addDeleteQuestionListeners} from \"./delete_question\";\r\nimport {exception as displayException} from \"core/notification\";\r\nimport {externalReuseQuestions, getLecturerQuiz} from \"./repository\";\r\n\r\n/**\r\n * Adds an event listener to the \"Import Question\" button.\r\n * When the button is clicked, it renders the import question menu popup.\r\n *\r\n * @param {number} quizId - The ID of the quiz.\r\n * @param {number} lecturerId - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async(quizId, lecturerId, url) => {\r\n    let importQuestionButton = document.getElementById(\"id_buttonimportquestion\");\r\n    importQuestionButton.addEventListener(\"click\", () => {\r\n        renderImportQuestionMenuPopup(quizId, lecturerId, url);\r\n    });\r\n};\r\n\r\n/**\r\n * Renders the import question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the import question menu popup template, appends it to the main container,\r\n * Sets up event listeners for importing questions and cancelling the import.\r\n *\r\n * @param {number} quizId - The ID of the quiz.\r\n * @param {number} lecturerId - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {void} - Nothing.\r\n */\r\nasync function renderImportQuestionMenuPopup(quizId, lecturerId, url) {\r\n    // This will call the function to load and render our template.\r\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\", {}, \"boost\")\r\n        // It returns a promise that needs to be resolved.\r\n        .then(async({html, js}) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\".main-container\", html, js);\r\n            await importQuestions(quizId, url, lecturerId);\r\n            addCancelEditButtonListener(\"import\");\r\n            addOldQuestionsToPopup(lecturerId, quizId);\r\n        })\r\n        .catch((error) => displayException(error)); // Deal with this exception (Using core/notify exception function is recommended).\r\n}\r\n\r\n/**\r\n * Adds old questions to the import question popup.\r\n *\r\n * @param {number} lecturerId - The ID of the lecturer.\r\n * @param {number} quizId - The ID of the quiz.\r\n * @returns {void}\r\n */\r\nfunction addOldQuestionsToPopup(lecturerId, quizId) {\r\n    getLecturerQuiz(lecturerId).then((oldQuizzes) => {\r\n        oldQuizzes = oldQuizzes.filter(currentQuiz => currentQuiz.quizid !== quizId);\r\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\r\n        if (oldQuizzes.length === 0) {\r\n            let noQuestions = document.createElement(\"p\");\r\n            noQuestions.textContent = \"No questions available.\";\r\n            oldQuizzesContainer.appendChild(noQuestions);\r\n            return;\r\n        }\r\n        oldQuizzes.forEach((quiz) => { // Loop through all quizzes.\r\n            if (quiz.questions.length > 0) {\r\n                let questionCheckboxes = [];\r\n                let quizDiv = document.createElement('div');\r\n                // Create quiz checkbox.\r\n                let quizCheckbox = document.createElement('input');\r\n                quizCheckbox.type = \"checkbox\";\r\n                quizCheckbox.value = quiz.quizid;\r\n                quizCheckbox.id = quiz.quizid;\r\n                quizCheckbox.style.marginRight = \"5px\"; // Add margin so the text is not too close to the checkbox.\r\n                quizCheckbox.name = quiz.quiztitle;\r\n                // Create quiz Label.\r\n                let quizLabel = document.createElement('label');\r\n                quizLabel.htmlFor = `quiz_${quiz.quizid}`;\r\n                quizLabel.textContent = quiz.quiztitle;\r\n                quizLabel.style.fontWeight = \"bold\"; // Make the quiz title bold.\r\n                quizDiv.class = \"oldquiz\"; // Might be used for styling.\r\n\r\n                // Append the checkbox and label to the div.\r\n                quizDiv.appendChild(quizCheckbox);\r\n                quizDiv.appendChild(quizLabel);\r\n                // Set the border style\r\n                quizDiv.style.border = \"2px solid black\";\r\n                // Create container for questions.\r\n                let questionsDiv = document.createElement(\"div\");\r\n                questionsDiv.style.marginBottom = \"20px\";\r\n                questionsDiv.style.marginLeft = \"20px\"; // Add margin to the left so the questions are indented.\r\n                questionsDiv.id = \"questionsdiv\";\r\n                // Loop through each question and add it to the container.\r\n                quiz.questions.forEach((question) => {\r\n                    // Create question checkbox.\r\n                    let questionDiv = document.createElement('div');\r\n                    let questionCheckbox = document.createElement('input');\r\n                    questionCheckbox.type = \"checkbox\";\r\n                    questionCheckbox.value = `question_${question.questionid}`;\r\n                    questionCheckbox.style.marginRight = \"5px\"; // Add margin so the text is not too close to the checkbox.\r\n                    questionCheckbox.id = question.questionid;\r\n                    questionCheckbox.name = question.questiontitle;\r\n                    questionCheckboxes.push(questionCheckbox);\r\n                    // Create question Label.\r\n                    let questionLabel = document.createElement('label');\r\n                    questionLabel.htmlFor = `question_${question.questionid}`;\r\n                    questionLabel.textContent = question.questiontitle;\r\n\r\n                    questionDiv.appendChild(questionCheckbox);\r\n                    questionDiv.appendChild(questionLabel);\r\n                    questionsDiv.appendChild(questionDiv);\r\n                });\r\n                addQuizCheckboxListener(quizCheckbox, questionCheckboxes);\r\n                addQuestionCheckboxListener(quizCheckbox, questionCheckboxes);\r\n                quizDiv.appendChild(questionsDiv);\r\n                oldQuizzesContainer.appendChild(quizDiv);\r\n            }\r\n        });\r\n    }).catch((error) => displayException(error));\r\n}\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizId - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerId - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nasync function importQuestions(quizId, url, lecturerId) {\r\n    let quizUrl = url;\r\n    const importQuestionBtn = document.querySelector(\".import_btn\");\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            let questionIds = getCheckedQuestions();\r\n            if (questionIds.length === 0) {\r\n                alert(\"No questions selected. Pleas choose at least one question to import.\")\r\n                return;\r\n            }\r\n            callReuseQuestions(quizId, questionIds, lecturerId, quizUrl);\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Calls the external function to reuse questions.\r\n *\r\n @param {number} quizId - The ID of the quiz.\r\n @param {Array<number>} questionIds - The IDs of the questions to reuse.\r\n @param {number} lecturerId - The ID of the lecturer.\r\n @param {string} quizUrl - The URL of the quiz page.\r\n @returns {void}\r\n */\r\nfunction callReuseQuestions(quizId, questionIds, lecturerId, quizUrl) {\r\n    externalReuseQuestions(quizId, questionIds, lecturerId)\r\n        .then((questions) => {\r\n            let updateEventListeners = () => {\r\n                addEditQuestionListeners(quizId, lecturerId);\r\n                addDeleteQuestionListeners(quizId, lecturerId);\r\n            };\r\n            rerenderSavedQuestionsList(questions, updateEventListeners); // Re-render saved questions list.\r\n            // Re-render take quiz button. Since at least one question was imported, hasquestions is true.\r\n            rerenderTakeQuizButton(quizUrl, true);\r\n        })\r\n        .catch((error) => displayException(error));\r\n    let modalDiv = document.querySelector(\".Modal_div\");\r\n    modalDiv.remove();\r\n}\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the ids of the checked questions.\r\n */\r\nfunction getCheckedQuestions() {\r\n    let checkedQuestions = [];\r\n    let questionsDiv = document.querySelector(\".oldQuizzes\");\r\n\r\n    // Loop through all quizzes and get the checked questions.\r\n    for (let quizDiv of questionsDiv.children) { // Loop through all quizzes.\r\n        for (let content of quizDiv.children) { // Loop through all content of the quiz.\r\n            if (content.tagName === \"DIV\") { // Only look in div elements\r\n                for (let questionDiv of content.children) { // Loop through all questions.\r\n                    for (let children of questionDiv.children) { // Loop through all children of the question.\r\n                        if (children.tagName === \"INPUT\") { // Only look in input elements.\r\n                            let checkbox = children;\r\n                            if (checkbox.checked) { // If the checkbox is checked, add the id to the array.\r\n                                checkedQuestions.push(parseInt(checkbox.id));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return checkedQuestions; // Returns the checked questions.\r\n}\r\n\r\n/**\r\n * Adds an event listener to the quiz checkboxes.\r\n *\r\n * @param checkbox - The checkbox to add the event listener to.\r\n * @param questionCheckboxes - The question checkboxes that are manipulated when event is triggered.\r\n * @returns {void}\r\n */\r\nfunction addQuizCheckboxListener(checkbox, questionCheckboxes) {\r\n    checkbox.addEventListener(\"change\", () => {\r\n        questionCheckboxes.forEach((questionCheckbox) => {\r\n            questionCheckbox.checked = checkbox.checked; // Set all questions to checked if the quiz is checked.\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Adds an event listener to the question checkboxes.\r\n *\r\n * @param checkbox - The checkbox that is manipulated when all questions are checked.\r\n * @param questionCheckboxes - The question checkboxes to add the event listener to.\r\n * @returns {void}\r\n */\r\nfunction addQuestionCheckboxListener(checkbox, questionCheckboxes) {\r\n    questionCheckboxes.forEach((questionCheckbox) => {\r\n        questionCheckbox.addEventListener(\"change\", () => {\r\n            if (questionCheckbox.checked) { // If the question is checked, check if all questions are checked.\r\n                let checkboxesSame = checkQuestionsChecked(questionCheckboxes);\r\n                if (checkboxesSame) { // If all questions are checked, check the quiz checkbox.\r\n                    checkbox.checked = questionCheckbox.checked;\r\n                }\r\n            } else { // If the question is unchecked, uncheck the quiz checkbox.\r\n                checkbox.checked = questionCheckbox.checked;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Checks if all questions are checked.\r\n *\r\n * @param questions\r\n * @returns {bool} - True if all questions are checked, false otherwise.\r\n */\r\nfunction checkQuestionsChecked(questions) {\r\n    return questions.every((question) => question.checked); // Returns true only if all are checked\r\n}"],"names":["async","quizId","lecturerId","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quizUrl","querySelector","questionIds","checkedQuestions","questionsDiv","quizDiv","children","content","tagName","questionDiv","checkbox","checked","push","parseInt","id","getCheckedQuestions","length","alert","questions","updateEventListeners","catch","error","remove","callReuseQuestions","window","console","importQuestions","oldQuizzes","filter","currentQuiz","quizid","oldQuizzesContainer","noQuestions","createElement","textContent","appendChild","forEach","quiz","questionCheckboxes","quizCheckbox","type","value","style","marginRight","name","quiztitle","quizLabel","htmlFor","fontWeight","class","border","marginBottom","marginLeft","question","questionCheckbox","questionid","questiontitle","questionLabel","addQuizCheckboxListener","every","addQuestionCheckboxListener","addOldQuestionsToPopup","renderImportQuestionMenuPopup"],"mappings":"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"}