{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport {addCancelEditButtonListener, rerenderSavedQuestionsList, rerenderTakeQuizButton} from \"./helper\";\nimport {addEditQuestionListeners} from \"./edit_question\";\nimport {addDeleteQuestionListeners} from \"./delete_question\";\nimport {externalReuseQuestions, getLecturerQuiz} from \"./repository\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizId, lecturerId, url) => {\n    let importQuestionButton = document.getElementById(\"import_question_button\");\n    importQuestionButton.addEventListener(\"click\", () => {\n        renderImportQuestionMenuPopup(quizId, lecturerId, url);\n    });\n};\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nfunction renderImportQuestionMenuPopup(quizId, lecturerId, url) {\n    // This will call the function to load and render our template.\n    if (!document.querySelector(\".modal_div\")) {\n        Templates.renderForPromise(\"mod_livequiz/import_question_popup\", {}, \"boost\")\n            // It returns a promise that needs to be resolved.\n            .then(({ html, js }) => {\n                // Here we have compiled template.\n                Templates.appendNodeContents(\".main_container\", html, js);\n                importQuestions(quizId, url, lecturerId);\n                addCancelEditButtonListener(\"import\");\n                addOldQuestionsToPopup(lecturerId, quizId);\n            })\n\n            // Deal with this exception (Using core/notify exception function is recommended).\n            .catch((error) => displayException(error));\n    }\n}\n\n/**\n * Adds old questions to the import question popup.\n *\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {number} quizId - The ID of the quiz.\n * @returns {void}\n */\nfunction addOldQuestionsToPopup(lecturerId, quizId) {\n    getLecturerQuiz(lecturerId)\n        .then((oldQuizzes) => {\n            // Filter out the current quiz, so you can't import questions from the same quiz.\n            oldQuizzes = oldQuizzes.filter((currentquiz) => currentquiz.quizid !== quizId);\n\n            // Check how many questions are available.\n            let oldQuizzesContainer = document.querySelector(\".old_quizzes\");\n            if (oldQuizzes.length === 0) {\n                let noQuestions = document.createElement(\"p\");\n                noQuestions.textContent = \"No questions available.\";\n                oldQuizzesContainer.appendChild(noQuestions);\n                return;\n            }\n\n            //Otherwise, loop through all quizzes and add the questions to the popup.\n            oldQuizzes.forEach((quiz) => {\n                let quiz_context = {\n                    quizid: quiz.quizid,\n                    quiztitle: quiz.quiztitle,\n                    questions: quiz.questions,\n                };\n                if (quiz.questions.length > 0) {\n                    Templates.renderForPromise(\"mod_livequiz/import_questions_list\", quiz_context)\n                        .then(({ html, js }) => {\n                            Templates.appendNodeContents(\".old_quizzes\", html, js);\n                            addQuizCheckboxListener(quiz.quizid);\n                            addQuestionCheckboxListener(quiz.quizid);\n                            addQuestionEntryListeners(quiz.quizid);\n                        })\n                        .catch((error) => displayException(error));\n                }\n            });\n        })\n        .catch((error) => displayException(error));\n}\n\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizId - The ID of the quiz.\n * @param {number} quizId - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerId - The ID of the lecturer.\n * @param {number} lecturerId - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nasync function importQuestions(quizId, url, lecturerId) {\n    let quizUrl = url;\n    const importQuestionBtn = document.querySelector(\".import_question_button\");\n\n    importQuestionBtn.addEventListener(\"click\", async () => {\n        try {\n            let questionIds = getCheckedQuestions();\n            if (questionIds.length === 0) {\n                alert(\"No questions selected. Please choose at least one question to import.\");\n                return;\n            }\n            callReuseQuestions(quizId, questionIds, lecturerId, quizUrl);\n        } catch (error) {\n            displayException(error);\n        }\n    });\n}\n\n/**\n * Calls the external function to reuse questions.\n *\n @param {number} quizId - The ID of the quiz.\n @param {Array<number>} questionIds - The IDs of the questions to reuse.\n @param {number} lecturerId - The ID of the lecturer.\n @param {string} quizUrl - The URL of the quiz page.\n @returns {void}\n */\nfunction callReuseQuestions(quizId, questionIds, lecturerId, quizUrl) {\n    externalReuseQuestions(quizId, questionIds, lecturerId)\n        .then((questions) => {\n            let updateEventListeners = () => {\n                addEditQuestionListeners(quizId, lecturerId);\n                addDeleteQuestionListeners(quizId, lecturerId);\n            };\n            rerenderSavedQuestionsList(questions, updateEventListeners); // Re-render saved questions list.\n            // Re-render take quiz button. Since at least one question was imported, hasquestions is true.\n            rerenderTakeQuizButton(quizUrl, true);\n        })\n        .catch((error) => displayException(error));\n    let popupMenu = document.querySelector(\".backdrop\");\n    popupMenu.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the ids of the checked questions.\n */\nfunction getCheckedQuestions() {\n    let checkedquestions = [];\n    let questions = document.querySelectorAll(\".question_checkbox\");\n    questions.forEach((question) => {\n        if (question.checked) {\n            // If the checkbox is checked, add the id to the array.\n            checkedquestions.push(parseInt(question.id));\n        }\n    });\n\n    return checkedquestions; // Returns the checked questions.\n}\n\n/**\n * Adds an event listener to the quiz checkboxes.\n * Marks all questions as checked if the quiz checkbox is checked\n * @param {number} quizId - The ID of the quiz, used to identify the checkboxes.\n */\nfunction addQuizCheckboxListener(quizId) {\n    let quizCheckbox = document.querySelector(\".quiz_\" + quizId);\n    let questionCheckboxes = document.querySelectorAll(\".quiz_\" + quizId + \"_question\");\n\n    quizCheckbox.addEventListener(\"change\", () => {\n        questionCheckboxes.forEach((questionCheckbox) => {\n            questionCheckbox.checked = quizCheckbox.checked; // Set all questions to checked if the quiz is checked.\n            if (questionCheckbox.checked) {\n                let questionEntry = questionCheckbox.parentElement;\n                questionEntry.classList.add(\"question_selected\");\n            } else {\n                let questionEntry = questionCheckbox.parentElement;\n                questionEntry.classList.remove(\"question_selected\");\n            }\n        });\n    });\n}\n\n/**\n * Adds an event listener to the question checkboxes.\n * If all questions are checked, the quiz checkbox is checked.\n * If a question is unchecked, the quiz checkbox is unchecked.\n * @param {number} quizId - The ID of the quiz, used to identify the checkboxes.\n */\nfunction addQuestionCheckboxListener(quizId) {\n    let quizCheckbox = document.querySelector(\".quiz_\" + quizId);\n    let questionCheckboxes = document.querySelectorAll(\".quiz_\" + quizId + \"_question\");\n\n    questionCheckboxes.forEach((questionCheckbox) => {\n        questionCheckbox.addEventListener(\"click\", (event) => {\n            questionCheckbox.checked = !questionCheckbox.checked;\n        });\n\n        questionCheckbox.addEventListener(\"change\", () => {\n            let questionEntry = questionCheckbox.parentElement;\n\n            if (questionCheckbox.checked) {\n                questionEntry.classList.add(\"question_selected\");\n                // If the question is checked, check if all questions are checked.\n                let allChecked = false;\n                allChecked = areAllQuestionsChecked(questionCheckboxes);\n                if (allChecked) {\n                    // If all questions are checked, check the quiz checkbox.\n                    quizCheckbox.checked = true;\n                }\n            } else {\n                // If the question is unchecked, uncheck the quiz checkbox.\n                questionEntry.classList.remove(\"question_selected\");\n                quizCheckbox.checked = false;\n            }\n        });\n    });\n}\n\n/**\n * Adds an event listener to the question entries.\n * If a question entry is clicked, the checkbox is checked.\n * @param {number} quizId - The ID of the quiz, used to identify the checkboxes.\n */\nfunction addQuestionEntryListeners(quizId) {\n    let questionEntries = document.querySelectorAll(\".question_entry_\" + quizId);\n    questionEntries.forEach((questionEntry) => {\n        questionEntry.addEventListener(\"click\", () => {\n            let questionCheckbox = questionEntry.querySelector(\".question_checkbox\");\n            questionCheckbox.checked = !questionCheckbox.checked;\n            questionCheckbox.dispatchEvent(new Event(\"change\"));\n        });\n    });\n}\n\n/**\n * Checks if all questions are checked.\n * @param {NodeList} questions\n * @returns {bool} - True if all questions are checked, false otherwise.\n */\nfunction areAllQuestionsChecked(questions) {\n    //Convert the NodeList to an array in order to use every function.\n    return Array.from(questions).every((question) => question.checked); // Returns true only if all are checked\n}\n"],"names":["async","quizId","lecturerId","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","quizUrl","questionIds","checkedquestions","querySelectorAll","forEach","question","checked","push","parseInt","id","getCheckedQuestions","length","alert","questions","updateEventListeners","catch","error","remove","callReuseQuestions","importQuestions","oldQuizzes","filter","currentquiz","quizid","oldQuizzesContainer","noQuestions","createElement","textContent","appendChild","quiz","quiz_context","quiztitle","_ref2","quizCheckbox","questionCheckboxes","questionCheckbox","parentElement","classList","add","addQuizCheckboxListener","event","questionEntry","allChecked","Array","from","every","addQuestionCheckboxListener","dispatchEvent","Event","addQuestionEntryListeners","addOldQuestionsToPopup","renderImportQuestionMenuPopup"],"mappings":"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"}