{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { add_cancel_edit_button_listener, rerender_saved_questions_list } from \"./edit_question_helper\";\nimport { add_edit_question_listeners } from \"./edit_question\";\nimport { add_delete_question_listeners } from \"./delete_question\";\nimport { external_reuse_questions, get_lecturer_quiz } from \"./repository\";\nimport { rerender_take_quiz_button } from \"./edit_question_helper\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async (quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid, url);\n    });\n};\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\n    // This will call the function to load and render our template.\n    if (!document.querySelector(\".Modal_div\")) {\n        Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n            // It returns a promise that needs to be resolved.\n            .then(({ html, js }) => {\n                // Here we have compiled template.\n                Templates.appendNodeContents(\".main-container\", html, js);\n                importQuestions(quizid, url, lecturerid);\n                add_cancel_edit_button_listener(\"import\");\n                add_old_questions_to_popup(lecturerid, quizid);\n            })\n\n            // Deal with this exception (Using core/notify exception function is recommended).\n            .catch((error) => displayException(error));\n    }\n}\n\n/**\n * Adds old questions to the import question popup.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {number} quizid - The ID of the quiz.\n */\nfunction add_old_questions_to_popup(lecturerid, quizid) {\n    get_lecturer_quiz(lecturerid)\n        .then((oldquizzes) => {\n            // Filter out the current quiz, so you can't import questions from the same quiz.\n            oldquizzes = oldquizzes.filter((currentquiz) => currentquiz.quizid !== quizid);\n\n            // Check how many questions are available.\n            let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\n            if (oldquizzes.length === 0) {\n                let noQuestions = document.createElement(\"p\");\n                noQuestions.textContent = \"No questions available.\";\n                oldQuizzesContainer.appendChild(noQuestions);\n                return;\n            }\n\n            //Otherwise, loop through all quizzes and add the questions to the popup.\n            oldquizzes.forEach((quiz) => {\n                let quiz_context = {\n                    quizid: quiz.quizid,\n                    quiztitle: quiz.quiztitle,\n                    questions: quiz.questions,\n                };\n                if (quiz.questions.length > 0) {\n                    Templates.renderForPromise(\"mod_livequiz/import_questions_list\", quiz_context)\n                        .then(({ html, js }) => {\n                            Templates.appendNodeContents(\".oldQuizzes\", html, js);\n                            addQuizCheckboxListener(quiz.quizid);\n                            addQuestionCheckboxListener(quiz.quizid);\n                        })\n                        .catch((error) => displayException(error));\n                }\n            });\n        })\n        .catch((error) => console.log(error));\n}\n\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nfunction importQuestions(quizid, url, lecturerid) {\n    let quiz_url = url;\n    const importQuestionBtn = document.querySelector(\".import_btn\");\n\n    importQuestionBtn.addEventListener(\"click\", async () => {\n        try {\n            let questionids = get_checked_questions();\n            if (questionids.length === 0) {\n                alert(\"No questions selected. Pleas choose at least one question to import.\");\n                return;\n            }\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\n        } catch (error) {\n            window.console.error(\"Error in import of questions\");\n            console.log(error);\n        }\n    });\n}\n\n/**\n * Calls the external function to reuse questions.\n * @param {number} quizid - The ID of the quiz.\n * @param {array} questionids - The IDs of the questions to reuse.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} quiz_url - The URL of the quiz page.\n */\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\n    external_reuse_questions(quizid, questionids, lecturerid)\n        .then((questions) => {\n            let update_event_listeners = () => {\n                add_edit_question_listeners(quizid, lecturerid);\n                add_delete_question_listeners(quizid, lecturerid);\n            };\n            rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\n            rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\n        })\n        .catch((error) => console.log(error));\n    let popupMenu = document.querySelector(\".backdrop\");\n    popupMenu.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the ids of the checked questions.\n */\nfunction get_checked_questions() {\n    let checkedquestions = [];\n    let questions = document.querySelectorAll(\".question\");\n    questions.forEach((question) => {\n        if (question.checked) {\n            // If the checkbox is checked, add the id to the array.\n            checkedquestions.push(parseInt(question.id));\n        }\n    });\n\n    return checkedquestions; // Returns the checked questions.\n}\n\n/**\n * Adds an event listener to the quiz checkboxes.\n * Marks all questions as checked if the quiz checkbox is checked\n * @param checkbox - The checkbox to add the event listener to.\n * @param questioncheckboxes - The question checkboxes that are manipulated when event is triggered.\n */\nfunction addQuizCheckboxListener(quizId) {\n    let quizCheckbox = document.querySelector(\".quiz_\" + quizId);\n    let questionCheckboxes = document.querySelectorAll(\".quiz_\" + quizId + \"_question\");\n\n    quizCheckbox.addEventListener(\"change\", () => {\n        questionCheckboxes.forEach((questionCheckbox) => {\n            questionCheckbox.checked = quizCheckbox.checked; // Set all questions to checked if the quiz is checked.\n        });\n    });\n}\n\n/**\n * Adds an event listener to the question checkboxes.\n * If all questions are checked, the quiz checkbox is checked.\n * If a question is unchecked, the quiz checkbox is unchecked.\n * @param {string} quizId - The ID of the quiz, used to identify the checkboxes.\n */\nfunction addQuestionCheckboxListener(quizId) {\n    let quizCheckbox = document.querySelector(\".quiz_\" + quizId);\n    let questionCheckboxes = document.querySelectorAll(\".quiz_\" + quizId + \"_question\");\n\n    questionCheckboxes.forEach((questionCheckbox) => {\n        questionCheckbox.addEventListener(\"change\", () => {\n            if (questionCheckbox.checked) {\n                // If the question is checked, check if all questions are checked.\n                let allChecked = false;\n                allChecked = areAllQuestionsChecked(questionCheckboxes);\n                if (allChecked) {\n                    // If all questions are checked, check the quiz checkbox.\n                    quizCheckbox.checked = questionCheckbox.checked;\n                }\n            } else {\n                // If the question is unchecked, uncheck the quiz checkbox.\n                quizCheckbox.checked = questionCheckbox.checked;\n            }\n        });\n    });\n}\n\n/**\n * Checks if all questions are checked.\n * @param {NodeList} questions\n * @returns {bool} - True if all questions are checked, false otherwise.\n */\nfunction areAllQuestionsChecked(questions) {\n    //Convert the NodeList to an array in order to use every function.\n    return Array.from(questions).every((question) => question.checked); // Returns true only if all are checked\n}\n"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","quiz_url","questionids","checkedquestions","querySelectorAll","forEach","question","checked","push","parseInt","id","get_checked_questions","length","alert","questions","update_event_listeners","catch","error","console","log","remove","call_reuse_questions","window","importQuestions","oldquizzes","filter","currentquiz","oldQuizzesContainer","noQuestions","createElement","textContent","appendChild","quiz","quiz_context","quiztitle","_ref2","quizId","quizCheckbox","questionCheckboxes","questionCheckbox","addQuizCheckboxListener","allChecked","Array","from","every","addQuestionCheckboxListener","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"qbAiBoBA,MAAOC,OAAQC,WAAYC,OACdC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,qBAgBJL,OAAQC,WAAYC,KAE5DC,SAASG,cAAc,kCACdC,iBAAiB,sCAEtBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEDC,mBAAmB,kBAAmBF,KAAMC,aA4D7CX,OAAQE,IAAKD,gBAC9BY,SAAWX,IACWC,SAASG,cAAc,eAE/BD,iBAAiB,SAASN,kBAEhCe,2BAyCRC,iBAAmB,UACPZ,SAASa,iBAAiB,aAChCC,SAASC,WACXA,SAASC,SAETJ,iBAAiBK,KAAKC,SAASH,SAASI,QAIzCP,iBAlDmBQ,MACS,IAAvBT,YAAYU,mBACZC,MAAM,kFAkBQzB,OAAQc,YAAab,WAAYY,mDAClCb,OAAQc,YAAab,YACzCO,MAAMkB,gBACCC,uBAAyB,oDACG3B,OAAQC,+DACND,OAAQC,qEAEZyB,UAAWC,4EACfd,UAAU,MAEvCe,OAAOC,OAAUC,QAAQC,IAAIF,SAClB1B,SAASG,cAAc,aAC7B0B,SA3BFC,CAAqBjC,OAAQc,YAAab,WAAYY,UACxD,MAAOgB,OACLK,OAAOJ,QAAQD,MAAM,gCACrBC,QAAQC,IAAIF,WAzERM,CAAgBnC,OAAQE,IAAKD,sEACG,mBAcZA,WAAYD,0CAC1BC,YACbO,MAAM4B,aAEHA,WAAaA,WAAWC,QAAQC,aAAgBA,YAAYtC,SAAWA,aAGnEuC,oBAAsBpC,SAASG,cAAc,kBACvB,IAAtB8B,WAAWZ,OAAc,KACrBgB,YAAcrC,SAASsC,cAAc,YACzCD,YAAYE,YAAc,+BAC1BH,oBAAoBI,YAAYH,aAKpCJ,WAAWnB,SAAS2B,WACZC,aAAe,CACf7C,OAAQ4C,KAAK5C,OACb8C,UAAWF,KAAKE,UAChBpB,UAAWkB,KAAKlB,WAEhBkB,KAAKlB,UAAUF,OAAS,sBACdjB,iBAAiB,qCAAsCsC,cAC5DrC,MAAKuC,YAACrC,KAAEA,KAAFC,GAAQA,6BACDC,mBAAmB,cAAeF,KAAMC,aAoF7CqC,YACzBC,aAAe9C,SAASG,cAAc,SAAW0C,QACjDE,mBAAqB/C,SAASa,iBAAiB,SAAWgC,OAAS,aAEvEC,aAAa5C,iBAAiB,UAAU,KACpC6C,mBAAmBjC,SAASkC,mBACxBA,iBAAiBhC,QAAU8B,aAAa9B,cAzFxBiC,CAAwBR,KAAK5C,iBAoGpBgD,YAC7BC,aAAe9C,SAASG,cAAc,SAAW0C,QACjDE,mBAAqB/C,SAASa,iBAAiB,SAAWgC,OAAS,aAEvEE,mBAAmBjC,SAASkC,mBACxBA,iBAAiB9C,iBAAiB,UAAU,QACpC8C,iBAAiBhC,QAAS,KAEtBkC,YAAa,EAmBD3B,UAlBoBwB,mBAApCG,WAoBLC,MAAMC,KAAK7B,WAAW8B,OAAOtC,UAAaA,SAASC,UAnB1CkC,aAEAJ,aAAa9B,QAAUgC,iBAAiBhC,cAI5C8B,aAAa9B,QAAUgC,iBAAiBhC,YAWxBO,gBA9HJ+B,CAA4Bb,KAAK5C,WAEpC4B,OAAOC,QAAU,2BAAiBA,eAIlDD,OAAOC,OAAUC,QAAQC,IAAIF,SA9CtB6B,CAA2BzD,WAAYD,WAI1C4B,OAAOC,QAAU,2BAAiBA,SA7BvC8B,CAAkC3D,OAAQC,WAAYC"}