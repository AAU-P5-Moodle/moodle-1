{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\nimport {add_edit_question_listeners} from \"./edit_question\";\nimport {add_delete_question_listeners} from \"./delete_question\";\nimport {displayException} from \"core/notification\";\nimport {external_reuse_questions, get_lecturer_questions} from \"./repository\";\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid, url);\n    });\n};\n\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n        // It returns a promise that needs to be resolved.\n        .then(async({html, js}) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\".main-container\", html, js);\n            await importQuestions(quizid, url, lecturerid);\n            add_discard_question_button_listener();\n            add_old_questions_to_popup(lecturerid);\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => displayException(error));\n}\n\n/**\n * Adds old questions to the import question popup.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_old_questions_to_popup(lecturerid) {\n    get_lecturer_questions(lecturerid).then((oldquestions) => {\n        oldquestions.forEach((question) => {\n            let question_div = document.createElement(\"div\");\n            question_div.innerHTML = `\n                <input type=\"checkbox\" value=\"${question.questionid}\" id=\"question_${question.questionid} \">\n                <label for=\"question_${question.questionid}\">${question.questiontitle}</label>\n                `;\n            document.querySelector(\".oldQuestions\").appendChild(question_div);\n        });\n    }).catch((error) => displayException(error));\n}\n\n/**\n * Adds an event listener to the save question button\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - THE URL of the quiz page.\n */\nfunction add_import_question_button_listener(quizid, lecturerid, url) {\n    let import_button = document.querySelector(\".import_btn\");\n    import_button.addEventListener(\"click\", importQuestions(quizid, url, lecturerid));\n}\n\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nasync function importQuestions(quizid, url, lecturerid) {\n    let quiz_url = url;\n    const importQuestionBtn = document.querySelector(\".import_btn\");\n\n    importQuestionBtn.addEventListener(\"click\", async() => {\n        console.log(\"Importing questions\");\n        try {\n            let questionids = get_checked_questions();\n            console.log(\"Checked questions: \", questionids);\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\n        } catch (error) {\n            window.console.error(\"Error in import of questions\");\n            displayException(error);\n        }\n    });\n}\n\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\n        let update_event_listeners = () => {\n            add_edit_question_listeners(quizid, lecturerid);\n            add_delete_question_listeners(quizid, lecturerid);\n        };\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\n    }). catch((error) => displayException(error));\n    let modal_div = document.querySelector(\".Modal_div\");\n    modal_div.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the values of the checked questions.\n */\nfunction get_checked_questions() {\n    let checkedquestions = [];\n    let questions_div = document.querySelector(\".oldQuestions\");\n\n    // Loop through all questions and add the value of the checked questions to the array.\n    for (let question of questions_div.children) {\n        let checkbox = question.querySelector('input[type=\"checkbox\"]');\n        if (checkbox.checked) {\n            checkedquestions.push(parseInt(checkbox.value));\n        }\n    }\n    return checkedquestions; // Returns the checked questions.\n}"],"names":["importQuestions","quizid","url","lecturerid","quiz_url","document","querySelector","addEventListener","async","console","log","questionids","checkedquestions","questions_div","question","children","checkbox","checked","push","parseInt","value","get_checked_questions","then","questions","update_event_listeners","catch","error","remove","call_reuse_questions","window","getElementById","renderForPromise","html","js","appendNodeContents","oldquestions","forEach","question_div","createElement","innerHTML","questionid","questiontitle","appendChild","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"sbAyFeA,gBAAgBC,OAAQC,IAAKC,gBACpCC,SAAWF,IACWG,SAASC,cAAc,eAE/BC,iBAAiB,SAASC,UACxCC,QAAQC,IAAI,+BAEJC,2BA6BRC,iBAAmB,GACnBC,cAAgBR,SAASC,cAAc,qBAGtC,IAAIQ,YAAYD,cAAcE,SAAU,KACrCC,SAAWF,SAASR,cAAc,0BAClCU,SAASC,SACTL,iBAAiBM,KAAKC,SAASH,SAASI,eAGzCR,iBAvCmBS,GAClBZ,QAAQC,IAAI,sBAAuBC,sBASjBV,OAAQU,YAAaR,WAAYC,mDAClCH,OAAQU,YAAaR,YAAYmB,MAAMC,gBACxDC,uBAAyB,oDACGvB,OAAQE,+DACNF,OAAQE,qEAEZoB,UAAWC,4EACfpB,UAAU,MACpCqB,OAAOC,QAAU,kCAAiBA,SACtBrB,SAASC,cAAc,cAC7BqB,SAlBFC,CAAqB3B,OAAQU,YAAaR,WAAYC,UACxD,MAAOsB,OACLG,OAAOpB,QAAQiB,MAAM,mEACJA,yBApFTlB,MAAMP,OAAQE,WAAYD,OACbG,SAASyB,eAAe,2BAC9BvB,iBAAiB,SAAS,qBAiBJN,OAAQE,WAAYD,wBAEvD6B,iBAAiB,sCAEtBT,MAAKd,MAAAA,WAAMwB,KAACA,KAADC,GAAOA,4BAELC,mBAAmB,kBAAmBF,KAAMC,UAChDjC,gBAAgBC,OAAQC,IAAKC,sFAaXA,mDACTA,YAAYmB,MAAMa,eACrCA,aAAaC,SAAStB,eACduB,aAAehC,SAASiC,cAAc,OAC1CD,aAAaE,oEACuBzB,SAAS0B,qCAA4B1B,SAAS0B,gEACvD1B,SAAS0B,wBAAe1B,SAAS2B,4CAE5DpC,SAASC,cAAc,iBAAiBoC,YAAYL,oBAEzDZ,OAAOC,QAAU,kCAAiBA,SArB7BiB,CAA2BxC,eAI9BsB,OAAOC,QAAU,kCAAiBA,SA7BnCkB,CAAkC3C,OAAQE,WAAYD"}