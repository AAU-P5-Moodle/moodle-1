{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\r\nimport {add_edit_question_listeners} from \"./edit_question\";\r\nimport {add_delete_question_listeners} from \"./delete_question\";\r\nimport {displayException} from \"core/notification\";\r\nimport {external_reuse_questions, get_lecturer_questions} from \"./repository\";\r\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\r\n\r\n/**\r\n * Adds an event listener to the \"Import Question\" button.\r\n * When the button is clicked, it renders the import question menu popup.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async(quizid, lecturerid, url) => {\r\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\r\n    import_question_button.addEventListener(\"click\", () => {\r\n        render_import_question_menu_popup(quizid, lecturerid, url);\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Renders the import question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the import question menu popup template, appends it to the main container,\r\n * Sets up event listeners for importing questions and cancelling the import.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {void} - Nothing.\r\n */\r\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\r\n    // This will call the function to load and render our template.\r\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\r\n        // It returns a promise that needs to be resolved.\r\n        .then(async({html, js}) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\".main-container\", html, js);\r\n            await importQuestions(quizid, url, lecturerid);\r\n            add_discard_question_button_listener();\r\n            add_old_questions_to_popup(lecturerid);\r\n        })\r\n\r\n        // Deal with this exception (Using core/notify exception function is recommended).\r\n        .catch((error) => console.error(error));\r\n}\r\n\r\n/**\r\n * Adds old questions to the import question popup.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n */\r\nfunction add_old_questions_to_popup(lecturerid) {\r\n    get_lecturer_questions(lecturerid).then((oldquestions) => {\r\n        oldquestions.forEach((question) => {\r\n            let question_div = document.createElement(\"div\");\r\n            question_div.innerHTML = `\r\n                <input type=\"checkbox\" value=\"${question.questionid}\" id=\"question_${question.questionid} \">\r\n                <label for=\"question_${question.questionid}\">${question.questiontitle}</label>\r\n                `;\r\n            document.querySelector(\".oldQuestions\").appendChild(question_div);\r\n        });\r\n    }).catch((error) => console.error(error));\r\n}\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nasync function importQuestions(quizid, url, lecturerid) {\r\n    let quiz_url = url;\r\n    const importQuestionBtn = document.querySelector(\".import_btn\");\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            let questionids = get_checked_questions();\r\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n            displayException(error);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Calls the external function to reuse questions.\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} questionids - The IDs of the questions to reuse.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} quiz_url - The URL of the quiz page.\r\n */\r\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\r\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\r\n        let update_event_listeners = () => {\r\n            add_edit_question_listeners(quizid, lecturerid);\r\n            add_delete_question_listeners(quizid, lecturerid);\r\n        };\r\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\r\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\r\n    }). catch((error) => displayException(error));\r\n    let modal_div = document.querySelector(\".Modal_div\");\r\n    modal_div.remove();\r\n}\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the values of the checked questions.\r\n */\r\nfunction get_checked_questions() {\r\n    let checkedquestions = [];\r\n    let questions_div = document.querySelector(\".oldQuestions\");\r\n\r\n    // Loop through all questions and add the value of the checked questions to the array.\r\n    for (let question of questions_div.children) {\r\n        let checkbox = question.querySelector('input[type=\"checkbox\"]');\r\n        if (checkbox.checked) {\r\n            checkedquestions.push(parseInt(checkbox.value));\r\n        }\r\n    }\r\n    return checkedquestions; // Returns the checked questions.\r\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quiz_url","querySelector","questionids","checkedquestions","questions_div","question","children","checkbox","checked","push","parseInt","value","get_checked_questions","questions","update_event_listeners","catch","error","remove","call_reuse_questions","window","console","importQuestions","oldquestions","forEach","question_div","createElement","innerHTML","questionid","questiontitle","appendChild","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"qbAiBoBA,MAAMC,OAAQC,WAAYC,OACbC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,qBAiBJL,OAAQC,WAAYC,wBAEvDI,iBAAiB,sCAEtBC,MAAKR,MAAAA,WAAMS,KAACA,KAADC,GAAOA,4BAELC,mBAAmB,kBAAmBF,KAAMC,yBAmCnCT,OAAQE,IAAKD,gBACpCU,SAAWT,IACWC,SAASS,cAAc,eAE/BP,iBAAiB,SAASN,kBAEhCc,2BAmCRC,iBAAmB,GACnBC,cAAgBZ,SAASS,cAAc,qBAGtC,IAAII,YAAYD,cAAcE,SAAU,KACrCC,SAAWF,SAASJ,cAAc,0BAClCM,SAASC,SACTL,iBAAiBM,KAAKC,SAASH,SAASI,eAGzCR,iBA7CmBS,aAgBAvB,OAAQa,YAAaZ,WAAYU,mDAClCX,OAAQa,YAAaZ,YAAYM,MAAMiB,gBACxDC,uBAAyB,oDACGzB,OAAQC,+DACND,OAAQC,qEAEZuB,UAAWC,4EACfd,UAAU,MACpCe,OAAOC,QAAU,kCAAiBA,SACtBxB,SAASS,cAAc,cAC7BgB,SAzBFC,CAAqB7B,OAAQa,YAAaZ,WAAYU,UACxD,MAAOgB,OACLG,OAAOC,QAAQJ,MAAM,mEACJA,WA5CXK,CAAgBhC,OAAQE,IAAKD,sFAaXA,mDACTA,YAAYM,MAAM0B,eACrCA,aAAaC,SAASlB,eACdmB,aAAehC,SAASiC,cAAc,OAC1CD,aAAaE,oEACuBrB,SAASsB,qCAA4BtB,SAASsB,gEACvDtB,SAASsB,wBAAetB,SAASuB,4CAE5DpC,SAASS,cAAc,iBAAiB4B,YAAYL,oBAEzDT,OAAOC,OAAUI,QAAQJ,MAAMA,SArB1Bc,CAA2BxC,eAI9ByB,OAAOC,OAAUI,QAAQJ,MAAMA,SA7BhCe,CAAkC1C,OAAQC,WAAYC"}