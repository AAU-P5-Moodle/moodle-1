{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\nimport {add_edit_question_listeners} from \"./edit_question\";\nimport {add_delete_question_listeners} from \"./delete_question\";\nimport {displayException} from \"core/notification\";\nimport {external_reuse_questions, get_lecturer_quiz} from \"./repository\";\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid, url);\n    });\n};\n\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n        // It returns a promise that needs to be resolved.\n        .then(async({html, js}) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\".main-container\", html, js);\n            await importQuestions(quizid, url, lecturerid);\n            add_discard_question_button_listener();\n            add_old_questions_to_popup(lecturerid);\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => console.log(error));\n}\n\n/**\n * Adds old questions to the import question popup.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_old_questions_to_popup(lecturerid) {\n    get_lecturer_quiz(lecturerid).then((oldquizzes) => {\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\n        if (oldquizzes.length === 0) {\n            let noQuestions = document.createElement(\"p\");\n            noQuestions.textContent = \"No questions available.\";\n            oldQuizzesContainer.appendChild(noQuestions);\n            return;\n        }\n        oldquizzes.forEach((quiz) => {\n            let quiz_div = document.createElement('div');\n            //Create quiz checkbox\n            let quiz_checkbox = document.createElement('input');\n            quiz_checkbox.type = \"checkbox\";\n            quiz_checkbox.value = quiz.quizid;\n            quiz_checkbox.id = quiz.quizid;\n            quiz_checkbox.name = quiz.quiztitle;\n            // Create quiz Label\n            let quiz_label = document.createElement('label');\n            quiz_label.htmlFor = `quiz_${quiz.quizid}`;\n            quiz_label.textContent = quiz.quiztitle;\n            quiz_div.class = \"oldquiz\"; // Might be used for styling.\n\n            // Append the checkbox and label to the div.\n            quiz_div.appendChild(quiz_checkbox);\n            quiz_div.appendChild(quiz_label);\n            // Set the border style\n            quiz_div.style.border = \"2px solid black\";\n            // Create container for questions.\n            let questions_div = document.createElement(\"div\");\n            questions_div.style.marginBottom = \"20px\";\n            questions_div.id = \"questionsdiv\"\n            // Loop through each question and add it to the container.\n            quiz.questions.forEach((question) => {\n                //Create question checkbox\n                let question_div = document.createElement('div');\n                let question_checkbox = document.createElement('input');\n                question_checkbox.type = \"checkbox\";\n                question_checkbox.value = `question_${question.questionid}`;\n                question_checkbox.id = question.questionid;\n                question_checkbox.name = question.questiontitle;\n                // Create question Label\n                let question_label = document.createElement('label');\n                question_label.htmlFor = `question_${question.questionid}`;\n                question_label.textContent = question.questiontitle;\n                question_div.appendChild(question_checkbox);\n                question_div.appendChild(question_label);\n                questions_div.appendChild(question_div);\n            });\n            quiz_div.appendChild(questions_div);\n            oldQuizzesContainer.appendChild(quiz_div);\n        });\n    }).catch((error) => console.log(error));\n}\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nasync function importQuestions(quizid, url, lecturerid) {\n    let quiz_url = url;\n    const importQuestionBtn = document.querySelector(\".import_btn\");\n\n    importQuestionBtn.addEventListener(\"click\", async() => {\n        try {\n            let questionids = get_checked_questions();\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\n        } catch (error) {\n            window.console.error(\"Error in import of questions\");\n            console.log(error);\n        }\n    });\n}\n\n/**\n * Calls the external function to reuse questions.\n * @param {number} quizid - The ID of the quiz.\n * @param {number} questionids - The IDs of the questions to reuse.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} quiz_url - The URL of the quiz page.\n */\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\n        let update_event_listeners = () => {\n            add_edit_question_listeners(quizid, lecturerid);\n            add_delete_question_listeners(quizid, lecturerid);\n        };\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\n    }). catch((error) => displayException(error));\n    let modal_div = document.querySelector(\".Modal_div\");\n    modal_div.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the values of the checked questions.\n */\nfunction get_checked_questions() {\n    let checkedquestions = [];\n    let questions_div = document.querySelector(\".oldQuizzes\");\n\n    // Loop through all quizzes and get the checked questions.\n    // This selects all the checked checkboxes that are nested three levels deep of divs.\n    let quizDivs = questions_div.querySelectorAll('div > div > div > input[type=\"checkbox\"]:checked');\n    quizDivs.forEach(checkbox => { // Loop through each checked checkbox and add it to the array.\n        checkedquestions.push(parseInt(checkbox.id));\n    });\n    return checkedquestions; // Returns the checked questions.\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quiz_url","querySelector","questionids","checkedquestions","querySelectorAll","forEach","checkbox","push","parseInt","id","get_checked_questions","questions","update_event_listeners","catch","error","remove","call_reuse_questions","window","console","log","importQuestions","oldquizzes","oldQuizzesContainer","length","noQuestions","createElement","textContent","appendChild","quiz","quiz_div","quiz_checkbox","type","value","name","quiztitle","quiz_label","htmlFor","class","style","border","questions_div","marginBottom","question","question_div","question_checkbox","questionid","questiontitle","question_label","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"qbAiBoBA,MAAMC,OAAQC,WAAYC,OACbC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,qBAiBJL,OAAQC,WAAYC,wBAEvDI,iBAAiB,sCAEtBC,MAAKR,MAAAA,WAAMS,KAACA,KAADC,GAAOA,4BAELC,mBAAmB,kBAAmBF,KAAMC,yBA4EnCT,OAAQE,IAAKD,gBACpCU,SAAWT,IACWC,SAASS,cAAc,eAE/BP,iBAAiB,SAASN,kBAEhCc,2BAmCRC,iBAAmB,UACHX,SAASS,cAAc,eAIdG,iBAAiB,oDACrCC,SAAQC,WACbH,iBAAiBI,KAAKC,SAASF,SAASG,QAErCN,iBA5CmBO,aAgBArB,OAAQa,YAAaZ,WAAYU,mDAClCX,OAAQa,YAAaZ,YAAYM,MAAMe,gBACxDC,uBAAyB,oDACGvB,OAAQC,+DACND,OAAQC,qEAEZqB,UAAWC,4EACfZ,UAAU,MACpCa,OAAOC,QAAU,kCAAiBA,SACtBtB,SAASS,cAAc,cAC7Bc,SAzBFC,CAAqB3B,OAAQa,YAAaZ,WAAYU,UACxD,MAAOc,OACLG,OAAOC,QAAQJ,MAAM,gCACrBI,QAAQC,IAAIL,WArFNM,CAAgB/B,OAAQE,IAAKD,sFAaXA,8CACdA,YAAYM,MAAMyB,iBAC5BC,oBAAsB9B,SAASS,cAAc,kBACvB,IAAtBoB,WAAWE,OAAc,KACrBC,YAAchC,SAASiC,cAAc,YACzCD,YAAYE,YAAc,+BAC1BJ,oBAAoBK,YAAYH,aAGpCH,WAAWhB,SAASuB,WACZC,SAAWrC,SAASiC,cAAc,OAElCK,cAAgBtC,SAASiC,cAAc,SAC3CK,cAAcC,KAAO,WACrBD,cAAcE,MAAQJ,KAAKvC,OAC3ByC,cAAcrB,GAAKmB,KAAKvC,OACxByC,cAAcG,KAAOL,KAAKM,cAEtBC,WAAa3C,SAASiC,cAAc,SACxCU,WAAWC,uBAAkBR,KAAKvC,QAClC8C,WAAWT,YAAcE,KAAKM,UAC9BL,SAASQ,MAAQ,UAGjBR,SAASF,YAAYG,eACrBD,SAASF,YAAYQ,YAErBN,SAASS,MAAMC,OAAS,sBAEpBC,cAAgBhD,SAASiC,cAAc,OAC3Ce,cAAcF,MAAMG,aAAe,OACnCD,cAAc/B,GAAK,eAEnBmB,KAAKjB,UAAUN,SAASqC,eAEhBC,aAAenD,SAASiC,cAAc,OACtCmB,kBAAoBpD,SAASiC,cAAc,SAC/CmB,kBAAkBb,KAAO,WACzBa,kBAAkBZ,yBAAoBU,SAASG,YAC/CD,kBAAkBnC,GAAKiC,SAASG,WAChCD,kBAAkBX,KAAOS,SAASI,kBAE9BC,eAAiBvD,SAASiC,cAAc,SAC5CsB,eAAeX,2BAAsBM,SAASG,YAC9CE,eAAerB,YAAcgB,SAASI,cACtCH,aAAahB,YAAYiB,mBACzBD,aAAahB,YAAYoB,gBACzBP,cAAcb,YAAYgB,iBAE9Bd,SAASF,YAAYa,eACrBlB,oBAAoBK,YAAYE,gBAErChB,OAAOC,OAAUI,QAAQC,IAAIL,SA/DxBkC,CAA2B1D,eAI9BuB,OAAOC,OAAUI,QAAQC,IAAIL,SA7B9BmC,CAAkC5D,OAAQC,WAAYC"}