{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\r\nimport {add_edit_question_listeners} from \"./edit_question\";\r\nimport {add_delete_question_listeners} from \"./delete_question\";\r\n/**\r\n * Adds an event listener to the \"Import Question\" button.\r\n * When the button is clicked, it renders the import question menu popup.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async (quizid, lecturerid, url) => {\r\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\r\n    import_question_button.addEventListener(\"click\", () => {\r\n        render_import_question_menu_popup(quizid, lecturerid);\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Renders the import question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the import question menu popup template, appends it to the main container,\r\n * Sets up event listeners for importing questions and cancelling the import.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {void}\r\n */\r\nfunction render_import_question_menu_popup(quizid, lecturerid, url) {\r\n    // This will call the function to load and render our template.\r\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\r\n\r\n        // It returns a promise that needs to be resoved.\r\n        .then(({ html, js }) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\".main-container\", html, js);\r\n            add_import_question_button_listener(quizid, lecturerid, url);\r\n            add_discard_question_button_listener();\r\n        })\r\n\r\n        // Deal with this exception (Using core/notify exception function is recommended).\r\n        .catch((error) => displayException(error));\r\n}\r\n\r\n/**\r\n * Adds an event listener to the save question button\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param url\r\n */\r\nfunction add_import_question_button_listener(quizid, lecturerid, url) {\r\n    let save_question_button = document.querySelector(\".save_button\");\r\n    save_question_button.addEventListener(\"click\", importQuestions(quizid, url, lecturerid));\r\n}\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nfunction importQuestions(quizid, url, lecturerid){\r\n    quiz_url = url; //Set url to quiz attempt page to global variable\r\n    const importQuestionBtn = document.getElementById(\"importQuestionBtn\");\r\n    $questionids = get_checked_questions();\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            await external_reuse_questions(quizid, questionids).then((questions) => {\r\n                let update_event_listeners = () => {\r\n                    add_edit_question_listeners(quizid, lecturerid);\r\n                    add_delete_question_listeners(quizid, lecturerid);\r\n                }\r\n                rerender_saved_questions_list(questions, update_event_listeners); //Re-render saved questions list\r\n                rerender_take_quiz_button(quiz_url, true); //Re-render take quiz button\r\n            });\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the values of the checked questions.\r\n */\r\nfunction get_checked_questions() {\r\n    let checkedquestions = [];\r\n    let questions_div = document.querySelector(\".all_questions_for_lecturer_div\");\r\n\r\n    // Loop through all questions and add the value of the checked questions to the array.\r\n    for (let question of questions_div.children) {\r\n        let checkbox = question.querySelector('input[type=\"checkbox\"]')\r\n        if (checkbox.checked){\r\n            checkedquestions.push(parseInt(checkbox.value));\r\n        }\r\n    };\r\n    return checkedquestions; // Returns the checked questions.\r\n};"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","querySelector","quiz_url","importQuestionBtn","$questionids","checkedquestions","questions_div","question","children","checkbox","checked","push","parseInt","value","get_checked_questions","external_reuse_questions","questionids","questions","update_event_listeners","rerender_take_quiz_button","error","window","console","importQuestions","add_import_question_button_listener","catch","displayException","render_import_question_menu_popup"],"mappings":"wXAaoBA,MAAOC,OAAQC,WAAYC,OACdC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,eAgBVL,OAAQC,WAAYC,wBAEjDI,iBAAiB,sCAGtBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEDC,mBAAmB,kBAAmBF,KAAMC,aAgBrBV,OAAQC,WAAYC,KAClCC,SAASS,cAAc,gBAC7BP,iBAAiB,iBAWjBL,OAAQE,IAAKD,YAClCY,SAAWX,UACLY,kBAAoBX,SAASC,eAAe,qBAClDW,4BAwBIC,iBAAmB,GACnBC,cAAgBd,SAASS,cAAc,uCAGtC,IAAIM,YAAYD,cAAcE,SAAU,KACrCC,SAAWF,SAASN,cAAc,0BAClCQ,SAASC,SACTL,iBAAiBM,KAAKC,SAASH,SAASI,eAGzCR,iBAlCQS,GAEfX,kBAAkBT,iBAAiB,SAASN,oBAE9B2B,yBAAyB1B,OAAQ2B,aAAapB,MAAMqB,gBAClDC,uBAAyB,oDACG7B,OAAQC,+DACND,OAAQC,qEAEZ2B,UAAWC,wBACzCC,0BAA0BjB,UAAU,MAE1C,MAAOkB,OACLC,OAAOC,QAAQF,MAAM,oCA3BkBG,CAAgBlC,OAAQE,IAAKD,aAjBpEkC,CAAoCnC,OAAQC,WAAYC,yEAK3DkC,OAAOL,OAAUM,iBAAiBN,SA5BnCO,CAAkCtC,OAAQC"}