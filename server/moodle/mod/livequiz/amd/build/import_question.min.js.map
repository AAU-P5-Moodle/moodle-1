{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {add_discard_question_button_listener} from \"./edit_question_helper\";\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async (quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid);\n    });\n\n};\n\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {void}\n */\nfunction render_import_question_menu_popup(quizid, lecturerid) {\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n\n        // It returns a promise that needs to be resoved.\n        .then(({ html, js }) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\".main-container\", html, js);\n            add_import_question_button_listener(quizid, lecturerid);\n            add_discard_question_button_listener();\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => displayException(error));\n}\n\n/**\n * Adds an event listener to the save question button\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_import_question_button_listener(quizid, lecturerid) {\n    let save_question_button = document.querySelector(\".save_button\");\n    save_question_button.addEventListener(\"click\", () => {\n\n    });\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","querySelector","catch","error","displayException"],"mappings":"kTAWoBA,MAAOC,OAAQC,WAAYC,OACdC,SAASC,eAAe,2BAC9BC,iBAAiB,SAAS,wBAmBvCC,iBAAiB,sCAGtBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEDC,mBAAmB,kBAAmBF,KAAMC,IAgBnCP,SAASS,cAAc,gBAC7BP,iBAAiB,SAAS,6EAX1CQ,OAAOC,OAAUC,iBAAiBD"}