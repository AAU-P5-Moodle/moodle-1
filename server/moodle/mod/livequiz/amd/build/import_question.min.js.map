{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\nimport {add_edit_question_listeners} from \"./edit_question\";\nimport {add_delete_question_listeners} from \"./delete_question\";\nimport {displayException} from \"core/notification\";\nimport {external_reuse_questions, get_lecturer_quiz} from \"./repository\";\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\n\n/**\n * Adds an event listener to the \"Import Question\" button.\n * When the button is clicked, it renders the import question menu popup.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\n */\nexport const init = async(quizid, lecturerid, url) => {\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\n    import_question_button.addEventListener(\"click\", () => {\n        render_import_question_menu_popup(quizid, lecturerid, url);\n    });\n};\n\n\n/**\n * Renders the import question menu popup for a live quiz.\n *\n * This function loads and renders the import question menu popup template, appends it to the main container,\n * Sets up event listeners for importing questions and cancelling the import.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} url - The URL to the quiz attempt page.\n * @returns {void} - Nothing.\n */\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\n        // It returns a promise that needs to be resolved.\n        .then(async({html, js}) => {\n            // Here we have compiled template.\n            Templates.appendNodeContents(\".main-container\", html, js);\n            await importQuestions(quizid, url, lecturerid);\n            add_discard_question_button_listener();\n            add_old_questions_to_popup(lecturerid);\n        })\n\n        // Deal with this exception (Using core/notify exception function is recommended).\n        .catch((error) => console.log(error));\n}\n\n/**\n * Adds old questions to the import question popup.\n * @param {number} lecturerid - The ID of the lecturer.\n */\nfunction add_old_questions_to_popup(lecturerid) {\n    get_lecturer_quiz(lecturerid).then((oldquizzes) => {\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\n        if (oldquizzes.length === 0) {\n            let noQuestions = document.createElement(\"p\");\n            noQuestions.textContent = \"No questions available.\";\n            oldQuizzesContainer.appendChild(noQuestions);\n            return;\n        }\n        oldquizzes.forEach((quiz) => {\n            let question_checkboxes = [];\n            let quiz_div = document.createElement('div');\n            //Create quiz checkbox.\n            let quiz_checkbox = document.createElement('input');\n            quiz_checkbox.type = \"checkbox\";\n            quiz_checkbox.value = quiz.quizid;\n            quiz_checkbox.id = quiz.quizid;\n            quiz_checkbox.name = quiz.quiztitle;\n            // Create quiz Label.\n            let quiz_label = document.createElement('label');\n            quiz_label.htmlFor = `quiz_${quiz.quizid}`;\n            quiz_label.textContent = quiz.quiztitle;\n            quiz_div.class = \"oldquiz\"; // Might be used for styling.\n\n            // Append the checkbox and label to the div.\n            quiz_div.appendChild(quiz_checkbox);\n            quiz_div.appendChild(quiz_label);\n            // Set the border style\n            quiz_div.style.border = \"2px solid black\";\n            // Create container for questions.\n            let questions_div = document.createElement(\"div\");\n            questions_div.style.marginBottom = \"20px\";\n            questions_div.id = \"questionsdiv\";\n            // Loop through each question and add it to the container.\n            quiz.questions.forEach((question) => {\n                //Create question checkbox.\n                let question_div = document.createElement('div');\n                let question_checkbox = document.createElement('input');\n                question_checkbox.type = \"checkbox\";\n                question_checkbox.value = `question_${question.questionid}`;\n                question_checkbox.id = question.questionid;\n                question_checkbox.name = question.questiontitle;\n                question_checkboxes.push(question_checkbox);\n                // Create question Label.\n                let question_label = document.createElement('label');\n                question_label.htmlFor = `question_${question.questionid}`;\n                question_label.textContent = question.questiontitle;\n                question_div.appendChild(question_checkbox);\n                question_div.appendChild(question_label);\n                questions_div.appendChild(question_div);\n            });\n            add_quiz_checkbox_listener(quiz_checkbox, question_checkboxes);\n            add_question_checkbox_listener(quiz_checkbox, question_checkboxes);\n            quiz_div.appendChild(questions_div);\n            oldQuizzesContainer.appendChild(quiz_div);\n        });\n    }).catch((error) => console.log(error));\n}\n\n/**\n * Imports questions into a quiz.\n *\n * @param {number} quizid - The ID of the quiz.\n * @param {string} url - The URL of the quiz page.\n * @param {number} lecturerid - The ID of the lecturer.\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\n */\nasync function importQuestions(quizid, url, lecturerid) {\n    let quiz_url = url;\n    const importQuestionBtn = document.querySelector(\".import_btn\");\n\n    importQuestionBtn.addEventListener(\"click\", async() => {\n        try {\n            let questionids = get_checked_questions();\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\n        } catch (error) {\n            window.console.error(\"Error in import of questions\");\n            console.log(error);\n        }\n    });\n}\n\n/**\n * Calls the external function to reuse questions.\n * @param {number} quizid - The ID of the quiz.\n * @param {number} questionids - The IDs of the questions to reuse.\n * @param {number} lecturerid - The ID of the lecturer.\n * @param {string} quiz_url - The URL of the quiz page.\n */\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\n        let update_event_listeners = () => {\n            add_edit_question_listeners(quizid, lecturerid);\n            add_delete_question_listeners(quizid, lecturerid);\n        };\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\n    }). catch((error) => console.log(error));\n    let modal_div = document.querySelector(\".Modal_div\");\n    modal_div.remove();\n}\n\n/**\n * Retrieves the values of all checked questions from the lecturer's question list.\n *\n * @returns {Array<number>} An array containing the values of the checked questions.\n */\nfunction get_checked_questions() {\n    let checkedquestions = [];\n    let questions_div = document.querySelector(\".oldQuizzes\");\n\n    // Loop through all quizzes and get the checked questions.\n    for (let quiz_div of questions_div.children) { // Loop through all quizzes.\n        for (let content of quiz_div.children) { // Loop through all content of the quiz.\n            if (content.tagName === \"DIV\") { // Only look in div elements\n                for (let question_div of content.children) { // Loop through all questions.\n                    for (let children of question_div.children) { // Loop through all children of the question.\n                        if (children.tagName === \"INPUT\") { // Only look in input elements.\n                            let checkbox = children;\n                            if (checkbox.checked) { // If the checkbox is checked, add the id to the array.\n                                checkedquestions.push(parseInt(checkbox.id));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return checkedquestions; // Returns the checked questions.\n}\n\n/**\n * Adds an event listener to the quiz checkboxes.\n * @param checkbox - The checkbox to add the event listener to.\n * @param questioncheckboxes - The question checkboxes that are manipulated when event is triggered.\n */\nfunction add_quiz_checkbox_listener(checkbox, questioncheckboxes){\n    checkbox.addEventListener(\"change\", () => {\n        questioncheckboxes.forEach((questioncheckbox) => {\n            questioncheckbox.checked = checkbox.checked; // Set all questions to checked if the quiz is checked.\n        });\n    });\n}\n\n/**\n * Adds an event listener to the question checkboxes.\n * @param checkbox - The checkbox that is manipulated when all questions are checked.\n * @param questioncheckboxes - The question checkboxes to add the event listener to.\n */\nfunction add_question_checkbox_listener(checkbox, questioncheckboxes){\n    questioncheckboxes.forEach((questioncheckbox) => {\n        questioncheckbox.addEventListener(\"change\", () => {\n            if(questioncheckbox.checked) { // If the question is checked, check if all questions are checked.\n                let checkboxes_same = false;\n                checkboxes_same = check_questions_checked(questioncheckboxes);\n                if (checkboxes_same) { // If all questions are checked, check the quiz checkbox.\n                    checkbox.checked = questioncheckbox.checked;\n                }\n            } else { // If the question is unchecked, uncheck the quiz checkbox.\n                checkbox.checked = questioncheckbox.checked;\n            }\n        });\n    });\n}\n\n/**\n * Checks if all questions are checked.\n * @param questions\n * @returns {bool} - True if all questions are checked, false otherwise.\n */\nfunction check_questions_checked(questions) {\n    return questions.every((question) => question.checked); // Returns true only if all are checked\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quiz_url","querySelector","questionids","checkedquestions","questions_div","quiz_div","children","content","tagName","question_div","checkbox","checked","push","parseInt","id","get_checked_questions","questions","update_event_listeners","catch","error","console","log","remove","call_reuse_questions","window","importQuestions","oldquizzes","oldQuizzesContainer","length","noQuestions","createElement","textContent","appendChild","forEach","quiz","question_checkboxes","quiz_checkbox","type","value","name","quiztitle","quiz_label","htmlFor","class","style","border","questioncheckboxes","marginBottom","question","question_checkbox","questionid","questiontitle","question_label","questioncheckbox","checkboxes_same","every","add_question_checkbox_listener","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"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"}