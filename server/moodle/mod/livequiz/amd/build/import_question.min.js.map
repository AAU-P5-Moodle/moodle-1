{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport {add_cancel_edit_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\r\nimport {add_edit_question_listeners} from \"./edit_question\";\r\nimport {add_delete_question_listeners} from \"./delete_question\";\r\nimport {displayException} from \"core/notification\";\r\nimport {external_reuse_questions, get_lecturer_quiz} from \"./repository\";\r\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\r\n\r\n/**\r\n * Adds an event listener to the \"Import Question\" button.\r\n * When the button is clicked, it renders the import question menu popup.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async (quizid, lecturerid, url) => {\r\n  let import_question_button = document.getElementById(\r\n    \"id_buttonimportquestion\"\r\n  );\r\n  import_question_button.addEventListener(\"click\", () => {\r\n    render_import_question_menu_popup(quizid, lecturerid, url);\r\n  });\r\n};\r\n\r\n/**\r\n * Renders the import question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the import question menu popup template, appends it to the main container,\r\n * Sets up event listeners for importing questions and cancelling the import.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {void} - Nothing.\r\n */\r\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\r\n  // This will call the function to load and render our template.\r\n  if (!document.querySelector(\".Modal_div\")) {\r\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\r\n        // It returns a promise that needs to be resolved.\r\n        .then(async({html, js}) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\".main-container\", html, js);\r\n            await importQuestions(quizid, url, lecturerid);\r\n            add_cancel_edit_button_listener(\"import\");\r\n            add_old_questions_to_popup(lecturerid, quizid);\r\n        })\r\n\r\n      // Deal with this exception (Using core/notify exception function is recommended).\r\n      .catch((error) => displayException(error));\r\n  }\r\n}\r\n\r\n/**\r\n * Adds old questions to the import question popup.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {number} quizid - The ID of the quiz.\r\n */\r\nfunction add_old_questions_to_popup(lecturerid, quizid) {\r\n    get_lecturer_quiz(lecturerid).then((oldquizzes) => {\r\n        oldquizzes = oldquizzes.filter(currentquiz => currentquiz.quizid !== quizid);\r\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\r\n        if (oldquizzes.length === 0) {\r\n            let noQuestions = document.createElement(\"p\");\r\n            noQuestions.textContent = \"No questions available.\";\r\n            oldQuizzesContainer.appendChild(noQuestions);\r\n            return;\r\n        }\r\n        oldquizzes.forEach((quiz) => { // Loop through all quizzes.\r\n            if (quiz.questions.length > 0) {\r\n                let question_checkboxes = [];\r\n                let quiz_div = document.createElement('div');\r\n                //Create quiz checkbox.\r\n                let quiz_checkbox = document.createElement('input');\r\n                quiz_checkbox.type = \"checkbox\";\r\n                quiz_checkbox.value = quiz.quizid;\r\n                quiz_checkbox.id = quiz.quizid;\r\n                quiz_checkbox.style.marginRight = \"5px\"; // Add margin so the text is not too close to the checkbox.\r\n                quiz_checkbox.name = quiz.quiztitle;\r\n                // Create quiz Label.\r\n                let quiz_label = document.createElement('label');\r\n                quiz_label.htmlFor = `quiz_${quiz.quizid}`;\r\n                quiz_label.textContent = quiz.quiztitle;\r\n                quiz_label.style.fontWeight = \"bold\"; // Make the quiz title bold.\r\n                quiz_div.class = \"oldquiz\"; // Might be used for styling.\r\n\r\n                // Append the checkbox and label to the div.\r\n                quiz_div.appendChild(quiz_checkbox);\r\n                quiz_div.appendChild(quiz_label);\r\n                // Set the border style\r\n                quiz_div.style.border = \"2px solid black\";\r\n                // Create container for questions.\r\n                let questions_div = document.createElement(\"div\");\r\n                questions_div.style.marginBottom = \"20px\";\r\n                questions_div.style.marginLeft = \"20px\"; // Add margin to the left so the questions are indented.\r\n                questions_div.id = \"questionsdiv\";\r\n                // Loop through each question and add it to the container.\r\n                quiz.questions.forEach((question) => {\r\n                    //Create question checkbox.\r\n                    let question_div = document.createElement('div');\r\n                    let question_checkbox = document.createElement('input');\r\n                    question_checkbox.type = \"checkbox\";\r\n                    question_checkbox.value = `question_${question.questionid}`;\r\n                    question_checkbox.style.marginRight = \"5px\"; // Add margin so the text is not too close to the checkbox.\r\n                    question_checkbox.id = question.questionid;\r\n                    question_checkbox.name = question.questiontitle;\r\n                    question_checkboxes.push(question_checkbox);\r\n                    // Create question Label.\r\n                    let question_label = document.createElement('label');\r\n                    question_label.htmlFor = `question_${question.questionid}`;\r\n                    question_label.textContent = question.questiontitle;\r\n\r\n                    question_div.appendChild(question_checkbox);\r\n                    question_div.appendChild(question_label);\r\n                    questions_div.appendChild(question_div);\r\n                });\r\n                add_quiz_checkbox_listener(quiz_checkbox, question_checkboxes);\r\n                add_question_checkbox_listener(quiz_checkbox, question_checkboxes);\r\n                quiz_div.appendChild(questions_div);\r\n                oldQuizzesContainer.appendChild(quiz_div);\r\n            }\r\n        });\r\n    }).catch((error) => console.log(error));\r\n}\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nasync function importQuestions(quizid, url, lecturerid) {\r\n  let quiz_url = url;\r\n  const importQuestionBtn = document.querySelector(\".import_btn\");\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            let questionids = get_checked_questions();\r\n            if (questionids.length === 0) {\r\n                alert(\"No questions selected. Pleas choose at least one question to import.\")\r\n                return;\r\n            }\r\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n            console.log(error);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Calls the external function to reuse questions.\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {array} questionids - The IDs of the questions to reuse.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} quiz_url - The URL of the quiz page.\r\n */\r\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\r\n  external_reuse_questions(quizid, questionids, lecturerid)\r\n    .then((questions) => {\r\n      let update_event_listeners = () => {\r\n        add_edit_question_listeners(quizid, lecturerid);\r\n        add_delete_question_listeners(quizid, lecturerid);\r\n      };\r\n      rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\r\n      rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\r\n    })\r\n    .catch((error) => console.log(error));\r\n  let modal_div = document.querySelector(\".backdrop\");\r\n  modal_div.remove();\r\n}\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the ids of the checked questions.\r\n */\r\nfunction get_checked_questions() {\r\n  let checkedquestions = [];\r\n  let questions_div = document.querySelector(\".oldQuizzes\");\r\n\r\n  // Loop through all quizzes and get the checked questions.\r\n  for (let quiz_div of questions_div.children) {\r\n    // Loop through all quizzes.\r\n    for (let content of quiz_div.children) {\r\n      // Loop through all content of the quiz.\r\n      if (content.tagName === \"DIV\") {\r\n        // Only look in div elements\r\n        for (let question_div of content.children) {\r\n          // Loop through all questions.\r\n          for (let children of question_div.children) {\r\n            // Loop through all children of the question.\r\n            if (children.tagName === \"INPUT\") {\r\n              // Only look in input elements.\r\n              let checkbox = children;\r\n              if (checkbox.checked) {\r\n                // If the checkbox is checked, add the id to the array.\r\n                checkedquestions.push(parseInt(checkbox.id));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return checkedquestions; // Returns the checked questions.\r\n}\r\n\r\n/**\r\n * Adds an event listener to the quiz checkboxes.\r\n * @param checkbox - The checkbox to add the event listener to.\r\n * @param questioncheckboxes - The question checkboxes that are manipulated when event is triggered.\r\n */\r\nfunction add_quiz_checkbox_listener(checkbox, questioncheckboxes) {\r\n  checkbox.addEventListener(\"change\", () => {\r\n    questioncheckboxes.forEach((questioncheckbox) => {\r\n      questioncheckbox.checked = checkbox.checked; // Set all questions to checked if the quiz is checked.\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Adds an event listener to the question checkboxes.\r\n * @param checkbox - The checkbox that is manipulated when all questions are checked.\r\n * @param questioncheckboxes - The question checkboxes to add the event listener to.\r\n */\r\nfunction add_question_checkbox_listener(checkbox, questioncheckboxes) {\r\n  questioncheckboxes.forEach((questioncheckbox) => {\r\n    questioncheckbox.addEventListener(\"change\", () => {\r\n      if (questioncheckbox.checked) {\r\n        // If the question is checked, check if all questions are checked.\r\n        let checkboxes_same = false;\r\n        checkboxes_same = check_questions_checked(questioncheckboxes);\r\n        if (checkboxes_same) {\r\n          // If all questions are checked, check the quiz checkbox.\r\n          checkbox.checked = questioncheckbox.checked;\r\n        }\r\n      } else {\r\n        // If the question is unchecked, uncheck the quiz checkbox.\r\n        checkbox.checked = questioncheckbox.checked;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Checks if all questions are checked.\r\n * @param questions\r\n * @returns {bool} - True if all questions are checked, false otherwise.\r\n */\r\nfunction check_questions_checked(questions) {\r\n  return questions.every((question) => question.checked); // Returns true only if all are checked\r\n}\r\n"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","querySelector","renderForPromise","then","html","js","appendNodeContents","quiz_url","questionids","checkedquestions","questions_div","quiz_div","children","content","tagName","question_div","checkbox","checked","push","parseInt","id","get_checked_questions","length","alert","questions","update_event_listeners","catch","error","console","log","remove","call_reuse_questions","window","importQuestions","oldquizzes","filter","currentquiz","oldQuizzesContainer","noQuestions","createElement","textContent","appendChild","forEach","quiz","question_checkboxes","quiz_checkbox","type","value","style","marginRight","name","quiztitle","quiz_label","htmlFor","fontWeight","class","border","marginBottom","marginLeft","question","question_checkbox","questionid","questiontitle","question_label","questioncheckboxes","questioncheckbox","checkboxes_same","every","add_question_checkbox_listener","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"qbAiBoBA,MAAOC,OAAQC,WAAYC,OAChBC,SAASC,eACpC,2BAEqBC,iBAAiB,SAAS,qBAgBFL,OAAQC,WAAYC,KAE9DC,SAASG,cAAc,kCAChBC,iBAAiB,sCAEtBC,MAAKT,MAAAA,WAAMU,KAACA,KAADC,GAAOA,4BAELC,mBAAmB,kBAAmBF,KAAMC,yBA2FnCV,OAAQE,IAAKD,gBACtCW,SAAWV,IACWC,SAASG,cAAc,eAE7BD,iBAAiB,SAASN,kBAEhCc,2BAyCVC,iBAAmB,GACnBC,cAAgBZ,SAASG,cAAc,mBAGtC,IAAIU,YAAYD,cAAcE,aAE5B,IAAIC,WAAWF,SAASC,YAEH,QAApBC,QAAQC,YAEL,IAAIC,gBAAgBF,QAAQD,aAE1B,IAAIA,YAAYG,aAAaH,YAEP,UAArBA,SAASE,QAAqB,KAE5BE,SAAWJ,SACXI,SAASC,SAEXR,iBAAiBS,KAAKC,SAASH,SAASI,YAQ/CX,iBApEqBY,MACS,IAAvBb,YAAYc,mBACZC,MAAM,kFAkBQ5B,OAAQa,YAAaZ,WAAYW,mDACpCZ,OAAQa,YAAaZ,YAC3CO,MAAMqB,gBACDC,uBAAyB,oDACC9B,OAAQC,+DACND,OAAQC,qEAEV4B,UAAWC,4EACflB,UAAU,MAErCmB,OAAOC,OAAUC,QAAQC,IAAIF,SAChB7B,SAASG,cAAc,aAC7B6B,SA3BAC,CAAqBpC,OAAQa,YAAaZ,WAAYW,UACxD,MAAOoB,OACLK,OAAOJ,QAAQD,MAAM,gCACrBC,QAAQC,IAAIF,WAxGNM,CAAgBtC,OAAQE,IAAKD,sEACH,mBAcRA,WAAYD,0CAC1BC,YAAYO,MAAM+B,aAChCA,WAAaA,WAAWC,QAAOC,aAAeA,YAAYzC,SAAWA,aACjE0C,oBAAsBvC,SAASG,cAAc,kBACvB,IAAtBiC,WAAWZ,OAAc,KACrBgB,YAAcxC,SAASyC,cAAc,YACzCD,YAAYE,YAAc,+BAC1BH,oBAAoBI,YAAYH,aAGpCJ,WAAWQ,SAASC,UACZA,KAAKnB,UAAUF,OAAS,EAAG,KACvBsB,oBAAsB,GACtBjC,SAAWb,SAASyC,cAAc,OAElCM,cAAgB/C,SAASyC,cAAc,SAC3CM,cAAcC,KAAO,WACrBD,cAAcE,MAAQJ,KAAKhD,OAC3BkD,cAAczB,GAAKuB,KAAKhD,OACxBkD,cAAcG,MAAMC,YAAc,MAClCJ,cAAcK,KAAOP,KAAKQ,cAEtBC,WAAatD,SAASyC,cAAc,SACxCa,WAAWC,uBAAkBV,KAAKhD,QAClCyD,WAAWZ,YAAcG,KAAKQ,UAC9BC,WAAWJ,MAAMM,WAAa,OAC9B3C,SAAS4C,MAAQ,UAGjB5C,SAAS8B,YAAYI,eACrBlC,SAAS8B,YAAYW,YAErBzC,SAASqC,MAAMQ,OAAS,sBAEpB9C,cAAgBZ,SAASyC,cAAc,OAC3C7B,cAAcsC,MAAMS,aAAe,OACnC/C,cAAcsC,MAAMU,WAAa,OACjChD,cAAcU,GAAK,eAEnBuB,KAAKnB,UAAUkB,SAASiB,eAEhB5C,aAAejB,SAASyC,cAAc,OACtCqB,kBAAoB9D,SAASyC,cAAc,SAC/CqB,kBAAkBd,KAAO,WACzBc,kBAAkBb,yBAAoBY,SAASE,YAC/CD,kBAAkBZ,MAAMC,YAAc,MACtCW,kBAAkBxC,GAAKuC,SAASE,WAChCD,kBAAkBV,KAAOS,SAASG,cAClClB,oBAAoB1B,KAAK0C,uBAErBG,eAAiBjE,SAASyC,cAAc,SAC5CwB,eAAeV,2BAAsBM,SAASE,YAC9CE,eAAevB,YAAcmB,SAASG,cAEtC/C,aAAa0B,YAAYmB,mBACzB7C,aAAa0B,YAAYsB,gBACzBrD,cAAc+B,YAAY1B,iBAqGAiD,mBAnGYpB,qBAmGtB5B,SAnGO6B,eAoGhC7C,iBAAiB,UAAU,KAClCgE,mBAAmBtB,SAASuB,mBAC1BA,iBAAiBhD,QAAUD,SAASC,uBAUFD,SAAUgD,oBAChDA,mBAAmBtB,SAASuB,mBAC1BA,iBAAiBjE,iBAAiB,UAAU,QACtCiE,iBAAiBhD,QAAS,KAExBiD,iBAAkB,EACtBA,gBAA0CF,mBAmB/BG,OAAOR,UAAaA,SAAS1C,UAlBpCiD,kBAEFlD,SAASC,QAAUgD,iBAAiBhD,cAItCD,SAASC,QAAUgD,iBAAiBhD,cA5H5BmD,CAA+BvB,cAAeD,qBAC9CjC,SAAS8B,YAAY/B,eACrB2B,oBAAoBI,YAAY9B,cAgGZK,SAAUgD,yBA7FvCtC,OAAOC,OAAUC,QAAQC,IAAIF,SA7ExB0C,CAA2BzE,WAAYD,WAI5C+B,OAAOC,QAAU,kCAAiBA,SA7BrC2C,CAAkC3E,OAAQC,WAAYC"}