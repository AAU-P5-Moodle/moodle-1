{"version":3,"file":"import_question.min.js","sources":["../src/import_question.js"],"sourcesContent":["import Templates from \"core/templates\";\r\nimport {add_discard_question_button_listener, rerender_saved_questions_list} from \"./edit_question_helper\";\r\nimport {add_edit_question_listeners} from \"./edit_question\";\r\nimport {add_delete_question_listeners} from \"./delete_question\";\r\nimport {displayException} from \"core/notification\";\r\nimport {external_reuse_questions, get_lecturer_questions} from \"./repository\";\r\nimport {rerender_take_quiz_button} from \"./edit_question_helper\";\r\n\r\n/**\r\n * Adds an event listener to the \"Import Question\" button.\r\n * When the button is clicked, it renders the import question menu popup.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {Promise<void>} A promise that resolves when the initialization is complete.\r\n */\r\nexport const init = async(quizid, lecturerid, url) => {\r\n    let import_question_button = document.getElementById(\"id_buttonimportquestion\");\r\n    import_question_button.addEventListener(\"click\", () => {\r\n        render_import_question_menu_popup(quizid, lecturerid, url);\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Renders the import question menu popup for a live quiz.\r\n *\r\n * This function loads and renders the import question menu popup template, appends it to the main container,\r\n * Sets up event listeners for importing questions and cancelling the import.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} url - The URL to the quiz attempt page.\r\n * @returns {void} - Nothing.\r\n */\r\nasync function render_import_question_menu_popup(quizid, lecturerid, url) {\r\n    // This will call the function to load and render our template.\r\n    Templates.renderForPromise(\"mod_livequiz/import_question_popup\")\r\n        // It returns a promise that needs to be resolved.\r\n        .then(async({html, js}) => {\r\n            // Here we have compiled template.\r\n            Templates.appendNodeContents(\".main-container\", html, js);\r\n            await importQuestions(quizid, url, lecturerid);\r\n            add_discard_question_button_listener();\r\n            add_old_questions_to_popup(lecturerid);\r\n        })\r\n\r\n        // Deal with this exception (Using core/notify exception function is recommended).\r\n        .catch((error) => displayException(error));\r\n}\r\n\r\n/**\r\n * Adds old questions to the import question popup.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n */\r\nfunction add_old_questions_to_popup(lecturerid) {\r\n    get_lecturer_questions(lecturerid).then((oldquizzes) => {\r\n        let oldQuizzesContainer = document.querySelector(\".oldQuizzes\");\r\n        if (oldquizzes.length === 0) {\r\n            let noQuestions = document.createElement(\"p\");\r\n            noQuestions.textContent = \"No questions available.\";\r\n            oldQuizzesContainer.appendChild(noQuestions);\r\n            return;\r\n        }\r\n        oldquizzes.forEach((quiz) => {\r\n            let question_checkboxes = [];\r\n            let quiz_div = document.createElement('div');\r\n            //Create quiz checkbox\r\n            let quiz_checkbox = document.createElement('input');\r\n            quiz_checkbox.type = \"checkbox\";\r\n            quiz_checkbox.value = quiz.quizid;\r\n            quiz_checkbox.id = quiz.quizid;\r\n            quiz_checkbox.name = quiz.quiztitle;\r\n            // Create quiz Label\r\n            let quiz_label = document.createElement('label');\r\n            quiz_label.htmlFor = `quiz_${quiz.quizid}`;\r\n            quiz_label.textContent = quiz.quiztitle;\r\n            quiz_div.class = \"oldquiz\"; // Might be used for styling.\r\n\r\n            // Append the checkbox and label to the div.\r\n            quiz_div.appendChild(quiz_checkbox);\r\n            quiz_div.appendChild(quiz_label);\r\n            // Set the border style\r\n            quiz_div.style.border = \"2px solid black\";\r\n            // Create container for questions.\r\n            let questions_div = document.createElement(\"div\");\r\n            questions_div.style.marginBottom = \"20px\";\r\n            questions_div.id = \"questionsdiv\"\r\n            // Loop through each question and add it to the container.\r\n            quiz.questions.forEach((question) => {\r\n                //Create question checkbox\r\n                let question_div = document.createElement('div');\r\n                let question_checkbox = document.createElement('input');\r\n                question_checkbox.type = \"checkbox\";\r\n                question_checkbox.value = `question_${question.questionid}`;\r\n                question_checkbox.id = question.questionid;\r\n                question_checkbox.name = question.questiontitle;\r\n                question_checkboxes.push(question_checkbox);\r\n                // Create question Label\r\n                let question_label = document.createElement('label');\r\n                question_label.htmlFor = `question_${question.questionid}`;\r\n                question_label.textContent = question.questiontitle;\r\n                question_div.appendChild(question_checkbox);\r\n                question_div.appendChild(question_label);\r\n                questions_div.appendChild(question_div);\r\n            });\r\n            add_quiz_checkbox_listener(quiz_checkbox, question_checkboxes);\r\n            add_question_checkbox_listener(quiz_checkbox, question_checkboxes);\r\n            quiz_div.appendChild(questions_div);\r\n            oldQuizzesContainer.appendChild(quiz_div);\r\n        });\r\n    }).catch((error) => displayException(error));\r\n}\r\n\r\n/**\r\n * Imports questions into a quiz.\r\n *\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {string} url - The URL of the quiz page.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @returns {Promise<void>} A promise that resolves when the questions are imported.\r\n */\r\nasync function importQuestions(quizid, url, lecturerid) {\r\n    let quiz_url = url;\r\n    const importQuestionBtn = document.querySelector(\".import_btn\");\r\n\r\n    importQuestionBtn.addEventListener(\"click\", async() => {\r\n        try {\r\n            let questionids = get_checked_questions();\r\n            call_reuse_questions(quizid, questionids, lecturerid, quiz_url);\r\n        } catch (error) {\r\n            window.console.error(\"Error in import of questions\");\r\n            displayException(error);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Calls the external function to reuse questions.\r\n * @param {number} quizid - The ID of the quiz.\r\n * @param {number} questionids - The IDs of the questions to reuse.\r\n * @param {number} lecturerid - The ID of the lecturer.\r\n * @param {string} quiz_url - The URL of the quiz page.\r\n */\r\nfunction call_reuse_questions(quizid, questionids, lecturerid, quiz_url) {\r\n    external_reuse_questions(quizid, questionids, lecturerid).then((questions) => {\r\n        let update_event_listeners = () => {\r\n            add_edit_question_listeners(quizid, lecturerid);\r\n            add_delete_question_listeners(quizid, lecturerid);\r\n        };\r\n        rerender_saved_questions_list(questions, update_event_listeners); // Re-render saved questions list.\r\n        rerender_take_quiz_button(quiz_url, true); // Re-render take quiz button.\r\n    }). catch((error) => displayException(error));\r\n    let modal_div = document.querySelector(\".Modal_div\");\r\n    modal_div.remove();\r\n}\r\n\r\n/**\r\n * Retrieves the values of all checked questions from the lecturer's question list.\r\n *\r\n * @returns {Array<number>} An array containing the values of the checked questions.\r\n */\r\nfunction get_checked_questions() {\r\n    let checkedquestions = [];\r\n    let questions_div = document.querySelector(\".oldQuizzes\");\r\n\r\n    // Loop through all quizzes and get the checked questions.\r\n    // This selects all the checked checkboxes that are nested three levels deep of divs.\r\n    let quizDivs = questions_div.querySelectorAll('div > div > div > input[type=\"checkbox\"]:checked');\r\n    quizDivs.forEach(checkbox => { // Loop through each checked checkbox and add it to the array.\r\n        checkedquestions.push(parseInt(checkbox.id));\r\n    });\r\n    return checkedquestions; // Returns the checked questions.\r\n}\r\n\r\n/**\r\n * Adds an event listener to the quiz checkboxes.\r\n * @param checkbox - The checkbox to add the event listener to.\r\n * @param questioncheckboxes - The question checkboxes that are manipulated when event is triggered.\r\n */\r\nfunction add_quiz_checkbox_listener(checkbox, questioncheckboxes){\r\n    checkbox.addEventListener(\"change\", () => {\r\n        questioncheckboxes.forEach((questioncheckbox) => {\r\n            questioncheckbox.checked = checkbox.checked;\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Adds an event listener to the question checkboxes.\r\n * @param checkbox - The checkbox that is manipulated when all questions are checked.\r\n * @param questioncheckboxes - The question checkboxes to add the event listener to.\r\n */\r\nfunction add_question_checkbox_listener(checkbox, questioncheckboxes){\r\n    questioncheckboxes.forEach((questioncheckbox) => {\r\n        questioncheckbox.addEventListener(\"change\", () => {\r\n            if(questioncheckbox.checked) {\r\n                let checkboxes_same = false;\r\n                checkboxes_same = check_questions_checked(questioncheckboxes);\r\n                if (checkboxes_same) {\r\n                    checkbox.checked = questioncheckbox.checked;\r\n                }\r\n            } else {\r\n                checkbox.checked = questioncheckbox.checked;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Checks if all questions are checked.\r\n * @param questions\r\n * @returns {bool} - True if all questions are checked, false otherwise.\r\n */\r\nfunction check_questions_checked(questions) {\r\n    return questions.every((question) => question.checked); // Returns true only if all are checked\r\n}"],"names":["async","quizid","lecturerid","url","document","getElementById","addEventListener","renderForPromise","then","html","js","appendNodeContents","quiz_url","querySelector","questionids","checkedquestions","querySelectorAll","forEach","checkbox","push","parseInt","id","get_checked_questions","questions","update_event_listeners","catch","error","remove","call_reuse_questions","window","console","importQuestions","oldquizzes","oldQuizzesContainer","length","noQuestions","createElement","textContent","appendChild","quiz","question_checkboxes","quiz_div","quiz_checkbox","type","value","name","quiztitle","quiz_label","htmlFor","class","style","border","questions_div","questioncheckboxes","marginBottom","question","question_div","question_checkbox","questionid","questiontitle","question_label","questioncheckbox","checked","checkboxes_same","every","add_question_checkbox_listener","add_old_questions_to_popup","render_import_question_menu_popup"],"mappings":"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"}