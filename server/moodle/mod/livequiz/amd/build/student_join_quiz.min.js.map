{"version":3,"file":"student_join_quiz.min.js","sources":["../src/student_join_quiz.js"],"sourcesContent":["/* eslint-disable no-console */\n// Define and export the init function\nexport const init = (url, studentid) => {\n    console.log(\"Student Script is loaded and attempting to attach event listener.\");\n\n    const roomConnectionBtn = document.getElementById(\"room_connection_button\");\n    if (!roomConnectionBtn) {\n        console.error(\"Button with id 'room_connection_button' not found!\");\n        return;\n    }\n\n    let roomCodeInput = document.getElementById(\"roomCode\");\n    if (!roomCodeInput) {\n        console.error(\"Field with id 'roomCodeInput' not found!\");\n        return;\n    }\n    let roomCodeValue = \"\";\n\n    let socket;\n    // Sends message to socket when startQuiz button is pressed\n    roomConnectionBtn.addEventListener(\"click\", async () => {\n        if (roomCodeValue === roomCodeInput.value) {\n            console.error(\"Room code already entered.\");\n            return;\n        }\n        roomCodeValue = roomCodeInput.value;\n        if (roomCodeValue === null || roomCodeValue.trim() === \"\") {\n            console.error(\"No room code found.\");\n            return;\n        }\n        roomCodeInput.disabled = true;\n        roomConnectionBtn.disabled = true;\n\n        try {\n            console.log(\"sending message\"); // eslint-disable-line no-console\n            socket = await connect_to_socket(`${url}?requesttype=connect&userid=${studentid}&room=${roomCodeValue}`);\n            socket.send(\"Testing some stuff for students\" + ' ' + `${studentid}`);\n        } catch (e) {\n            console.error(`Student failed to join room, ${e}`);\n        }\n    });\n\n    const leaveRoomBtn = document.getElementById(\"leave_room_button\");\n\n    if (!leaveRoomBtn) {\n        console.error(\"Button with id 'leave_room_button' not found!\");\n        return;\n    }\n\n    // Sends message to socket when startQuiz button is pressed\n    leaveRoomBtn.addEventListener(\"click\", async () => {\n        const requesttype = \"leaveroom\";\n\n        let leave_room_request = {\n            roomCodeValue,\n            requesttype,\n            studentid,\n        };\n        try {\n            console.log(\"sending message\"); // eslint-disable-line no-console\n            socket.send(JSON.stringify(leave_room_request));\n            socket.onclose();\n            roomCodeInput.disabled = false;\n            roomConnectionBtn.disabled = false;\n            roomCodeValue = \"\";\n        } catch (e) {\n            console.error(`Student failed to leave room, ${e}`);\n        }\n    });\n\n};\n\n\n/**\n * Connects a websocket given url\n *\n * @param {string} url\n * @returns websocket reference\n */\nasync function connect_to_socket(url) {\n    let socket;\n    socket = new WebSocket(url);\n    let myPromise = new Promise(function (myResolve, myReject) {\n        socket.onopen = () => {\n            console.log(\"WebSocket connection established successfully!\");\n            myResolve(socket);\n        };\n        // Handle errors\n        socket.onerror = (error) => {\n            console.error(\"WebSocket encountered an error:\", error);\n            myReject();\n        };\n        console.log(\"WebSocket object created, awaiting connection.\");\n        // Handle incoming messages\n        socket.onmessage = (event) => {\n            console.log(\"WebSocket message received:\", event.data);\n        };\n        // Handle connection close\n        socket.onclose = () => {\n            console.log(\"WebSocket connection closed.\");\n        };\n    });\n    return myPromise;\n}"],"names":["url","studentid","console","log","roomConnectionBtn","document","getElementById","error","roomCodeInput","socket","roomCodeValue","addEventListener","async","value","trim","disabled","WebSocket","Promise","myResolve","myReject","onopen","onerror","onmessage","event","data","onclose","connect_to_socket","send","e","leaveRoomBtn","leave_room_request","requesttype","JSON","stringify"],"mappings":"mKAEoB,CAACA,IAAKC,aACtBC,QAAQC,IAAI,2EAENC,kBAAoBC,SAASC,eAAe,8BAC7CF,8BACDF,QAAQK,MAAM,0DAIdC,cAAgBH,SAASC,eAAe,gBACvCE,0BACDN,QAAQK,MAAM,gDAKdE,OAFAC,cAAgB,GAIpBN,kBAAkBO,iBAAiB,SAASC,aACpCF,gBAAkBF,cAAcK,SAIpCH,cAAgBF,cAAcK,MACR,OAAlBH,eAAmD,KAAzBA,cAAcI,QAI5CN,cAAcO,UAAW,EACzBX,kBAAkBW,UAAW,MAGzBb,QAAQC,IAAI,mBACZM,4BA4CqBT,SACzBS,cACJA,OAAS,IAAIO,UAAUhB,KACP,IAAIiB,SAAQ,SAAUC,UAAWC,UAC7CV,OAAOW,OAAS,KACZlB,QAAQC,IAAI,kDACZe,UAAUT,SAGdA,OAAOY,QAAWd,QACdL,QAAQK,MAAM,kCAAmCA,OACjDY,YAEJjB,QAAQC,IAAI,kDAEZM,OAAOa,UAAaC,QAChBrB,QAAQC,IAAI,8BAA+BoB,MAAMC,OAGrDf,OAAOgB,QAAU,KACbvB,QAAQC,IAAI,oCAhEGuB,WAAqB1B,2CAAkCC,2BAAkBS,gBACxFD,OAAOkB,KAAK,6CAA6C1B,YAC3D,MAAO2B,GACL1B,QAAQK,6CAAsCqB,UAX9C1B,QAAQK,MAAM,4BALdL,QAAQK,MAAM,uCAoBhBsB,aAAexB,SAASC,eAAe,qBAExCuB,aAMLA,aAAalB,iBAAiB,SAASC,cAG/BkB,mBAAqB,CACrBpB,cAAAA,cACAqB,YAJgB,YAKhB9B,UAAAA,eAGAC,QAAQC,IAAI,mBACZM,OAAOkB,KAAKK,KAAKC,UAAUH,qBAC3BrB,OAAOgB,UACPjB,cAAcO,UAAW,EACzBX,kBAAkBW,UAAW,EAC7BL,cAAgB,GAClB,MAAOkB,GACL1B,QAAQK,8CAAuCqB,QArBnD1B,QAAQK,MAAM"}