{"version":3,"file":"edit_question.min.js","sources":["../src/edit_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport {saveQuestion, getQuestion} from \"./repository\";\nimport {\n    addAnswerButtonEventListener,\n    createAnswerContainer,\n    addCancelEditButtonListener,\n    validateSubmission,\n    getQuestionData, prepareAnswers,\n} from \"./helper\";\nimport {addDeleteQuestionListeners} from \"./delete_question\";\n\n/**\n * Adds event listeners for when the questions in the list of saved questions are clicked.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @returns {Promise<void>}\n */\nexport const init = async(quizId, lecturerId) => {\n    addEditQuestionListeners(quizId, lecturerId);\n};\n\n/**\n * Helper function for adding click-event listeners on the saved questions.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @returns {void}\n */\nexport function addEditQuestionListeners(quizId, lecturerId) {\n    let questionList = document.getElementById(\"saved_questions_list\");\n    questionList.addEventListener(\"click\", (event) => {\n        let target = event.target;\n        if (target.classList.contains(\"edit-question-btn\") || target.classList.contains(\"question_list_text\")) {\n            let questionId = parseInt(target.dataset.id, 10);\n            renderEditQuestionMenuPopup(quizId, lecturerId, questionId);\n        }\n    });\n}\n\n/**\n * Render the pop-up for editing a given question.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @param {int} questionId\n * @returns {void}\n */\nfunction renderEditQuestionMenuPopup(quizId, lecturerId, questionId) {\n\nif(!document.querySelector('.modal_div')){\n    // This will call the function to load and render our template.\n    Templates.renderForPromise(\"mod_livequiz/question_menu_popup\", {}, \"boost\")\n\n        // It returns a promise that needs to be resolved.\n        .then(({html, js}) => {\n            // Here we have the compiled template.\n            Templates.appendNodeContents(\".main_container\", html, js);\n            getQuestion(quizId, questionId)\n                .then((question)=> {\n                    restoreQuestionDataInPopup(question);\n                })\n                .catch((error) => window.console.log(error));\n            addAnswerButtonEventListener();\n            addSaveQuestionButtonListener(quizId, lecturerId, questionId);\n            addCancelEditButtonListener(\"edit\");\n        })\n      .catch((error) => window.console.log(error)); // Deal with this exception (Using core/notify exception function is recommended).\n  }\n}\n\n/**\n * Adds an event listener to the save question button.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @param {int} questionId\n * @returns {void}\n */\nfunction addSaveQuestionButtonListener(quizId, lecturerId, questionId) {\n    let saveQuestionButton = document.querySelector(\".save_button\");\n    saveQuestionButton.addEventListener(\"click\", () => {\n        handleSaveQuestion(quizId, lecturerId, questionId);\n    });\n}\n\n/**\n * Event handler for when a question is saved.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @param {int} questionId\n * @returns {void}\n */\nfunction handleSaveQuestion(quizId, lecturerId, questionId) {\n    let questionData = getQuestionData();\n    let savedQuestion = {\n        id: questionId,\n        title: questionData.title,\n        answers: prepareAnswers(),\n        description: questionData.description,\n        explanation: questionData.explanation,\n        type: questionData.type,\n    };\n\n    if (!validateSubmission(savedQuestion.answers)) {\n        return;\n    }\n\n    saveQuestion(savedQuestion, lecturerId, quizId).then((questions) => {\n        const contextsavedquestions = {\n            questions: questions,\n        };\n\n        // Remove the saved questions list.\n        let questionsList = document.querySelector(\"#saved_questions_list\");\n        questionsList.remove();\n\n        // Re-render saved questions list.\n        Templates.renderForPromise(\n            \"mod_livequiz/saved_questions_list\",\n            contextsavedquestions,\n            \"boost\"\n        )\n            .then(({html, js}) => {\n                Templates.appendNodeContents(\"#saved_questions_container\", html, js);\n                addEditQuestionListeners(quizId, lecturerId);\n                addDeleteQuestionListeners(quizId, lecturerId);\n            })\n            .catch((error) => displayException(error));\n    }).catch(() => alert(\"Cannot edit a question, since it already has participations\"));\n    //Remove edit question pop-up\n    let modalDiv = document.querySelector(\".backdrop\");\n    modalDiv.remove();\n}\n\n/**\n * The data for the question passed as argument is rendered in the edit-question pop-up.\n *\n * @param {Object} questionData\n * @returns {void}\n */\nfunction restoreQuestionDataInPopup(questionData) {\n    document.getElementById(\"question_title_id\").value = questionData.questiontitle;\n    document.getElementById(\"question_description_id\").value = questionData.questiondescription;\n    document.getElementById(\"question_explanation_id\").value = questionData.questionexplanation;\n    document.getElementById(\"question_type_checkbox_id\").checked = questionData.questiontype === 'radio';\n    let answers = questionData.answers;\n    for (let i = 0; i < answers.length; i++) {\n        restoreAnswerDataInPopup(answers[i]);\n    }\n}\n\n/**\n * The data for the answer passed as argument is rendered in the edit-question pop-up.\n *\n * @param {Object} answer\n * @returns {void}\n */\nfunction restoreAnswerDataInPopup(answer) {\n    let answerContainer = createAnswerContainer(answer.answerid);\n    answerContainer.querySelector(\".answer_input\").value = answer.answerdescription;\n    answerContainer.querySelector(\".answer_checkbox\").checked = answer.answercorrect;\n    let parentElement = document.querySelector(\".all_answers_for_question_div\");\n    parentElement.appendChild(answerContainer);\n}\n"],"names":["addEditQuestionListeners","quizId","lecturerId","document","getElementById","addEventListener","event","target","classList","contains","questionId","parseInt","dataset","id","querySelector","renderForPromise","then","_ref","html","js","appendNodeContents","question","questionData","value","questiontitle","questiondescription","questionexplanation","checked","questiontype","answers","i","length","restoreAnswerDataInPopup","restoreQuestionDataInPopup","catch","error","window","console","log","savedQuestion","title","description","explanation","type","questions","contextsavedquestions","remove","_ref2","displayException","alert","handleSaveQuestion","addSaveQuestionButtonListener","renderEditQuestionMenuPopup","answer","answerContainer","answerid","answerdescription","answercorrect","appendChild","async"],"mappings":"0YA6BgBA,yBAAyBC,OAAQC,YAC1BC,SAASC,eAAe,wBAC9BC,iBAAiB,SAAUC,YAChCC,OAASD,MAAMC,UACfA,OAAOC,UAAUC,SAAS,sBAAwBF,OAAOC,UAAUC,SAAS,sBAAuB,KAC/FC,WAAaC,SAASJ,OAAOK,QAAQC,GAAI,cAcpBZ,OAAQC,WAAYQ,YAErDP,SAASW,cAAc,kCAEbC,iBAAiB,mCAAoC,GAAI,SAG9DC,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BAEAC,mBAAmB,kBAAmBF,KAAMC,gCAC1ClB,OAAQS,YACfM,MAAMK,qBAmFaC,cAChCnB,SAASC,eAAe,qBAAqBmB,MAAQD,aAAaE,cAClErB,SAASC,eAAe,2BAA2BmB,MAAQD,aAAaG,oBACxEtB,SAASC,eAAe,2BAA2BmB,MAAQD,aAAaI,oBACxEvB,SAASC,eAAe,6BAA6BuB,QAAwC,UAA9BL,aAAaM,iBACxEC,QAAUP,aAAaO,YACtB,IAAIC,EAAI,EAAGA,EAAID,QAAQE,OAAQD,IAChCE,yBAAyBH,QAAQC,IAzFrBG,CAA2BZ,aAE9Ba,OAAOC,OAAUC,OAAOC,QAAQC,IAAIH,6DAiBdlC,OAAQC,WAAYQ,YAC9BP,SAASW,cAAc,gBAC7BT,iBAAiB,SAAS,eAarBJ,OAAQC,WAAYQ,gBACxCY,cAAe,6BACfiB,cAAgB,CAChB1B,GAAIH,WACJ8B,MAAOlB,aAAakB,MACpBX,SAAS,4BACTY,YAAanB,aAAamB,YAC1BC,YAAapB,aAAaoB,YAC1BC,KAAMrB,aAAaqB,WAGlB,8BAAmBJ,cAAcV,6CAIzBU,cAAerC,WAAYD,QAAQe,MAAM4B,kBAC5CC,sBAAwB,CAC1BD,UAAWA,WAIKzC,SAASW,cAAc,yBAC7BgC,4BAGJ/B,iBACN,oCACA8B,sBACA,SAEC7B,MAAK+B,YAAC7B,KAACA,KAADC,GAAOA,6BACAC,mBAAmB,6BAA8BF,KAAMC,IACjEnB,yBAAyBC,OAAQC,4DACND,OAAQC,eAEtCgC,OAAOC,OAAUa,iBAAiBb,YACxCD,OAAM,IAAMe,MAAM,iEAEN9C,SAASW,cAAc,aAC7BgC,SAnDLI,CAAmBjD,OAAQC,WAAYQ,eAlBnCyC,CAA8BlD,OAAQC,WAAYQ,oDACtB,WAEjCwB,OAAOC,OAAUC,OAAOC,QAAQC,IAAIH,SAhC/BiB,CAA4BnD,OAAQC,WAAYQ,yBA4HnDsB,yBAAyBqB,YAC1BC,iBAAkB,iCAAsBD,OAAOE,UACnDD,gBAAgBxC,cAAc,iBAAiBS,MAAQ8B,OAAOG,kBAC9DF,gBAAgBxC,cAAc,oBAAoBa,QAAU0B,OAAOI,cAC/CtD,SAASW,cAAc,iCAC7B4C,YAAYJ,+BAlJVK,MAAM1D,OAAQC,cAC9BF,yBAAyBC,OAAQC"}