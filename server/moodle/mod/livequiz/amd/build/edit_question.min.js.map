{"version":3,"file":"edit_question.min.js","sources":["../src/edit_question.js"],"sourcesContent":["import Templates from \"core/templates\";\nimport { exception as displayException } from \"core/notification\";\nimport { save_question, get_question } from \"./repository\";\nimport {\n  add_answer_button_event_listener,\n  create_answer_container,\n  add_discard_question_button_listener,\n} from \"./helper\";\nimport { rerender_saved_questions_list } from \"./helper\";\nimport { add_delete_question_listeners } from \"./delete_question\";\n\nexport const init = async (quizid, lecturerid) => {\n  add_edit_question_listeners(quizid, lecturerid);\n};\n\nexport function add_edit_question_listeners(quizid, lecturerid) {\n  let question_list = document.getElementById(\"saved_questions_list\");\n  let edit_question_elements = question_list.querySelectorAll(\".edit-question\");\n  edit_question_elements.forEach((element) => {\n    let questionid = parseInt(element.dataset.id, 10);\n    element.addEventListener(\"click\", () => {\n      render_edit_question_menu_popup(quizid, lecturerid, questionid);\n    });\n  });\n}\n\nfunction render_edit_question_menu_popup(quizid, lecturerid, questionid) {\n  // This will call the function to load and render our template.\n  Templates.renderForPromise(\"mod_livequiz/question_menu_popup\")\n\n    // It returns a promise that needs to be resolved.\n    .then(({ html, js }) => {\n      // Here we have the compiled template.\n      Templates.appendNodeContents(\".main-container\", html, js);\n      get_question(quizid, questionid).then((question) => {\n        restore_question_data_in_popup(question);\n      });\n      add_answer_button_event_listener();\n      add_save_question_button_listener(quizid, lecturerid, questionid);\n      add_discard_question_button_listener();\n    })\n\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n}\n\nfunction add_save_question_button_listener(quizid, lecturerid, questionid) {\n  let save_question_button = document.querySelector(\".save_button\");\n  save_question_button.addEventListener(\"click\", () => {\n    on_save_question_button_clicked(quizid, lecturerid, questionid);\n  });\n}\n\nfunction on_save_question_button_clicked(quizid, lecturerid, questionid) {\n  let question_input_title = document.getElementById(\"question_title_id\");\n  let question_indput_description = document.getElementById(\n    \"question_description_id\"\n  );\n  let question_indput_explanation = document.getElementById(\n    \"question_explanation_id\"\n  );\n  let questionTitle = question_input_title.value.trim();\n  let questionDesription = question_indput_description.value.trim();\n  let questionExplanation = question_indput_explanation.value.trim();\n\n  if (!questionDesription) {\n    alert(\"Please enter a question description.\");\n    return;\n  }\n  if (!questionTitle) {\n    questionTitle = \"Question\";\n  }\n  let answers = [];\n  let answers_div = document.querySelector(\".all_answers_for_question_div\");\n  for (let i = 0; i < answers_div.children.length; i++) {\n    let answertext = answers_div.children[i]\n      .querySelector(\".answer_input\")\n      .value.trim();\n\n    let iscorrect =\n      answers_div.children[i].querySelector(\".answer_checkbox\").checked;\n    iscorrect ? (iscorrect = 1) : (iscorrect = 0);\n\n    answers.push({\n      description: answertext,\n      correct: iscorrect,\n      explanation: \"\",\n    });\n  }\n\n  let savedQuestion = {\n    id: questionid,\n    title: questionTitle,\n    answers: answers,\n    description: questionDesription,\n    explanation: questionExplanation,\n  };\n  \n  //Specify the element we want to add event listeners to after saving questions\n  let update_event_listeners = () => {\n    add_edit_question_listeners(quizid, lecturerid);\n    add_delete_question_listeners(quizid, lecturerid);\n  }\n\n  //Save question in DB, and rerender question list on front-end.\n  save_question(savedQuestion, lecturerid, quizid).then((questions) => {rerender_saved_questions_list(questions, update_event_listeners)});\n  \n  //Remove edit question pop-up\n  let modal_div = document.querySelector(\".Modal_div\");\n  modal_div.remove();\n\n}\nfunction restore_question_data_in_popup(questiondata) {\n  document.getElementById(\"question_title_id\").value =\n    questiondata.questiontitle;\n  document.getElementById(\"question_description_id\").value =\n    questiondata.questiondescription;\n  document.getElementById(\"question_explanation_id\").value =\n    questiondata.questionexplanation;\n  let answers = questiondata.answers;\n  for (let i = 0; i < answers.length; i++) {\n    restore_answer_data_in_popup(answers[i]);\n  }\n  console.log(\"answers: \", answers);\n}\n\nfunction restore_answer_data_in_popup(answer) {\n  let answer_container = create_answer_container(answer.answerid);\n  answer_container.querySelector(\".answer_input\").value =\n    answer.answerdescription;\n  answer_container.querySelector(\".answer_checkbox\").checked =\n    answer.answercorrect;\n  let parent_element = document.querySelector(\".all_answers_for_question_div\");\n  parent_element.appendChild(answer_container);\n}\n"],"names":["add_edit_question_listeners","quizid","lecturerid","document","getElementById","querySelectorAll","forEach","element","questionid","parseInt","dataset","id","addEventListener","renderForPromise","then","_ref","html","js","appendNodeContents","question","questiondata","value","questiontitle","questiondescription","questionexplanation","answers","i","length","restore_answer_data_in_popup","console","log","restore_question_data_in_popup","querySelector","question_input_title","question_indput_description","question_indput_explanation","questionTitle","trim","questionDesription","questionExplanation","alert","answers_div","children","answertext","iscorrect","checked","push","description","correct","explanation","savedQuestion","title","update_event_listeners","questions","remove","on_save_question_button_clicked","add_save_question_button_listener","catch","error","render_edit_question_menu_popup","answer","answer_container","answerid","answerdescription","answercorrect","appendChild","async"],"mappings":"kbAegBA,4BAA4BC,OAAQC,YAC9BC,SAASC,eAAe,wBACDC,iBAAiB,kBACrCC,SAASC,cAC1BC,WAAaC,SAASF,QAAQG,QAAQC,GAAI,IAC9CJ,QAAQK,iBAAiB,SAAS,eAMGX,OAAQC,WAAYM,+BAEjDK,iBAAiB,oCAGxBC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAEHC,mBAAmB,kBAAmBF,KAAMC,iCACzChB,OAAQO,YAAYM,MAAMK,qBA8ELC,cACtCjB,SAASC,eAAe,qBAAqBiB,MAC3CD,aAAaE,cACfnB,SAASC,eAAe,2BAA2BiB,MACjDD,aAAaG,oBACfpB,SAASC,eAAe,2BAA2BiB,MACjDD,aAAaI,wBACXC,QAAUL,aAAaK,YACtB,IAAIC,EAAI,EAAGA,EAAID,QAAQE,OAAQD,IAClCE,6BAA6BH,QAAQC,IAEvCG,QAAQC,IAAI,YAAaL,SAxFnBM,CAA+BZ,qEAWIlB,OAAQC,WAAYM,YAClCL,SAAS6B,cAAc,gBAC7BpB,iBAAiB,SAAS,eAKRX,OAAQC,WAAYM,gBACvDyB,qBAAuB9B,SAASC,eAAe,qBAC/C8B,4BAA8B/B,SAASC,eACzC,2BAEE+B,4BAA8BhC,SAASC,eACzC,2BAEEgC,cAAgBH,qBAAqBZ,MAAMgB,OAC3CC,mBAAqBJ,4BAA4Bb,MAAMgB,OACvDE,oBAAsBJ,4BAA4Bd,MAAMgB,WAEvDC,+BACHE,MAAM,wCAGHJ,gBACHA,cAAgB,gBAEdX,QAAU,GACVgB,YAActC,SAAS6B,cAAc,qCACpC,IAAIN,EAAI,EAAGA,EAAIe,YAAYC,SAASf,OAAQD,IAAK,KAChDiB,WAAaF,YAAYC,SAAShB,GACnCM,cAAc,iBACdX,MAAMgB,OAELO,UACFH,YAAYC,SAAShB,GAAGM,cAAc,oBAAoBa,QAC/CD,UAAbA,UAAyB,EAAkB,EAE3CnB,QAAQqB,KAAK,CACXC,YAAaJ,WACbK,QAASJ,UACTK,YAAa,SAIbC,cAAgB,CAClBvC,GAAIH,WACJ2C,MAAOf,cACPX,QAASA,QACTsB,YAAaT,mBACbW,YAAaV,qBAIXa,uBAAyB,KAC3BpD,4BAA4BC,OAAQC,+DACND,OAAQC,2CAI1BgD,cAAehD,WAAYD,QAAQa,MAAMuC,sDAA6CA,UAAWD,2BAG/FjD,SAAS6B,cAAc,cAC7BsB,SA5DRC,CAAgCtD,OAAQC,WAAYM,eAXlDgD,CAAkCvD,OAAQC,WAAYM,kEAKvDiD,OAAOC,QAAU,2BAAiBA,SAtBjCC,CAAgC1D,OAAQC,WAAYM,2BAyGjDoB,6BAA6BgC,YAChCC,kBAAmB,mCAAwBD,OAAOE,UACtDD,iBAAiB7B,cAAc,iBAAiBX,MAC9CuC,OAAOG,kBACTF,iBAAiB7B,cAAc,oBAAoBa,QACjDe,OAAOI,cACY7D,SAAS6B,cAAc,iCAC7BiC,YAAYJ,gCA1HTK,MAAOjE,OAAQC,cACjCF,4BAA4BC,OAAQC"}