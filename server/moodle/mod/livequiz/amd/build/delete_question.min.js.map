{"version":3,"file":"delete_question.min.js","sources":["../src/delete_question.js"],"sourcesContent":["import { delete_question } from \"./repository\";\r\nimport { rerender_take_quiz_button } from \"./edit_question_helper\";\r\n\r\nlet take_quiz_url = \"\";\r\n\r\nexport const init = async (quizid, lecturerid, url) => {\r\n  take_quiz_url = url; //Set url to quiz attempt page to global variable\r\n  add_delete_question_listeners(quizid, lecturerid);\r\n};\r\n\r\nexport function add_delete_question_listeners(quizid, lecturerid) {\r\n  let question_list = document.getElementById(\"saved_questions_list\");\r\n  let delete_question_elements = question_list.querySelectorAll(\".delete-question\");\r\n\r\n  delete_question_elements.forEach((element) => {\r\n    element.addEventListener(\"click\", () => {\r\n      let list_item = element.closest(\"li\"); // Get the list item.\r\n      let questionid = parseInt(element.dataset.id, 10);\r\n            if (!confirm(\"Are you sure you want to delete this question?\")) {\r\n                return;\r\n            } else {\r\n                delete_question(questionid, lecturerid, quizid)\r\n                    .then((response) => {\r\n                        if (response.success) {\r\n                            list_item.remove(); // Remove the question from the list.\r\n                            element.remove(); // Remove the delete button.\r\n                            let updated_list_length = question_list.querySelectorAll(\"li\").length;\r\n                            if (updated_list_length === 0) {\r\n                                rerender_take_quiz_button(take_quiz_url, false);\r\n                            }\r\n                        } else {\r\n                            alert(\"Cannot delete question: \" + response.message);\r\n                        }\r\n                    });\r\n            }\r\n    });\r\n  });\r\n}\r\n"],"names":["take_quiz_url","add_delete_question_listeners","quizid","lecturerid","question_list","document","getElementById","querySelectorAll","forEach","element","addEventListener","list_item","closest","questionid","parseInt","dataset","id","confirm","then","response","success","remove","length","alert","message","async","url"],"mappings":"sSAGIA,cAAgB,YAOJC,8BAA8BC,OAAQC,gBAChDC,cAAgBC,SAASC,eAAe,wBACbF,cAAcG,iBAAiB,oBAErCC,SAASC,UAChCA,QAAQC,iBAAiB,SAAS,SAC5BC,UAAYF,QAAQG,QAAQ,MAC5BC,WAAaC,SAASL,QAAQM,QAAQC,GAAI,IACnCC,QAAQ,mFAGOJ,WAAYV,WAAYD,QACnCgB,MAAMC,cACCA,SAASC,QAAS,CAClBT,UAAUU,SACVZ,QAAQY,SAEoB,IADFjB,cAAcG,iBAAiB,MAAMe,4DAEjCtB,eAAe,QAG7CuB,MAAM,2BAA6BJ,SAASK,gCA1BpDC,MAAOvB,OAAQC,WAAYuB,OAC7C1B,cAAgB0B,IAChBzB,8BAA8BC,OAAQC"}