{"version":3,"file":"delete_question.min.js","sources":["../src/delete_question.js"],"sourcesContent":["import {deleteQuestion} from \"./repository\";\r\nimport {rerenderTakeQuizButton} from \"./helper\";\r\n\r\nlet takeQuizUrl = \"\";\r\n\r\n/**\r\n * Adds click-event listeners to the buttons for deleting questions.\r\n *\r\n * @param quizId\r\n * @param lecturerId\r\n * @param url\r\n * @returns {Promise<void>}\r\n */\r\n\r\nexport const init = async(quizId, lecturerId, url) => {\r\n    // Set global variable holding the url to quiz attempt page.\r\n    // Used for calling rerenderTakeQuizButton when the last question is deleted.\r\n    takeQuizUrl = url;\r\n    addDeleteQuestionListeners(quizId, lecturerId);\r\n};\r\n\r\n/**\r\n * Helper function for adding click-event listeners to delete buttons.\r\n *\r\n * @param {int} quizId\r\n * @param {int} lecturerId\r\n * @returns {void}\r\n */\r\nexport function addDeleteQuestionListeners(quizId, lecturerId) {\r\n    let questionList = document.getElementById(\"saved_questions_list\");\r\n    let deleteQuestionElements = questionList.querySelectorAll(\".delete-question\");\r\n\r\n    deleteQuestionElements.forEach((element) => {\r\n        element.addEventListener(\"click\", () => {\r\n            let listItem = element.closest(\"li\"); // Get the list item.\r\n            let questionId = parseInt(element.dataset.id, 10);\r\n            if (confirm(\"Are you sure you want to delete this question?\")) {\r\n                deleteQuestion(questionId, lecturerId, quizId)\r\n                    .then((response) => {\r\n                        if (response.success) {\r\n                            listItem.remove(); // Remove the question from the list.\r\n                            element.remove(); // Remove the delete button.\r\n                            let updatedListLength = questionList.querySelectorAll(\"li\").length;\r\n                            if (updatedListLength === 0) {\r\n                                rerenderTakeQuizButton(takeQuizUrl, false);\r\n                            }\r\n                        } else {\r\n                            throw(\"Cannot delete question, since it already has participations\");\r\n                        }\r\n                    }).catch((error) => {\r\n                        alert(error);\r\n                    });\r\n                }\r\n            });\r\n  });\r\n}\r\n"],"names":["takeQuizUrl","addDeleteQuestionListeners","quizId","lecturerId","questionList","document","getElementById","querySelectorAll","forEach","element","addEventListener","listItem","closest","questionId","parseInt","dataset","id","confirm","then","response","success","remove","length","catch","error","alert","async","url"],"mappings":"oQAGIA,YAAc,YAyBFC,2BAA2BC,OAAQC,gBAC3CC,aAAeC,SAASC,eAAe,wBACdF,aAAaG,iBAAiB,oBAEpCC,SAASC,UAC5BA,QAAQC,iBAAiB,SAAS,SAC1BC,SAAWF,QAAQG,QAAQ,MAC3BC,WAAaC,SAASL,QAAQM,QAAQC,GAAI,IAC1CC,QAAQ,kFACOJ,WAAYV,WAAYD,QAClCgB,MAAMC,eACCA,SAASC,aAQH,8DAPNT,SAASU,SACTZ,QAAQY,SAEkB,IADFjB,aAAaG,iBAAiB,MAAMe,2CAEjCtB,aAAa,MAK7CuB,OAAOC,QACNC,MAAMD,8BApCVE,MAAMxB,OAAQC,WAAYwB,OAG1C3B,YAAc2B,IACd1B,2BAA2BC,OAAQC"}