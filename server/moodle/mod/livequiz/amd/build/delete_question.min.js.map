{"version":3,"file":"delete_question.min.js","sources":["../src/delete_question.js"],"sourcesContent":["import {deleteQuestion} from \"./repository\";\nimport {rerenderTakeQuizButton} from \"./helper\";\n\nlet takeQuizUrl = \"\";\n\n/**\n * Adds click-event listeners to the buttons for deleting questions.\n *\n * @param quizId\n * @param lecturerId\n * @param url\n * @returns {Promise<void>}\n */\n\nexport const init = async(quizId, lecturerId, url) => {\n    // Set global variable holding the url to quiz attempt page.\n    // Used for calling rerenderTakeQuizButton when the last question is deleted.\n    takeQuizUrl = url;\n    addDeleteQuestionListeners(quizId, lecturerId);\n};\n\n/**\n * Helper function for adding click-event listeners to delete buttons.\n *\n * @param {int} quizId\n * @param {int} lecturerId\n * @returns {void}\n */\nexport function addDeleteQuestionListeners(quizId, lecturerId) {\n    let questionList = document.getElementById(\"saved_questions_list\");\n    let deleteQuestionElements = questionList.querySelectorAll(\".delete-question\");\n\n    deleteQuestionElements.forEach((element) => {\n        element.addEventListener(\"click\", () => {\n            let listItem = element.closest(\"li\"); // Get the list item.\n            let questionId = parseInt(element.dataset.id, 10);\n            if (confirm(\"Are you sure you want to delete this question?\")) {\n                deleteQuestion(questionId, lecturerId, quizId)\n                    .then((response) => {\n                        if (response.success) {\n                            listItem.remove(); // Remove the question from the list.\n                            element.remove(); // Remove the delete button.\n                            let updatedListLength = questionList.querySelectorAll(\"li\").length;\n                            if (updatedListLength === 0) {\n                                rerenderTakeQuizButton(takeQuizUrl, false);\n                            }\n                        } else {\n                            throw(\"Cannot delete question, since it already has participations\");\n                        }\n                    }).catch((error) => {\n                        alert(error);\n                    });\n                }\n            });\n  });\n}\n"],"names":["takeQuizUrl","addDeleteQuestionListeners","quizId","lecturerId","questionList","document","getElementById","querySelectorAll","forEach","element","addEventListener","listItem","closest","questionId","parseInt","dataset","id","confirm","then","response","success","remove","length","catch","error","alert","async","url"],"mappings":"oQAGIA,YAAc,YAyBFC,2BAA2BC,OAAQC,gBAC3CC,aAAeC,SAASC,eAAe,wBACdF,aAAaG,iBAAiB,oBAEpCC,SAASC,UAC5BA,QAAQC,iBAAiB,SAAS,SAC1BC,SAAWF,QAAQG,QAAQ,MAC3BC,WAAaC,SAASL,QAAQM,QAAQC,GAAI,IAC1CC,QAAQ,kFACOJ,WAAYV,WAAYD,QAClCgB,MAAMC,eACCA,SAASC,aAQH,8DAPNT,SAASU,SACTZ,QAAQY,SAEkB,IADFjB,aAAaG,iBAAiB,MAAMe,2CAEjCtB,aAAa,MAK7CuB,OAAOC,QACNC,MAAMD,8BApCVE,MAAMxB,OAAQC,WAAYwB,OAG1C3B,YAAc2B,IACd1B,2BAA2BC,OAAQC"}