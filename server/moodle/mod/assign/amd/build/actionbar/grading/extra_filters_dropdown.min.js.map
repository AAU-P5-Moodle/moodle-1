{"version":3,"file":"extra_filters_dropdown.min.js","sources":["../../../src/actionbar/grading/extra_filters_dropdown.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getDropdownDialog} from 'core/local/dropdown/dialog';\nimport {getUserPreference} from 'core_user/repository';\nimport $ from 'jquery';\n\n/**\n * Module for the extra filters dropdown on the submissions page.\n *\n * @module     mod_assign/actionbar/grading/extra_filters_dropdown\n * @copyright  2024 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/** @constant {Object} The object containing the relevant selectors. */\nconst Selectors = {\n    extraFiltersDropdown: '.dropdown.extrafilters',\n    extraFiltersClose: 'a[data-action=\"close\"]',\n    workflowFilterElement: 'select[name=\"workflowfilter\"]'\n};\n\n/**\n * Register event listeners for the extra filters dropdown.\n *\n * @param {DropdownDialog} extraFiltersDropdown The dropdown dialog instance.\n */\nconst registerEventListeners = (extraFiltersDropdown) => {\n    // Click event listener to the extra filters dropdown element.\n    extraFiltersDropdown.getElement().addEventListener('click', e => {\n        // The target is the 'Close' button.\n        if (e.target.closest(Selectors.extraFiltersClose)) {\n            e.preventDefault();\n            extraFiltersDropdown.setVisible(false);\n        }\n    });\n    // Event listener triggered upon hiding of the dropdown.\n    $(extraFiltersDropdown.getElement()).on('hide.bs.dropdown', () => {\n        // Restore the filters to their stored preference values once the dropdown is closed.\n        restoreAppliedWorkflowFilter(extraFiltersDropdown);\n    });\n};\n\n/**\n * Restores the currently applied workflow filter to its stored preference value.\n *\n * @param {DropdownDialog} extraFiltersDropdown The dropdown dialog instance.\n */\nconst restoreAppliedWorkflowFilter = async(extraFiltersDropdown) => {\n    const appliedWorkflowFilter = await getUserPreference('assign_workflowfilter');\n    const workflowFilterSelect = extraFiltersDropdown.getElement().querySelector(Selectors.workflowFilterElement);\n    workflowFilterSelect.value = appliedWorkflowFilter;\n};\n\n/**\n * Initialize module.\n */\nexport const init = () => {\n    const extraFiltersDropdown = getDropdownDialog(Selectors.extraFiltersDropdown);\n    if (extraFiltersDropdown) {\n        registerEventListeners(extraFiltersDropdown);\n    }\n};\n"],"names":["Selectors","restoreAppliedWorkflowFilter","async","appliedWorkflowFilter","extraFiltersDropdown","getElement","querySelector","value","addEventListener","e","target","closest","preventDefault","setVisible","on","registerEventListeners"],"mappings":";;;;;;;gJA4BMA,+BACoB,yBADpBA,4BAEiB,yBAFjBA,gCAGqB,gCA6BrBC,6BAA+BC,MAAAA,6BAC3BC,4BAA8B,iCAAkB,yBACzBC,qBAAqBC,aAAaC,cAAcN,iCACxDO,MAAQJ,qCAMb,WACVC,sBAAuB,6BAAkBJ,gCAC3CI,sBAhCwBA,CAAAA,uBAE5BA,qBAAqBC,aAAaG,iBAAiB,SAASC,IAEpDA,EAAEC,OAAOC,QAAQX,+BACjBS,EAAEG,iBACFR,qBAAqBS,YAAW,2BAItCT,qBAAqBC,cAAcS,GAAG,oBAAoB,KAExDb,6BAA6BG,0BAqB7BW,CAAuBX"}